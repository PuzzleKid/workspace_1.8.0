
WLEtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08007304  08007304  00017304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800750c  0800750c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007514  08007514  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800751c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b28  20000074  08007590  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b9c  08007590  00021b9c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024a41  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000434a  00000000  00000000  00044adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c88  00000000  00000000  00048e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b00  00000000  00000000  0004aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c783  00000000  00000000  0004c5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc40  00000000  00000000  00068d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1638  00000000  00000000  0008697b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00137fb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ad8  00000000  00000000  00138008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	080072ec 	.word	0x080072ec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	080072ec 	.word	0x080072ec

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b96c 	b.w	8000470 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	468e      	mov	lr, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	f040 8082 	bne.w	80002c6 <__udivmoddi4+0x116>
 80001c2:	428a      	cmp	r2, r1
 80001c4:	4617      	mov	r7, r2
 80001c6:	d946      	bls.n	8000256 <__udivmoddi4+0xa6>
 80001c8:	fab2 f282 	clz	r2, r2
 80001cc:	b14a      	cbz	r2, 80001e2 <__udivmoddi4+0x32>
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa05 f302 	lsl.w	r3, r5, r2
 80001d6:	fa20 f101 	lsr.w	r1, r0, r1
 80001da:	4097      	lsls	r7, r2
 80001dc:	ea41 0e03 	orr.w	lr, r1, r3
 80001e0:	4094      	lsls	r4, r2
 80001e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e6:	0c23      	lsrs	r3, r4, #16
 80001e8:	fbbe fcf8 	udiv	ip, lr, r8
 80001ec:	b2b9      	uxth	r1, r7
 80001ee:	fb08 ee1c 	mls	lr, r8, ip, lr
 80001f2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80001f6:	fb0c f001 	mul.w	r0, ip, r1
 80001fa:	4298      	cmp	r0, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	18fb      	adds	r3, r7, r3
 8000200:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000204:	f080 8116 	bcs.w	8000434 <__udivmoddi4+0x284>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 8113 	bls.w	8000434 <__udivmoddi4+0x284>
 800020e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000212:	443b      	add	r3, r7
 8000214:	1a1b      	subs	r3, r3, r0
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f101 	mul.w	r1, r0, r1
 8000228:	42a1      	cmp	r1, r4
 800022a:	d909      	bls.n	8000240 <__udivmoddi4+0x90>
 800022c:	193c      	adds	r4, r7, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8101 	bcs.w	8000438 <__udivmoddi4+0x288>
 8000236:	42a1      	cmp	r1, r4
 8000238:	f240 80fe 	bls.w	8000438 <__udivmoddi4+0x288>
 800023c:	3802      	subs	r0, #2
 800023e:	443c      	add	r4, r7
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	2100      	movs	r1, #0
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa2>
 800024a:	40d4      	lsrs	r4, r2
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	b902      	cbnz	r2, 800025a <__udivmoddi4+0xaa>
 8000258:	deff      	udf	#255	; 0xff
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	2a00      	cmp	r2, #0
 8000260:	d14f      	bne.n	8000302 <__udivmoddi4+0x152>
 8000262:	1bcb      	subs	r3, r1, r7
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f f887 	uxth.w	r8, r7
 800026c:	2101      	movs	r1, #1
 800026e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000272:	0c25      	lsrs	r5, r4, #16
 8000274:	fb0e 331c 	mls	r3, lr, ip, r3
 8000278:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800027c:	fb08 f30c 	mul.w	r3, r8, ip
 8000280:	42ab      	cmp	r3, r5
 8000282:	d907      	bls.n	8000294 <__udivmoddi4+0xe4>
 8000284:	197d      	adds	r5, r7, r5
 8000286:	f10c 30ff 	add.w	r0, ip, #4294967295
 800028a:	d202      	bcs.n	8000292 <__udivmoddi4+0xe2>
 800028c:	42ab      	cmp	r3, r5
 800028e:	f200 80e7 	bhi.w	8000460 <__udivmoddi4+0x2b0>
 8000292:	4684      	mov	ip, r0
 8000294:	1aed      	subs	r5, r5, r3
 8000296:	b2a3      	uxth	r3, r4
 8000298:	fbb5 f0fe 	udiv	r0, r5, lr
 800029c:	fb0e 5510 	mls	r5, lr, r0, r5
 80002a0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80002a4:	fb08 f800 	mul.w	r8, r8, r0
 80002a8:	45a0      	cmp	r8, r4
 80002aa:	d907      	bls.n	80002bc <__udivmoddi4+0x10c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	d202      	bcs.n	80002ba <__udivmoddi4+0x10a>
 80002b4:	45a0      	cmp	r8, r4
 80002b6:	f200 80d7 	bhi.w	8000468 <__udivmoddi4+0x2b8>
 80002ba:	4618      	mov	r0, r3
 80002bc:	eba4 0408 	sub.w	r4, r4, r8
 80002c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c4:	e7c0      	b.n	8000248 <__udivmoddi4+0x98>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80af 	beq.w	800042e <__udivmoddi4+0x27e>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d14b      	bne.n	800037c <__udivmoddi4+0x1cc>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0x13e>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80b7 	bhi.w	800045c <__udivmoddi4+0x2ac>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0303 	sbc.w	r3, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	469e      	mov	lr, r3
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0aa      	beq.n	8000252 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4e00 	strd	r4, lr, [r6]
 8000300:	e7a7      	b.n	8000252 <__udivmoddi4+0xa2>
 8000302:	f1c2 0c20 	rsb	ip, r2, #32
 8000306:	fa01 f302 	lsl.w	r3, r1, r2
 800030a:	4097      	lsls	r7, r2
 800030c:	fa20 f00c 	lsr.w	r0, r0, ip
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000318:	4318      	orrs	r0, r3
 800031a:	fbbc f1fe 	udiv	r1, ip, lr
 800031e:	0c05      	lsrs	r5, r0, #16
 8000320:	fb0e cc11 	mls	ip, lr, r1, ip
 8000324:	fa1f f887 	uxth.w	r8, r7
 8000328:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032c:	fb01 f308 	mul.w	r3, r1, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	fa04 f402 	lsl.w	r4, r4, r2
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x19c>
 8000338:	197d      	adds	r5, r7, r5
 800033a:	f101 3cff 	add.w	ip, r1, #4294967295
 800033e:	f080 808b 	bcs.w	8000458 <__udivmoddi4+0x2a8>
 8000342:	42ab      	cmp	r3, r5
 8000344:	f240 8088 	bls.w	8000458 <__udivmoddi4+0x2a8>
 8000348:	3902      	subs	r1, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aeb      	subs	r3, r5, r3
 800034e:	b285      	uxth	r5, r0
 8000350:	fbb3 f0fe 	udiv	r0, r3, lr
 8000354:	fb0e 3310 	mls	r3, lr, r0, r3
 8000358:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800035c:	fb00 f308 	mul.w	r3, r0, r8
 8000360:	42ab      	cmp	r3, r5
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x1c4>
 8000364:	197d      	adds	r5, r7, r5
 8000366:	f100 3cff 	add.w	ip, r0, #4294967295
 800036a:	d271      	bcs.n	8000450 <__udivmoddi4+0x2a0>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d96f      	bls.n	8000450 <__udivmoddi4+0x2a0>
 8000370:	3802      	subs	r0, #2
 8000372:	443d      	add	r5, r7
 8000374:	1aeb      	subs	r3, r5, r3
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	e778      	b.n	800026e <__udivmoddi4+0xbe>
 800037c:	f1c1 0c20 	rsb	ip, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f70c 	lsr.w	r7, r2, ip
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 f40c 	lsr.w	r4, r0, ip
 800038c:	fa05 f301 	lsl.w	r3, r5, r1
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	fa25 f50c 	lsr.w	r5, r5, ip
 8000398:	431c      	orrs	r4, r3
 800039a:	0c23      	lsrs	r3, r4, #16
 800039c:	fbb5 f9fe 	udiv	r9, r5, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 5519 	mls	r5, lr, r9, r5
 80003a8:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80003ac:	fb09 fa08 	mul.w	sl, r9, r8
 80003b0:	45aa      	cmp	sl, r5
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	fa00 f301 	lsl.w	r3, r0, r1
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x21e>
 80003bc:	197d      	adds	r5, r7, r5
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d247      	bcs.n	8000454 <__udivmoddi4+0x2a4>
 80003c4:	45aa      	cmp	sl, r5
 80003c6:	d945      	bls.n	8000454 <__udivmoddi4+0x2a4>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	443d      	add	r5, r7
 80003ce:	eba5 050a 	sub.w	r5, r5, sl
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb5 f0fe 	udiv	r0, r5, lr
 80003d8:	fb0e 5510 	mls	r5, lr, r0, r5
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb00 f808 	mul.w	r8, r0, r8
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x248>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ee:	d22d      	bcs.n	800044c <__udivmoddi4+0x29c>
 80003f0:	45a0      	cmp	r8, r4
 80003f2:	d92b      	bls.n	800044c <__udivmoddi4+0x29c>
 80003f4:	3802      	subs	r0, #2
 80003f6:	443c      	add	r4, r7
 80003f8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	fba0 8902 	umull	r8, r9, r0, r2
 8000404:	454c      	cmp	r4, r9
 8000406:	46c6      	mov	lr, r8
 8000408:	464d      	mov	r5, r9
 800040a:	d319      	bcc.n	8000440 <__udivmoddi4+0x290>
 800040c:	d016      	beq.n	800043c <__udivmoddi4+0x28c>
 800040e:	b15e      	cbz	r6, 8000428 <__udivmoddi4+0x278>
 8000410:	ebb3 020e 	subs.w	r2, r3, lr
 8000414:	eb64 0405 	sbc.w	r4, r4, r5
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40ca      	lsrs	r2, r1
 800041e:	ea4c 0202 	orr.w	r2, ip, r2
 8000422:	40cc      	lsrs	r4, r1
 8000424:	e9c6 2400 	strd	r2, r4, [r6]
 8000428:	2100      	movs	r1, #0
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	4631      	mov	r1, r6
 8000430:	4630      	mov	r0, r6
 8000432:	e70e      	b.n	8000252 <__udivmoddi4+0xa2>
 8000434:	46ac      	mov	ip, r5
 8000436:	e6ed      	b.n	8000214 <__udivmoddi4+0x64>
 8000438:	4618      	mov	r0, r3
 800043a:	e701      	b.n	8000240 <__udivmoddi4+0x90>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e6      	bcs.n	800040e <__udivmoddi4+0x25e>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0507 	sbc.w	r5, r9, r7
 8000448:	3801      	subs	r0, #1
 800044a:	e7e0      	b.n	800040e <__udivmoddi4+0x25e>
 800044c:	4628      	mov	r0, r5
 800044e:	e7d3      	b.n	80003f8 <__udivmoddi4+0x248>
 8000450:	4660      	mov	r0, ip
 8000452:	e78f      	b.n	8000374 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7ba      	b.n	80003ce <__udivmoddi4+0x21e>
 8000458:	4661      	mov	r1, ip
 800045a:	e777      	b.n	800034c <__udivmoddi4+0x19c>
 800045c:	4608      	mov	r0, r1
 800045e:	e74b      	b.n	80002f8 <__udivmoddi4+0x148>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	443d      	add	r5, r7
 8000466:	e715      	b.n	8000294 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e726      	b.n	80002bc <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (2, sizeof(uint8_t), &myQueue01_attributes);
 8000478:	4a10      	ldr	r2, [pc, #64]	; (80004bc <MX_FREERTOS_Init+0x48>)
 800047a:	2101      	movs	r1, #1
 800047c:	2002      	movs	r0, #2
 800047e:	f003 ff9b 	bl	80043b8 <osMessageQueueNew>
 8000482:	4603      	mov	r3, r0
 8000484:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <MX_FREERTOS_Init+0x4c>)
 8000486:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000488:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <MX_FREERTOS_Init+0x50>)
 800048a:	2100      	movs	r1, #0
 800048c:	480e      	ldr	r0, [pc, #56]	; (80004c8 <MX_FREERTOS_Init+0x54>)
 800048e:	f003 febf 	bl	8004210 <osThreadNew>
 8000492:	4603      	mov	r3, r0
 8000494:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <MX_FREERTOS_Init+0x58>)
 8000496:	6013      	str	r3, [r2, #0]

  /* creation of LEDTask */
  LEDTaskHandle = osThreadNew(Task_LED, NULL, &LEDTask_attributes);
 8000498:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <MX_FREERTOS_Init+0x5c>)
 800049a:	2100      	movs	r1, #0
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <MX_FREERTOS_Init+0x60>)
 800049e:	f003 feb7 	bl	8004210 <osThreadNew>
 80004a2:	4603      	mov	r3, r0
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <MX_FREERTOS_Init+0x64>)
 80004a6:	6013      	str	r3, [r2, #0]

  /* creation of KEYTack */
  KEYTackHandle = osThreadNew(Tack_key, NULL, &KEYTack_attributes);
 80004a8:	4a0c      	ldr	r2, [pc, #48]	; (80004dc <MX_FREERTOS_Init+0x68>)
 80004aa:	2100      	movs	r1, #0
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <MX_FREERTOS_Init+0x6c>)
 80004ae:	f003 feaf 	bl	8004210 <osThreadNew>
 80004b2:	4603      	mov	r3, r0
 80004b4:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <MX_FREERTOS_Init+0x70>)
 80004b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	080073cc 	.word	0x080073cc
 80004c0:	20001a6c 	.word	0x20001a6c
 80004c4:	08007360 	.word	0x08007360
 80004c8:	080004e9 	.word	0x080004e9
 80004cc:	20001a64 	.word	0x20001a64
 80004d0:	08007384 	.word	0x08007384
 80004d4:	080004f9 	.word	0x080004f9
 80004d8:	20001a60 	.word	0x20001a60
 80004dc:	080073a8 	.word	0x080073a8
 80004e0:	08000595 	.word	0x08000595
 80004e4:	20001a68 	.word	0x20001a68

080004e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f003 ff33 	bl	800435c <osDelay>
 80004f6:	e7fb      	b.n	80004f0 <StartDefaultTask+0x8>

080004f8 <Task_LED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_LED */
void Task_LED(void *argument)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_LED */
  /* Infinite loop */
  for(;;)
  {
	static uint8_t msg = 0;
	if (osMessageQueueGetCount(myQueue01Handle) != 0){
 8000500:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <Task_LED+0x88>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f004 f8c3 	bl	8004690 <osMessageQueueGetCount>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d028      	beq.n	8000562 <Task_LED+0x6a>
		osMessageQueueGet (myQueue01Handle, &msg, NULL, 0);
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <Task_LED+0x88>)
 8000512:	6818      	ldr	r0, [r3, #0]
 8000514:	2300      	movs	r3, #0
 8000516:	2200      	movs	r2, #0
 8000518:	491a      	ldr	r1, [pc, #104]	; (8000584 <Task_LED+0x8c>)
 800051a:	f004 f847 	bl	80045ac <osMessageQueueGet>
		if(msg == 0){
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <Task_LED+0x8c>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d10a      	bne.n	800053c <Task_LED+0x44>
			LED_RED_OFF;
 8000526:	2201      	movs	r2, #1
 8000528:	2120      	movs	r1, #32
 800052a:	4817      	ldr	r0, [pc, #92]	; (8000588 <Task_LED+0x90>)
 800052c:	f000 fe43 	bl	80011b6 <HAL_GPIO_WritePin>
			LED_GREEN_OFF;
 8000530:	2201      	movs	r2, #1
 8000532:	2140      	movs	r1, #64	; 0x40
 8000534:	4814      	ldr	r0, [pc, #80]	; (8000588 <Task_LED+0x90>)
 8000536:	f000 fe3e 	bl	80011b6 <HAL_GPIO_WritePin>
 800053a:	e012      	b.n	8000562 <Task_LED+0x6a>
		}
		else if(msg == 1){
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <Task_LED+0x8c>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d105      	bne.n	8000550 <Task_LED+0x58>
			LED_GREEN_ON;
 8000544:	2200      	movs	r2, #0
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	480f      	ldr	r0, [pc, #60]	; (8000588 <Task_LED+0x90>)
 800054a:	f000 fe34 	bl	80011b6 <HAL_GPIO_WritePin>
 800054e:	e008      	b.n	8000562 <Task_LED+0x6a>
		}
		else if(msg == 2){
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <Task_LED+0x8c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b02      	cmp	r3, #2
 8000556:	d104      	bne.n	8000562 <Task_LED+0x6a>
			LED_RED_ON;
 8000558:	2200      	movs	r2, #0
 800055a:	2120      	movs	r1, #32
 800055c:	480a      	ldr	r0, [pc, #40]	; (8000588 <Task_LED+0x90>)
 800055e:	f000 fe2a 	bl	80011b6 <HAL_GPIO_WritePin>
		}
	}
    uint8_t aTxBuffer[]="123";
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <Task_LED+0x94>)
 8000564:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, aTxBuffer, sizeof(aTxBuffer),0xffff);
 8000566:	f107 010c 	add.w	r1, r7, #12
 800056a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800056e:	2204      	movs	r2, #4
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <Task_LED+0x98>)
 8000572:	f002 fc4d 	bl	8002e10 <HAL_UART_Transmit>
    osDelay(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f003 fef0 	bl	800435c <osDelay>
  {
 800057c:	e7c0      	b.n	8000500 <Task_LED+0x8>
 800057e:	bf00      	nop
 8000580:	20001a6c 	.word	0x20001a6c
 8000584:	20000090 	.word	0x20000090
 8000588:	48000400 	.word	0x48000400
 800058c:	00333231 	.word	0x00333231
 8000590:	20001abc 	.word	0x20001abc

08000594 <Tack_key>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tack_key */
void Tack_key(void *argument)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tack_key */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == KEY2_PRESS){
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	4822      	ldr	r0, [pc, #136]	; (800062c <Tack_key+0x98>)
 80005a2:	f000 fdf1 	bl	8001188 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d13b      	bne.n	8000624 <Tack_key+0x90>
		  osDelay(10);
 80005ac:	200a      	movs	r0, #10
 80005ae:	f003 fed5 	bl	800435c <osDelay>
		  if(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == KEY2_PRESS){
 80005b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b6:	481d      	ldr	r0, [pc, #116]	; (800062c <Tack_key+0x98>)
 80005b8:	f000 fde6 	bl	8001188 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d130      	bne.n	8000624 <Tack_key+0x90>
	//		  LED_GREEN_TOGGLE;
			  uint32_t tickstart = HAL_GetTick();
 80005c2:	f000 fadd 	bl	8000b80 <HAL_GetTick>
 80005c6:	60f8      	str	r0, [r7, #12]
			  uint8_t KEY_State = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	72fb      	strb	r3, [r7, #11]
	//		  if (wait < HAL_MAX_DELAY)
	//		  {
	//		    wait += (uint32_t)(uwTickFreq);
	//		  }

			  while(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == KEY2_PRESS){
 80005cc:	e002      	b.n	80005d4 <Tack_key+0x40>
				  osDelay(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f003 fec4 	bl	800435c <osDelay>
			  while(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == KEY2_PRESS){
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	4814      	ldr	r0, [pc, #80]	; (800062c <Tack_key+0x98>)
 80005da:	f000 fdd5 	bl	8001188 <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0f4      	beq.n	80005ce <Tack_key+0x3a>
			  }
			  if((HAL_GetTick() - tickstart) < KEY2_TIME1){
 80005e4:	f000 facc 	bl	8000b80 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005f2:	d202      	bcs.n	80005fa <Tack_key+0x66>
				  KEY_State = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	72fb      	strb	r3, [r7, #11]
 80005f8:	e00c      	b.n	8000614 <Tack_key+0x80>
			  }
			  else if((HAL_GetTick() - tickstart) < KEY2_TIME2){
 80005fa:	f000 fac1 	bl	8000b80 <HAL_GetTick>
 80005fe:	4602      	mov	r2, r0
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000608:	d202      	bcs.n	8000610 <Tack_key+0x7c>
				  KEY_State = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	72fb      	strb	r3, [r7, #11]
 800060e:	e001      	b.n	8000614 <Tack_key+0x80>
			  }
			  else{
				  KEY_State = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	72fb      	strb	r3, [r7, #11]
			  }
			  osMessageQueuePut(myQueue01Handle, &KEY_State, 0, 10);
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <Tack_key+0x9c>)
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	f107 010b 	add.w	r1, r7, #11
 800061c:	230a      	movs	r3, #10
 800061e:	2200      	movs	r2, #0
 8000620:	f003 ff50 	bl	80044c4 <osMessageQueuePut>
		  }
	  }
	  osDelay(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f003 fe99 	bl	800435c <osDelay>
	  if(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == KEY2_PRESS){
 800062a:	e7b7      	b.n	800059c <Tack_key+0x8>
 800062c:	48000400 	.word	0x48000400
 8000630:	20001a6c 	.word	0x20001a6c

08000634 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800063c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4313      	orrs	r3, r2
 800064a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800064c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4013      	ands	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000658:	68fb      	ldr	r3, [r7, #12]
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	2002      	movs	r0, #2
 800067a:	f7ff ffdb 	bl	8000634 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff ffd8 	bl	8000634 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2160      	movs	r1, #96	; 0x60
 8000688:	480f      	ldr	r0, [pc, #60]	; (80006c8 <MX_GPIO_Init+0x64>)
 800068a:	f000 fd94 	bl	80011b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 800068e:	2360      	movs	r3, #96	; 0x60
 8000690:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	4809      	ldr	r0, [pc, #36]	; (80006c8 <MX_GPIO_Init+0x64>)
 80006a4:	f000 fc10 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <MX_GPIO_Init+0x64>)
 80006bc:	f000 fc04 	bl	8000ec8 <HAL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	48000400 	.word	0x48000400

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d0:	f000 fa24 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d4:	f000 f80c 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d8:	f7ff ffc4 	bl	8000664 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006dc:	f000 f95a 	bl	8000994 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //GPIOB->BRR = (uint32_t)GPIO_PIN_6;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006e0:	f003 fd2e 	bl	8004140 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006e4:	f7ff fec6 	bl	8000474 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006e8:	f003 fd5c 	bl	80041a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <main+0x20>
	...

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09a      	sub	sp, #104	; 0x68
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2248      	movs	r2, #72	; 0x48
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f006 fd28 	bl	8007154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemClock_Config+0xa0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <SystemClock_Config+0xa0>)
 8000720:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemClock_Config+0xa0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000732:	2320      	movs	r3, #32
 8000734:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000736:	2301      	movs	r3, #1
 8000738:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800073a:	2300      	movs	r3, #0
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800073e:	2360      	movs	r3, #96	; 0x60
 8000740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000742:	2300      	movs	r3, #0
 8000744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fff4 	bl	8001738 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000756:	f000 f82f 	bl	80007b8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800075a:	234f      	movs	r3, #79	; 0x4f
 800075c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fb77 	bl	8001e6c <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000784:	f000 f818 	bl	80007b8 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3768      	adds	r7, #104	; 0x68
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	58000400 	.word	0x58000400

08000794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d101      	bne.n	80007aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a6:	f000 f9d9 	bl	8000b5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40014800 	.word	0x40014800

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>

080007c2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	210f      	movs	r1, #15
 80007ca:	f06f 0001 	mvn.w	r0, #1
 80007ce:	f000 fa96 	bl	8000cfe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4013      	ands	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
	...

08000808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800081e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000822:	f7ff ffd8 	bl	80007d6 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000826:	f107 0208 	add.w	r2, r7, #8
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fd17 	bl	8002264 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000836:	f001 fd03 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 800083a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800083c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083e:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <HAL_InitTick+0xbc>)
 8000840:	fba2 2303 	umull	r2, r3, r2, r3
 8000844:	0c9b      	lsrs	r3, r3, #18
 8000846:	3b01      	subs	r3, #1
 8000848:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <HAL_InitTick+0xc0>)
 800084c:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <HAL_InitTick+0xc4>)
 800084e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <HAL_InitTick+0xc0>)
 8000852:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000856:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <HAL_InitTick+0xc0>)
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <HAL_InitTick+0xc0>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_InitTick+0xc0>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800086a:	4817      	ldr	r0, [pc, #92]	; (80008c8 <HAL_InitTick+0xc0>)
 800086c:	f001 fff2 	bl	8002854 <HAL_TIM_Base_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800087a:	2b00      	cmp	r3, #0
 800087c:	d11b      	bne.n	80008b6 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800087e:	4812      	ldr	r0, [pc, #72]	; (80008c8 <HAL_InitTick+0xc0>)
 8000880:	f002 f848 	bl	8002914 <HAL_TIM_Base_Start_IT>
 8000884:	4603      	mov	r3, r0
 8000886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800088a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800088e:	2b00      	cmp	r3, #0
 8000890:	d111      	bne.n	80008b6 <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000892:	201d      	movs	r0, #29
 8000894:	f000 fa4d 	bl	8000d32 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b0f      	cmp	r3, #15
 800089c:	d808      	bhi.n	80008b0 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 800089e:	2200      	movs	r2, #0
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	201d      	movs	r0, #29
 80008a4:	f000 fa2b 	bl	8000cfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a8:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <HAL_InitTick+0xc8>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	e002      	b.n	80008b6 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 80008b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3730      	adds	r7, #48	; 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	431bde83 	.word	0x431bde83
 80008c8:	20001a70 	.word	0x20001a70
 80008cc:	40014800 	.word	0x40014800
 80008d0:	20000004 	.word	0x20000004

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
	...

08000900 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <TIM17_IRQHandler+0x10>)
 8000906:	f002 f851 	bl	80029ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20001a70 	.word	0x20001a70

08000914 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <USART2_IRQHandler+0x10>)
 800091a:	f002 fb0f 	bl	8002f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20001abc 	.word	0x20001abc

08000928 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <LL_AHB2_GRP1_EnableClock>:
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800093c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000940:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4313      	orrs	r3, r2
 800094a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800094c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000950:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000958:	68fb      	ldr	r3, [r7, #12]
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <LL_APB1_GRP1_EnableClock>:
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800096c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000970:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4313      	orrs	r3, r2
 800097a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800097c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000980:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000988:	68fb      	ldr	r3, [r7, #12]
}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <MX_USART2_UART_Init+0x94>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009dc:	4811      	ldr	r0, [pc, #68]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 80009de:	f002 f9c7 	bl	8002d70 <HAL_UART_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009e8:	f7ff fee6 	bl	80007b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ec:	2100      	movs	r1, #0
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 80009f0:	f003 fad7 	bl	8003fa2 <HAL_UARTEx_SetTxFifoThreshold>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009fa:	f7ff fedd 	bl	80007b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4808      	ldr	r0, [pc, #32]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 8000a02:	f003 fb0c 	bl	800401e <HAL_UARTEx_SetRxFifoThreshold>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a0c:	f7ff fed4 	bl	80007b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_USART2_UART_Init+0x90>)
 8000a12:	f003 fa8e 	bl	8003f32 <HAL_UARTEx_DisableFifoMode>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a1c:	f7ff fecc 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20001abc 	.word	0x20001abc
 8000a28:	40004400 	.word	0x40004400

08000a2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b096      	sub	sp, #88	; 0x58
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2238      	movs	r2, #56	; 0x38
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f006 fb81 	bl	8007154 <memset>
  if(uartHandle->Instance==USART2)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a1b      	ldr	r2, [pc, #108]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d12e      	bne.n	8000aba <HAL_UART_MspInit+0x8e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a60:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a64:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 fdd8 	bl	8002620 <HAL_RCCEx_PeriphCLKConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a76:	f7ff fe9f 	bl	80007b8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a7e:	f7ff ff71 	bl	8000964 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff ff56 	bl	8000934 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a88:	230c      	movs	r3, #12
 8000a8a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a98:	2307      	movs	r3, #7
 8000a9a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f000 fa0f 	bl	8000ec8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2105      	movs	r1, #5
 8000aae:	2025      	movs	r0, #37	; 0x25
 8000ab0:	f000 f925 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ab4:	2025      	movs	r0, #37	; 0x25
 8000ab6:	f000 f93c 	bl	8000d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000aba:	bf00      	nop
 8000abc:	3758      	adds	r7, #88	; 0x58
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40004400 	.word	0x40004400

08000ac8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000acc:	f7ff ff2c 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <LoopForever+0xe>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	; (8000b14 <LoopForever+0x16>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000af6:	f006 faf9 	bl	80070ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000afa:	f7ff fde7 	bl	80006cc <main>

08000afe <LoopForever>:

LoopForever:
    b LoopForever
 8000afe:	e7fe      	b.n	8000afe <LoopForever>
  ldr   r0, =_estack
 8000b00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b0c:	0800751c 	.word	0x0800751c
  ldr r2, =_sbss
 8000b10:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b14:	20001b9c 	.word	0x20001b9c

08000b18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f000 f8de 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000b2c:	f001 fb62 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <HAL_Init+0x3c>)
 8000b34:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b36:	200f      	movs	r0, #15
 8000b38:	f7ff fe66 	bl	8000808 <HAL_InitTick>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	e001      	b.n	8000b4c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b48:	f7ff fe3b 	bl	80007c2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000000 	.word	0x20000000

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_IncTick+0x1c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_IncTick+0x20>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a03      	ldr	r2, [pc, #12]	; (8000b7c <HAL_IncTick+0x20>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20001b4c 	.word	0x20001b4c

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b02      	ldr	r3, [pc, #8]	; (8000b90 <HAL_GetTick+0x10>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	20001b4c 	.word	0x20001b4c

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4906      	ldr	r1, [pc, #24]	; (8000c2c <__NVIC_EnableIRQ+0x34>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff4f 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff66 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ffb4 	bl	8000c84 <NVIC_EncodePriority>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff83 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff59 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e04f      	b.n	8000e00 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d008      	beq.n	8000d7e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2204      	movs	r2, #4
 8000d70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e040      	b.n	8000e00 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 020e 	bic.w	r2, r2, #14
 8000d8c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0201 	bic.w	r2, r2, #1
 8000dac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f003 021c 	and.w	r2, r3, #28
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000dca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d00c      	beq.n	8000dee <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000de2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000dec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2201      	movs	r2, #1
 8000df2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d005      	beq.n	8000e2e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2204      	movs	r2, #4
 8000e26:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e047      	b.n	8000ebe <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 020e 	bic.w	r2, r2, #14
 8000e3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0201 	bic.w	r2, r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f003 021c 	and.w	r2, r3, #28
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e70:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e7a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d00c      	beq.n	8000e9e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e9c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	4798      	blx	r3
    }
  }
  return status;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed6:	e140      	b.n	800115a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 8132 	beq.w	8001154 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d005      	beq.n	8000f08 <HAL_GPIO_Init+0x40>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d130      	bne.n	8000f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f3e:	2201      	movs	r2, #1
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	091b      	lsrs	r3, r3, #4
 8000f54:	f003 0201 	and.w	r2, r3, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d017      	beq.n	8000fa6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d123      	bne.n	8000ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	220f      	movs	r2, #15
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	6939      	ldr	r1, [r7, #16]
 8000ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0203 	and.w	r2, r3, #3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 808c 	beq.w	8001154 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800103c:	4a4e      	ldr	r2, [pc, #312]	; (8001178 <HAL_GPIO_Init+0x2b0>)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	2207      	movs	r2, #7
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001066:	d00d      	beq.n	8001084 <HAL_GPIO_Init+0x1bc>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a44      	ldr	r2, [pc, #272]	; (800117c <HAL_GPIO_Init+0x2b4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d007      	beq.n	8001080 <HAL_GPIO_Init+0x1b8>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a43      	ldr	r2, [pc, #268]	; (8001180 <HAL_GPIO_Init+0x2b8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d101      	bne.n	800107c <HAL_GPIO_Init+0x1b4>
 8001078:	2302      	movs	r3, #2
 800107a:	e004      	b.n	8001086 <HAL_GPIO_Init+0x1be>
 800107c:	2307      	movs	r3, #7
 800107e:	e002      	b.n	8001086 <HAL_GPIO_Init+0x1be>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <HAL_GPIO_Init+0x1be>
 8001084:	2300      	movs	r3, #0
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	f002 0203 	and.w	r2, r2, #3
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	4093      	lsls	r3, r2
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001096:	4938      	ldr	r1, [pc, #224]	; (8001178 <HAL_GPIO_Init+0x2b0>)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80010a4:	4b37      	ldr	r3, [pc, #220]	; (8001184 <HAL_GPIO_Init+0x2bc>)
 80010a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010aa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80010ca:	4a2e      	ldr	r2, [pc, #184]	; (8001184 <HAL_GPIO_Init+0x2bc>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80010d2:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <HAL_GPIO_Init+0x2bc>)
 80010d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010d8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80010f8:	4a22      	ldr	r2, [pc, #136]	; (8001184 <HAL_GPIO_Init+0x2bc>)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_GPIO_Init+0x2bc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001124:	4a17      	ldr	r2, [pc, #92]	; (8001184 <HAL_GPIO_Init+0x2bc>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_GPIO_Init+0x2bc>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800114e:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_GPIO_Init+0x2bc>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	f47f aeb7 	bne.w	8000ed8 <HAL_GPIO_Init+0x10>
  }
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40010000 	.word	0x40010000
 800117c:	48000400 	.word	0x48000400
 8001180:	48000800 	.word	0x48000800
 8001184:	58000800 	.word	0x58000800

08001188 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e001      	b.n	80011aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	460b      	mov	r3, r1
 80011c0:	807b      	strh	r3, [r7, #2]
 80011c2:	4613      	mov	r3, r2
 80011c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c6:	787b      	ldrb	r3, [r7, #1]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011cc:	887a      	ldrh	r2, [r7, #2]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d2:	e002      	b.n	80011da <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d4:	887a      	ldrh	r2, [r7, #2]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a03      	ldr	r2, [pc, #12]	; (80011fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	58000400 	.word	0x58000400

08001200 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_PWREx_GetVoltageRange+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	58000400 	.word	0x58000400

08001218 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001228:	d101      	bne.n	800122e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	58000400 	.word	0x58000400

0800123c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800125c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001266:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001286:	d101      	bne.n	800128c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80012b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012e0:	d101      	bne.n	80012e6 <LL_RCC_HSE_IsReady+0x18>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_RCC_HSE_IsReady+0x1a>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800131a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800132c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133a:	d101      	bne.n	8001340 <LL_RCC_HSI_IsReady+0x18>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <LL_RCC_HSI_IsReady+0x1a>
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	061b      	lsls	r3, r3, #24
 8001360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b02      	cmp	r3, #2
 8001384:	d101      	bne.n	800138a <LL_RCC_LSE_IsReady+0x18>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <LL_RCC_LSE_IsReady+0x1a>
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80013b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013c4:	f023 0301 	bic.w	r3, r3, #1
 80013c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80013d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d101      	bne.n	80013ec <LL_RCC_LSI_IsReady+0x18>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <LL_RCC_LSI_IsReady+0x1a>
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80013fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6013      	str	r3, [r2, #0]
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001420:	f023 0301 	bic.w	r3, r3, #1
 8001424:	6013      	str	r3, [r2, #0]
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b02      	cmp	r3, #2
 800143e:	d101      	bne.n	8001444 <LL_RCC_MSI_IsReady+0x16>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <LL_RCC_MSI_IsReady+0x18>
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b08      	cmp	r3, #8
 800145e:	d101      	bne.n	8001464 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001490:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f023 0203 	bic.w	r2, r3, #3
 80014d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4313      	orrs	r3, r2
 80014de:	608b      	str	r3, [r1, #8]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 030c 	and.w	r3, r3, #12
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4313      	orrs	r3, r2
 800151a:	608b      	str	r3, [r1, #8]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800152e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001532:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001536:	f023 020f 	bic.w	r2, r3, #15
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001542:	4313      	orrs	r3, r2
 8001544:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800158a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80015a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80015b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80015d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80015fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160c:	6013      	str	r3, [r2, #0]
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001624:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001628:	6013      	str	r3, [r2, #0]
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001644:	d101      	bne.n	800164a <LL_RCC_PLL_IsReady+0x18>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <LL_RCC_PLL_IsReady+0x1a>
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800169c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f003 0303 	and.w	r3, r3, #3
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80016b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c0:	d101      	bne.n	80016c6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d101      	bne.n	80016ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001706:	d101      	bne.n	800170c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001724:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001728:	d101      	bne.n	800172e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e38a      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174a:	f7ff fece 	bl	80014ea <LL_RCC_GetSysClkSource>
 800174e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001750:	f7ff ffa2 	bl	8001698 <LL_RCC_PLL_GetMainSource>
 8001754:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0320 	and.w	r3, r3, #32
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80c9 	beq.w	80018f6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_RCC_OscConfig+0x3e>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	2b0c      	cmp	r3, #12
 800176e:	d17b      	bne.n	8001868 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d178      	bne.n	8001868 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001776:	f7ff fe5a 	bl	800142e <LL_RCC_MSI_IsReady>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_OscConfig+0x54>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e369      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_RCC_OscConfig+0x72>
 800179e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017a8:	e006      	b.n	80017b8 <HAL_RCC_OscConfig+0x80>
 80017aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d222      	bcs.n	8001802 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fd83 	bl	80022cc <RCC_SetFlashLatencyFromMSIRange>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e347      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fe4e 	bl	800149c <LL_RCC_MSI_SetCalibTrimming>
 8001800:	e021      	b.n	8001846 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fe35 	bl	800149c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	4618      	mov	r0, r3
 8001838:	f000 fd48 	bl	80022cc <RCC_SetFlashLatencyFromMSIRange>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e30c      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001846:	f000 fcd5 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 800184a:	4603      	mov	r3, r0
 800184c:	4ab4      	ldr	r2, [pc, #720]	; (8001b20 <HAL_RCC_OscConfig+0x3e8>)
 800184e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001850:	4bb4      	ldr	r3, [pc, #720]	; (8001b24 <HAL_RCC_OscConfig+0x3ec>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe ffd7 	bl	8000808 <HAL_InitTick>
 800185a:	4603      	mov	r3, r0
 800185c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800185e:	7cfb      	ldrb	r3, [r7, #19]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d047      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001864:	7cfb      	ldrb	r3, [r7, #19]
 8001866:	e2fb      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d02c      	beq.n	80018ca <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001870:	f7ff fdc1 	bl	80013f6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001874:	f7ff f984 	bl	8000b80 <HAL_GetTick>
 8001878:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800187c:	f7ff f980 	bl	8000b80 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e2e8      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 800188e:	f7ff fdce 	bl	800142e <LL_RCC_MSI_IsReady>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f1      	beq.n	800187c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fdea 	bl	800149c <LL_RCC_MSI_SetCalibTrimming>
 80018c8:	e015      	b.n	80018f6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018ca:	f7ff fda2 	bl	8001412 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ce:	f7ff f957 	bl	8000b80 <HAL_GetTick>
 80018d2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d6:	f7ff f953 	bl	8000b80 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e2bb      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80018e8:	f7ff fda1 	bl	800142e <LL_RCC_MSI_IsReady>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f1      	bne.n	80018d6 <HAL_RCC_OscConfig+0x19e>
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018f4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d05f      	beq.n	80019c2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2b08      	cmp	r3, #8
 8001906:	d005      	beq.n	8001914 <HAL_RCC_OscConfig+0x1dc>
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d10d      	bne.n	800192a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d10a      	bne.n	800192a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	f7ff fcdb 	bl	80012ce <LL_RCC_HSE_IsReady>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d050      	beq.n	80019c0 <HAL_RCC_OscConfig+0x288>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d14c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e29a      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d102      	bne.n	8001950 <HAL_RCC_OscConfig+0x218>
 800194a:	f7ff fca4 	bl	8001296 <LL_RCC_HSE_Enable>
 800194e:	e00d      	b.n	800196c <HAL_RCC_OscConfig+0x234>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001958:	d104      	bne.n	8001964 <HAL_RCC_OscConfig+0x22c>
 800195a:	f7ff fc6f 	bl	800123c <LL_RCC_HSE_EnableTcxo>
 800195e:	f7ff fc9a 	bl	8001296 <LL_RCC_HSE_Enable>
 8001962:	e003      	b.n	800196c <HAL_RCC_OscConfig+0x234>
 8001964:	f7ff fca5 	bl	80012b2 <LL_RCC_HSE_Disable>
 8001968:	f7ff fc76 	bl	8001258 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d012      	beq.n	800199a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f904 	bl	8000b80 <HAL_GetTick>
 8001978:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff f900 	bl	8000b80 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e268      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800198e:	f7ff fc9e 	bl	80012ce <LL_RCC_HSE_IsReady>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f1      	beq.n	800197c <HAL_RCC_OscConfig+0x244>
 8001998:	e013      	b.n	80019c2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff f8f1 	bl	8000b80 <HAL_GetTick>
 800199e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a2:	f7ff f8ed 	bl	8000b80 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b64      	cmp	r3, #100	; 0x64
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e255      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80019b4:	f7ff fc8b 	bl	80012ce <LL_RCC_HSE_IsReady>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f1      	bne.n	80019a2 <HAL_RCC_OscConfig+0x26a>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d04b      	beq.n	8001a66 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_OscConfig+0x2a8>
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b0c      	cmp	r3, #12
 80019d8:	d113      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d110      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e0:	f7ff fca2 	bl	8001328 <LL_RCC_HSI_IsReady>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2be>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e234      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fca5 	bl	800134a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a00:	e031      	b.n	8001a66 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d019      	beq.n	8001a3e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a0a:	f7ff fc71 	bl	80012f0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f8b7 	bl	8000b80 <HAL_GetTick>
 8001a12:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff f8b3 	bl	8000b80 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e21b      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a28:	f7ff fc7e 	bl	8001328 <LL_RCC_HSI_IsReady>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f1      	beq.n	8001a16 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fc87 	bl	800134a <LL_RCC_HSI_SetCalibTrimming>
 8001a3c:	e013      	b.n	8001a66 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3e:	f7ff fc65 	bl	800130c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f89d 	bl	8000b80 <HAL_GetTick>
 8001a46:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff f899 	bl	8000b80 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e201      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a5c:	f7ff fc64 	bl	8001328 <LL_RCC_HSI_IsReady>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f1      	bne.n	8001a4a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d06e      	beq.n	8001b50 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d056      	beq.n	8001b28 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8001a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a82:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69da      	ldr	r2, [r3, #28]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d031      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e1da      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ab4:	f7ff fc7e 	bl	80013b4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ab8:	f7ff f862 	bl	8000b80 <HAL_GetTick>
 8001abc:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f85e 	bl	8000b80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b11      	cmp	r3, #17
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e1c6      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ad2:	f7ff fc7f 	bl	80013d4 <LL_RCC_LSI_IsReady>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f1      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae4:	f023 0210 	bic.w	r2, r3, #16
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001af0:	4313      	orrs	r3, r2
 8001af2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af6:	f7ff fc4d 	bl	8001394 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff f841 	bl	8000b80 <HAL_GetTick>
 8001afe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b02:	f7ff f83d 	bl	8000b80 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b11      	cmp	r3, #17
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1a5      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b14:	f7ff fc5e 	bl	80013d4 <LL_RCC_LSI_IsReady>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f1      	beq.n	8001b02 <HAL_RCC_OscConfig+0x3ca>
 8001b1e:	e017      	b.n	8001b50 <HAL_RCC_OscConfig+0x418>
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b28:	f7ff fc44 	bl	80013b4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f828 	bl	8000b80 <HAL_GetTick>
 8001b30:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff f824 	bl	8000b80 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b11      	cmp	r3, #17
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e18c      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b46:	f7ff fc45 	bl	80013d4 <LL_RCC_LSI_IsReady>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f1      	bne.n	8001b34 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80d8 	beq.w	8001d0e <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b5e:	f7ff fb5b 	bl	8001218 <LL_PWR_IsEnabledBkUpAccess>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d113      	bne.n	8001b90 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001b68:	f7ff fb3c 	bl	80011e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f808 	bl	8000b80 <HAL_GetTick>
 8001b70:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b74:	f7ff f804 	bl	8000b80 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e16c      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b86:	f7ff fb47 	bl	8001218 <LL_PWR_IsEnabledBkUpAccess>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f1      	beq.n	8001b74 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d07b      	beq.n	8001c90 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b85      	cmp	r3, #133	; 0x85
 8001b9e:	d003      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d109      	bne.n	8001bbc <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7fe ffe0 	bl	8000b80 <HAL_GetTick>
 8001bc0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7fe ffd2 	bl	8000b80 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e138      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001bee:	f7ff fbc0 	bl	8001372 <LL_RCC_LSE_IsReady>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ef      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b81      	cmp	r3, #129	; 0x81
 8001bfe:	d003      	beq.n	8001c08 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b85      	cmp	r3, #133	; 0x85
 8001c06:	d121      	bne.n	8001c4c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7fe ffba 	bl	8000b80 <HAL_GetTick>
 8001c0c:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7fe ffac 	bl	8000b80 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e112      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0ec      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c4a:	e060      	b.n	8001d0e <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7fe ff98 	bl	8000b80 <HAL_GetTick>
 8001c50:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7fe ff8a 	bl	8000b80 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0f0      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1ec      	bne.n	8001c68 <HAL_RCC_OscConfig+0x530>
 8001c8e:	e03e      	b.n	8001d0e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7fe ff76 	bl	8000b80 <HAL_GetTick>
 8001c94:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f7fe ff68 	bl	8000b80 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e0ce      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ec      	bne.n	8001cac <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7fe ff55 	bl	8000b80 <HAL_GetTick>
 8001cd6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7fe ff47 	bl	8000b80 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0ad      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d04:	f7ff fb35 	bl	8001372 <LL_RCC_LSE_IsReady>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ef      	bne.n	8001cee <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80a3 	beq.w	8001e5e <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d076      	beq.n	8001e0c <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d14b      	bne.n	8001dbe <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d26:	f7ff fc76 	bl	8001616 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7fe ff29 	bl	8000b80 <HAL_GetTick>
 8001d2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7fe ff25 	bl	8000b80 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b0a      	cmp	r3, #10
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e08d      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d44:	f7ff fc75 	bl	8001632 <LL_RCC_PLL_IsReady>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f1      	bne.n	8001d32 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	4b44      	ldr	r3, [pc, #272]	; (8001e68 <HAL_RCC_OscConfig+0x730>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d60:	4311      	orrs	r1, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d66:	0212      	lsls	r2, r2, #8
 8001d68:	4311      	orrs	r1, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d6e:	4311      	orrs	r1, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d74:	4311      	orrs	r1, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	f7ff fc39 	bl	80015fa <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7fe fef2 	bl	8000b80 <HAL_GetTick>
 8001d9c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da0:	f7fe feee 	bl	8000b80 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e056      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001db2:	f7ff fc3e 	bl	8001632 <LL_RCC_PLL_IsReady>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f1      	beq.n	8001da0 <HAL_RCC_OscConfig+0x668>
 8001dbc:	e04f      	b.n	8001e5e <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	f7ff fc2a 	bl	8001616 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dcc:	f023 0303 	bic.w	r3, r3, #3
 8001dd0:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8001dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ddc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de4:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de6:	f7fe fecb 	bl	8000b80 <HAL_GetTick>
 8001dea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7fe fec7 	bl	8000b80 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b0a      	cmp	r3, #10
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e02f      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e00:	f7ff fc17 	bl	8001632 <LL_RCC_PLL_IsReady>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f1      	bne.n	8001dee <HAL_RCC_OscConfig+0x6b6>
 8001e0a:	e028      	b.n	8001e5e <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e023      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f003 0203 	and.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d115      	bne.n	8001e5a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d10e      	bne.n	8001e5a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	11c1808c 	.word	0x11c1808c

08001e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e10f      	b.n	80020a0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b89      	ldr	r3, [pc, #548]	; (80020a8 <HAL_RCC_ClockConfig+0x23c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d91b      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b86      	ldr	r3, [pc, #536]	; (80020a8 <HAL_RCC_ClockConfig+0x23c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0207 	bic.w	r2, r3, #7
 8001e96:	4984      	ldr	r1, [pc, #528]	; (80020a8 <HAL_RCC_ClockConfig+0x23c>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e9e:	f7fe fe6f 	bl	8000b80 <HAL_GetTick>
 8001ea2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ea6:	f7fe fe6b 	bl	8000b80 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0f3      	b.n	80020a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb8:	4b7b      	ldr	r3, [pc, #492]	; (80020a8 <HAL_RCC_ClockConfig+0x23c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d1ef      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d016      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fb12 	bl	8001500 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001edc:	f7fe fe50 	bl	8000b80 <HAL_GetTick>
 8001ee0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ee4:	f7fe fe4c 	bl	8000b80 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0d4      	b.n	80020a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ef6:	f7ff fbda 	bl	80016ae <LL_RCC_IsActiveFlag_HPRE>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f1      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d016      	beq.n	8001f3a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fb08 	bl	8001526 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f16:	f7fe fe33 	bl	8000b80 <HAL_GetTick>
 8001f1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f1e:	f7fe fe2f 	bl	8000b80 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0b7      	b.n	80020a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f30:	f7ff fbce 	bl	80016d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f1      	beq.n	8001f1e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fb01 	bl	8001552 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f50:	f7fe fe16 	bl	8000b80 <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f58:	f7fe fe12 	bl	8000b80 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e09a      	b.n	80020a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f6a:	f7ff fbc3 	bl	80016f4 <LL_RCC_IsActiveFlag_PPRE1>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f1      	beq.n	8001f58 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d017      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff faf6 	bl	8001578 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f8c:	f7fe fdf8 	bl	8000b80 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f94:	f7fe fdf4 	bl	8000b80 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e07c      	b.n	80020a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fa6:	f7ff fbb6 	bl	8001716 <LL_RCC_IsActiveFlag_PPRE2>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f1      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d043      	beq.n	8002044 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001fc4:	f7ff f983 	bl	80012ce <LL_RCC_HSE_IsReady>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d11e      	bne.n	800200c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e066      	b.n	80020a0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d106      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001fda:	f7ff fb2a 	bl	8001632 <LL_RCC_PLL_IsReady>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d113      	bne.n	800200c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e05b      	b.n	80020a0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001ff0:	f7ff fa1d 	bl	800142e <LL_RCC_MSI_IsReady>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d108      	bne.n	800200c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e050      	b.n	80020a0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001ffe:	f7ff f993 	bl	8001328 <LL_RCC_HSI_IsReady>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e049      	b.n	80020a0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fa57 	bl	80014c4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002016:	f7fe fdb3 	bl	8000b80 <HAL_GetTick>
 800201a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201c:	e00a      	b.n	8002034 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201e:	f7fe fdaf 	bl	8000b80 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e035      	b.n	80020a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002034:	f7ff fa59 	bl	80014ea <LL_RCC_GetSysClkSource>
 8002038:	4602      	mov	r2, r0
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	429a      	cmp	r2, r3
 8002042:	d1ec      	bne.n	800201e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_RCC_ClockConfig+0x23c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d21b      	bcs.n	800208a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_RCC_ClockConfig+0x23c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	4913      	ldr	r1, [pc, #76]	; (80020a8 <HAL_RCC_ClockConfig+0x23c>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002062:	f7fe fd8d 	bl	8000b80 <HAL_GetTick>
 8002066:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002068:	e008      	b.n	800207c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800206a:	f7fe fd89 	bl	8000b80 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e011      	b.n	80020a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_RCC_ClockConfig+0x23c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d1ef      	bne.n	800206a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800208a:	f000 f8b3 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 800208e:	4603      	mov	r3, r0
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <HAL_RCC_ClockConfig+0x240>)
 8002092:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_RCC_ClockConfig+0x244>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fbb5 	bl	8000808 <HAL_InitTick>
 800209e:	4603      	mov	r3, r0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	58004000 	.word	0x58004000
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000004 	.word	0x20000004

080020b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c2:	f7ff fa12 	bl	80014ea <LL_RCC_GetSysClkSource>
 80020c6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c8:	f7ff fae6 	bl	8001698 <LL_RCC_PLL_GetMainSource>
 80020cc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x2c>
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d139      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d136      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80020e0:	f7ff f9b5 	bl	800144e <LL_RCC_MSI_IsEnabledRangeSelect>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d115      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x62>
 80020ea:	f7ff f9b0 	bl	800144e <LL_RCC_MSI_IsEnabledRangeSelect>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_GetSysClockFreq+0x4e>
 80020f4:	f7ff f9bb 	bl	800146e <LL_RCC_MSI_GetRange>
 80020f8:	4603      	mov	r3, r0
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	e005      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x5a>
 8002102:	f7ff f9bf 	bl	8001484 <LL_RCC_MSI_GetRangeAfterStandby>
 8002106:	4603      	mov	r3, r0
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	4a36      	ldr	r2, [pc, #216]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002114:	e014      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x8c>
 8002116:	f7ff f99a 	bl	800144e <LL_RCC_MSI_IsEnabledRangeSelect>
 800211a:	4603      	mov	r3, r0
 800211c:	2b01      	cmp	r3, #1
 800211e:	d106      	bne.n	800212e <HAL_RCC_GetSysClockFreq+0x7a>
 8002120:	f7ff f9a5 	bl	800146e <LL_RCC_MSI_GetRange>
 8002124:	4603      	mov	r3, r0
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	e005      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x86>
 800212e:	f7ff f9a9 	bl	8001484 <LL_RCC_MSI_GetRangeAfterStandby>
 8002132:	4603      	mov	r3, r0
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	4a2b      	ldr	r2, [pc, #172]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x134>)
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d115      	bne.n	8002174 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800214c:	e012      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b04      	cmp	r3, #4
 8002152:	d102      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <HAL_RCC_GetSysClockFreq+0x138>)
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	e00c      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d109      	bne.n	8002174 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002160:	f7ff f888 	bl	8001274 <LL_RCC_HSE_IsEnabledDiv2>
 8002164:	4603      	mov	r3, r0
 8002166:	2b01      	cmp	r3, #1
 8002168:	d102      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_RCC_GetSysClockFreq+0x138>)
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e001      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002170:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002172:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002174:	f7ff f9b9 	bl	80014ea <LL_RCC_GetSysClkSource>
 8002178:	4603      	mov	r3, r0
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d12f      	bne.n	80021de <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800217e:	f7ff fa8b 	bl	8001698 <LL_RCC_PLL_GetMainSource>
 8002182:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d003      	beq.n	8002192 <HAL_RCC_GetSysClockFreq+0xde>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d003      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0xe4>
 8002190:	e00d      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_RCC_GetSysClockFreq+0x138>)
 8002194:	60fb      	str	r3, [r7, #12]
        break;
 8002196:	e00d      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002198:	f7ff f86c 	bl	8001274 <LL_RCC_HSE_IsEnabledDiv2>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d102      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_RCC_GetSysClockFreq+0x138>)
 80021a4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80021a6:	e005      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80021aa:	60fb      	str	r3, [r7, #12]
        break;
 80021ac:	e002      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	60fb      	str	r3, [r7, #12]
        break;
 80021b2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80021b4:	f7ff fa4e 	bl	8001654 <LL_RCC_PLL_GetN>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	fb03 f402 	mul.w	r4, r3, r2
 80021c0:	f7ff fa5f 	bl	8001682 <LL_RCC_PLL_GetDivider>
 80021c4:	4603      	mov	r3, r0
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	3301      	adds	r3, #1
 80021ca:	fbb4 f4f3 	udiv	r4, r4, r3
 80021ce:	f7ff fa4d 	bl	800166c <LL_RCC_PLL_GetR>
 80021d2:	4603      	mov	r3, r0
 80021d4:	0f5b      	lsrs	r3, r3, #29
 80021d6:	3301      	adds	r3, #1
 80021d8:	fbb4 f3f3 	udiv	r3, r4, r3
 80021dc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80021de:	697b      	ldr	r3, [r7, #20]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd90      	pop	{r4, r7, pc}
 80021e8:	08007444 	.word	0x08007444
 80021ec:	00f42400 	.word	0x00f42400
 80021f0:	01e84800 	.word	0x01e84800

080021f4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f4:	b598      	push	{r3, r4, r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80021f8:	f7ff ff5c 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80021fc:	4604      	mov	r4, r0
 80021fe:	f7ff f9ce 	bl	800159e <LL_RCC_GetAHBPrescaler>
 8002202:	4603      	mov	r3, r0
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	4a03      	ldr	r2, [pc, #12]	; (8002218 <HAL_RCC_GetHCLKFreq+0x24>)
 800220c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002210:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd98      	pop	{r3, r4, r7, pc}
 8002218:	080073e4 	.word	0x080073e4

0800221c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800221c:	b598      	push	{r3, r4, r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002220:	f7ff ffe8 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 8002224:	4604      	mov	r4, r0
 8002226:	f7ff f9d2 	bl	80015ce <LL_RCC_GetAPB1Prescaler>
 800222a:	4603      	mov	r3, r0
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	4a03      	ldr	r2, [pc, #12]	; (800223c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002234:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd98      	pop	{r3, r4, r7, pc}
 800223c:	08007424 	.word	0x08007424

08002240 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002240:	b598      	push	{r3, r4, r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002244:	f7ff ffd6 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 8002248:	4604      	mov	r4, r0
 800224a:	f7ff f9cb 	bl	80015e4 <LL_RCC_GetAPB2Prescaler>
 800224e:	4603      	mov	r3, r0
 8002250:	0adb      	lsrs	r3, r3, #11
 8002252:	4a03      	ldr	r2, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002258:	fa24 f303 	lsr.w	r3, r4, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd98      	pop	{r3, r4, r7, pc}
 8002260:	08007424 	.word	0x08007424

08002264 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d024      	beq.n	80022be <HAL_RCC_GetClockConfig+0x5a>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d021      	beq.n	80022be <HAL_RCC_GetClockConfig+0x5a>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	224f      	movs	r2, #79	; 0x4f
 800227e:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002280:	f7ff f933 	bl	80014ea <LL_RCC_GetSysClkSource>
 8002284:	4602      	mov	r2, r0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800228a:	f7ff f988 	bl	800159e <LL_RCC_GetAHBPrescaler>
 800228e:	4602      	mov	r2, r0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002294:	f7ff f99b 	bl	80015ce <LL_RCC_GetAPB1Prescaler>
 8002298:	4602      	mov	r2, r0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800229e:	f7ff f9a1 	bl	80015e4 <LL_RCC_GetAPB2Prescaler>
 80022a2:	4602      	mov	r2, r0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	611a      	str	r2, [r3, #16]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = LL_RCC_GetAHB3Prescaler();
 80022a8:	f7ff f984 	bl	80015b4 <LL_RCC_GetAHB3Prescaler>
 80022ac:	4602      	mov	r2, r0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetClockConfig+0x64>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0207 	and.w	r2, r3, #7
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	601a      	str	r2, [r3, #0]
  }
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	58004000 	.word	0x58004000

080022cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	4a10      	ldr	r2, [pc, #64]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80022e4:	f7ff f966 	bl	80015b4 <LL_RCC_GetAHB3Prescaler>
 80022e8:	4603      	mov	r3, r0
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4a09      	ldr	r2, [pc, #36]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0c9c      	lsrs	r4, r3, #18
 8002308:	f7fe ff7a 	bl	8001200 <HAL_PWREx_GetVoltageRange>
 800230c:	4603      	mov	r3, r0
 800230e:	4619      	mov	r1, r3
 8002310:	4620      	mov	r0, r4
 8002312:	f000 f80b 	bl	800232c <RCC_SetFlashLatency>
 8002316:	4603      	mov	r3, r0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	bd90      	pop	{r4, r7, pc}
 8002320:	08007444 	.word	0x08007444
 8002324:	080073e4 	.word	0x080073e4
 8002328:	431bde83 	.word	0x431bde83

0800232c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08e      	sub	sp, #56	; 0x38
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002336:	4a3c      	ldr	r2, [pc, #240]	; (8002428 <RCC_SetFlashLatency+0xfc>)
 8002338:	f107 0320 	add.w	r3, r7, #32
 800233c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002340:	6018      	str	r0, [r3, #0]
 8002342:	3304      	adds	r3, #4
 8002344:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002346:	4a39      	ldr	r2, [pc, #228]	; (800242c <RCC_SetFlashLatency+0x100>)
 8002348:	f107 0318 	add.w	r3, r7, #24
 800234c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002350:	6018      	str	r0, [r3, #0]
 8002352:	3304      	adds	r3, #4
 8002354:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002356:	4a36      	ldr	r2, [pc, #216]	; (8002430 <RCC_SetFlashLatency+0x104>)
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	ca07      	ldmia	r2, {r0, r1, r2}
 800235e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002362:	2300      	movs	r3, #0
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800236c:	d11d      	bne.n	80023aa <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800236e:	2300      	movs	r3, #0
 8002370:	633b      	str	r3, [r7, #48]	; 0x30
 8002372:	e016      	b.n	80023a2 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800237c:	4413      	add	r3, r2
 800237e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4293      	cmp	r3, r2
 8002388:	d808      	bhi.n	800239c <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002392:	4413      	add	r3, r2
 8002394:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800239a:	e023      	b.n	80023e4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	3301      	adds	r3, #1
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d9e5      	bls.n	8002374 <RCC_SetFlashLatency+0x48>
 80023a8:	e01c      	b.n	80023e4 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ae:	e016      	b.n	80023de <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023b8:	4413      	add	r3, r2
 80023ba:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80023be:	461a      	mov	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d808      	bhi.n	80023d8 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80023c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023ce:	4413      	add	r3, r2
 80023d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80023d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023d6:	e005      	b.n	80023e4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	3301      	adds	r3, #1
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d9e5      	bls.n	80023b0 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <RCC_SetFlashLatency+0x108>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 0207 	bic.w	r2, r3, #7
 80023ec:	4911      	ldr	r1, [pc, #68]	; (8002434 <RCC_SetFlashLatency+0x108>)
 80023ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80023f4:	f7fe fbc4 	bl	8000b80 <HAL_GetTick>
 80023f8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023fa:	e008      	b.n	800240e <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023fc:	f7fe fbc0 	bl	8000b80 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e007      	b.n	800241e <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <RCC_SetFlashLatency+0x108>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002418:	429a      	cmp	r2, r3
 800241a:	d1ef      	bne.n	80023fc <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3738      	adds	r7, #56	; 0x38
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	0800732c 	.word	0x0800732c
 800242c:	08007334 	.word	0x08007334
 8002430:	0800733c 	.word	0x0800733c
 8002434:	58004000 	.word	0x58004000

08002438 <LL_RCC_LSE_IsReady>:
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b02      	cmp	r3, #2
 800244a:	d101      	bne.n	8002450 <LL_RCC_LSE_IsReady+0x18>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <LL_RCC_LSE_IsReady+0x1a>
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <LL_RCC_SetUSARTClockSource>:
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002466:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	43db      	mvns	r3, r3
 8002470:	401a      	ands	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	b29b      	uxth	r3, r3
 8002476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <LL_RCC_SetI2SClockSource>:
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800249e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <LL_RCC_SetLPUARTClockSource>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80024bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <LL_RCC_SetI2CClockSource>:
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80024f6:	43db      	mvns	r3, r3
 80024f8:	401a      	ands	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002502:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <LL_RCC_SetLPTIMClockSource>:
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800251e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002522:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	43db      	mvns	r3, r3
 800252e:	401a      	ands	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	041b      	lsls	r3, r3, #16
 8002534:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <LL_RCC_SetRNGClockSource>:
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800255c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <LL_RCC_SetADCClockSource>:
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <LL_RCC_SetRTCClockSource>:
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80025a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <LL_RCC_GetRTCClockSource>:
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80025ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <LL_RCC_ForceBackupDomainReset>:
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr

080025fe <LL_RCC_ReleaseBackupDomainReset>:
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
	...

08002620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800262c:	2300      	movs	r3, #0
 800262e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002630:	2300      	movs	r3, #0
 8002632:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d058      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002640:	f7fe fdd0 	bl	80011e4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002644:	f7fe fa9c 	bl	8000b80 <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800264a:	e009      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fa98 	bl	8000b80 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	74fb      	strb	r3, [r7, #19]
        break;
 800265e:	e006      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002660:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266c:	d1ee      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800266e:	7cfb      	ldrb	r3, [r7, #19]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d13c      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002674:	f7ff ffa7 	bl	80025c6 <LL_RCC_GetRTCClockSource>
 8002678:	4602      	mov	r2, r0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267e:	429a      	cmp	r2, r3
 8002680:	d00f      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002690:	f7ff ffa5 	bl	80025de <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002694:	f7ff ffb3 	bl	80025fe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d014      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fa68 	bl	8000b80 <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80026b2:	e00b      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7fe fa64 	bl	8000b80 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d902      	bls.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	74fb      	strb	r3, [r7, #19]
            break;
 80026ca:	e004      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80026cc:	f7ff feb4 	bl	8002438 <LL_RCC_LSE_IsReady>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d1ee      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80026d6:	7cfb      	ldrb	r3, [r7, #19]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff5b 	bl	800259c <LL_RCC_SetRTCClockSource>
 80026e6:	e004      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	74bb      	strb	r3, [r7, #18]
 80026ec:	e001      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d004      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fea9 	bl	800245a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fe9e 	bl	800245a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fec0 	bl	80024b4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fee6 	bl	8002516 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002752:	2b00      	cmp	r3, #0
 8002754:	d004      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fedb 	bl	8002516 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002768:	2b00      	cmp	r3, #0
 800276a:	d004      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fed0 	bl	8002516 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fea9 	bl	80024de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fe9e 	bl	80024de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fe93 	bl	80024de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d011      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fe5e 	bl	800248a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d6:	d107      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80027d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d010      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fea5 	bl	8002548 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	2b00      	cmp	r3, #0
 8002804:	d107      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002814:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d011      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fea3 	bl	8002572 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002834:	d107      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002846:	7cbb      	ldrb	r3, [r7, #18]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	58000400 	.word	0x58000400

08002854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e049      	b.n	80028fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f841 	bl	8002902 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f000 f9ce 	bl	8002c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b01      	cmp	r3, #1
 8002926:	d001      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e036      	b.n	800299a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <HAL_TIM_Base_Start_IT+0x90>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x44>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002956:	d115      	bne.n	8002984 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_TIM_Base_Start_IT+0x94>)
 8002960:	4013      	ands	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b06      	cmp	r3, #6
 8002968:	d015      	beq.n	8002996 <HAL_TIM_Base_Start_IT+0x82>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002970:	d011      	beq.n	8002996 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0201 	orr.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	e008      	b.n	8002996 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e000      	b.n	8002998 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	40012c00 	.word	0x40012c00
 80029a8:	00010007 	.word	0x00010007

080029ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d122      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d11b      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0202 	mvn.w	r2, #2
 80029d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f904 	bl	8002bfc <HAL_TIM_IC_CaptureCallback>
 80029f4:	e005      	b.n	8002a02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8f7 	bl	8002bea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f906 	bl	8002c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d122      	bne.n	8002a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d11b      	bne.n	8002a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0204 	mvn.w	r2, #4
 8002a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f8da 	bl	8002bfc <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8cd 	bl	8002bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f8dc 	bl	8002c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d122      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d11b      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0208 	mvn.w	r2, #8
 8002a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2204      	movs	r2, #4
 8002a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f8b0 	bl	8002bfc <HAL_TIM_IC_CaptureCallback>
 8002a9c:	e005      	b.n	8002aaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8a3 	bl	8002bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f8b2 	bl	8002c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b10      	cmp	r3, #16
 8002abc:	d122      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b10      	cmp	r3, #16
 8002aca:	d11b      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0210 	mvn.w	r2, #16
 8002ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2208      	movs	r2, #8
 8002ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f886 	bl	8002bfc <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f879 	bl	8002bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f888 	bl	8002c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10e      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0201 	mvn.w	r2, #1
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fd fe32 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b80      	cmp	r3, #128	; 0x80
 8002b3c:	d10e      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	2b80      	cmp	r3, #128	; 0x80
 8002b4a:	d107      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8d7 	bl	8002d0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6a:	d10e      	bne.n	8002b8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d107      	bne.n	8002b8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f8c9 	bl	8002d1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b94:	2b40      	cmp	r3, #64	; 0x40
 8002b96:	d10e      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b40      	cmp	r3, #64	; 0x40
 8002ba4:	d107      	bne.n	8002bb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f835 	bl	8002c20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d10e      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d107      	bne.n	8002be2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f06f 0220 	mvn.w	r2, #32
 8002bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f88b 	bl	8002cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr
	...

08002c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a29      	ldr	r2, [pc, #164]	; (8002cec <TIM_Base_SetConfig+0xb8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d003      	beq.n	8002c54 <TIM_Base_SetConfig+0x20>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c52:	d108      	bne.n	8002c66 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a20      	ldr	r2, [pc, #128]	; (8002cec <TIM_Base_SetConfig+0xb8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00b      	beq.n	8002c86 <TIM_Base_SetConfig+0x52>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c74:	d007      	beq.n	8002c86 <TIM_Base_SetConfig+0x52>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a1d      	ldr	r2, [pc, #116]	; (8002cf0 <TIM_Base_SetConfig+0xbc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <TIM_Base_SetConfig+0x52>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a1c      	ldr	r2, [pc, #112]	; (8002cf4 <TIM_Base_SetConfig+0xc0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d108      	bne.n	8002c98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <TIM_Base_SetConfig+0xb8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d007      	beq.n	8002cd4 <TIM_Base_SetConfig+0xa0>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <TIM_Base_SetConfig+0xbc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <TIM_Base_SetConfig+0xa0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <TIM_Base_SetConfig+0xc0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d103      	bne.n	8002cdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	615a      	str	r2, [r3, #20]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40014400 	.word	0x40014400
 8002cf4:	40014800 	.word	0x40014800

08002cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_GetUSARTClockSource>:
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	401a      	ands	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	4313      	orrs	r3, r2
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <LL_RCC_GetLPUARTClockSource>:
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4013      	ands	r3, r2
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e042      	b.n	8002e08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fd fe49 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2224      	movs	r2, #36	; 0x24
 8002d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fbf8 	bl	80035a8 <UART_SetConfig>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e022      	b.n	8002e08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fe3c 	bl	8003a48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fec2 	bl	8003b8a <UART_CheckIdleState>
 8002e06:	4603      	mov	r3, r0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08a      	sub	sp, #40	; 0x28
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	f040 8083 	bne.w	8002f32 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_UART_Transmit+0x28>
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e07b      	b.n	8002f34 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Transmit+0x3a>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e074      	b.n	8002f34 <HAL_UART_Transmit+0x124>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2221      	movs	r2, #33	; 0x21
 8002e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e62:	f7fd fe8d 	bl	8000b80 <HAL_GetTick>
 8002e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	88fa      	ldrh	r2, [r7, #6]
 8002e74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e80:	d108      	bne.n	8002e94 <HAL_UART_Transmit+0x84>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d104      	bne.n	8002e94 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	e003      	b.n	8002e9c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002ea4:	e02c      	b.n	8002f00 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2200      	movs	r2, #0
 8002eae:	2180      	movs	r1, #128	; 0x80
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 feb5 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e039      	b.n	8002f34 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10b      	bne.n	8002ede <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	3302      	adds	r3, #2
 8002eda:	61bb      	str	r3, [r7, #24]
 8002edc:	e007      	b.n	8002eee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	3301      	adds	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1cc      	bne.n	8002ea6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2200      	movs	r2, #0
 8002f14:	2140      	movs	r1, #64	; 0x40
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fe82 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e006      	b.n	8002f34 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
  }
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b0ba      	sub	sp, #232	; 0xe8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f66:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d11b      	bne.n	8002fb0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d015      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 82d6 	beq.w	8003552 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
      }
      return;
 8002fae:	e2d0      	b.n	8003552 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002fb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 811f 	beq.w	80031f8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002fba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002fbe:	4b8b      	ldr	r3, [pc, #556]	; (80031ec <HAL_UART_IRQHandler+0x2b0>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002fc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002fca:	4b89      	ldr	r3, [pc, #548]	; (80031f0 <HAL_UART_IRQHandler+0x2b4>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8112 	beq.w	80031f8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d011      	beq.n	8003004 <HAL_UART_IRQHandler+0xc8>
 8002fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d011      	beq.n	8003034 <HAL_UART_IRQHandler+0xf8>
 8003010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2202      	movs	r2, #2
 8003022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800302a:	f043 0204 	orr.w	r2, r3, #4
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d011      	beq.n	8003064 <HAL_UART_IRQHandler+0x128>
 8003040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2204      	movs	r2, #4
 8003052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d017      	beq.n	80030a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800307c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003080:	4b5a      	ldr	r3, [pc, #360]	; (80031ec <HAL_UART_IRQHandler+0x2b0>)
 8003082:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2208      	movs	r2, #8
 800308e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003096:	f043 0208 	orr.w	r2, r3, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <HAL_UART_IRQHandler+0x196>
 80030ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00c      	beq.n	80030d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c8:	f043 0220 	orr.w	r2, r3, #32
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 823c 	beq.w	8003556 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80030de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d013      	beq.n	8003112 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80030ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d105      	bne.n	8003102 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80030f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d005      	beq.n	8003136 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800312a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800312e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003132:	2b00      	cmp	r3, #0
 8003134:	d04f      	beq.n	80031d6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fe3a 	bl	8003db0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	d141      	bne.n	80031ce <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3308      	adds	r3, #8
 8003150:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003160:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3308      	adds	r3, #8
 8003172:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003176:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800317a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800318e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1d9      	bne.n	800314a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d013      	beq.n	80031c6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a2:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <HAL_UART_IRQHandler+0x2b8>)
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fe2d 	bl	8000e0a <HAL_DMA_Abort_IT>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d017      	beq.n	80031e6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80031c0:	4610      	mov	r0, r2
 80031c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c4:	e00f      	b.n	80031e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f9d9 	bl	800357e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031cc:	e00b      	b.n	80031e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f9d5 	bl	800357e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	e007      	b.n	80031e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f9d1 	bl	800357e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80031e4:	e1b7      	b.n	8003556 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e6:	bf00      	nop
    return;
 80031e8:	e1b5      	b.n	8003556 <HAL_UART_IRQHandler+0x61a>
 80031ea:	bf00      	nop
 80031ec:	10000001 	.word	0x10000001
 80031f0:	04000120 	.word	0x04000120
 80031f4:	08003e7b 	.word	0x08003e7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 814a 	bne.w	8003496 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8143 	beq.w	8003496 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 813c 	beq.w	8003496 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2210      	movs	r2, #16
 8003224:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	f040 80b5 	bne.w	80033a0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8003242:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8187 	beq.w	800355a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003256:	429a      	cmp	r2, r3
 8003258:	f080 817f 	bcs.w	800355a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003262:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 8086 	bne.w	8003384 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800328c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1da      	bne.n	8003278 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3308      	adds	r3, #8
 80032c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032cc:	e853 3f00 	ldrex	r3, [r3]
 80032d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3308      	adds	r3, #8
 80032e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e1      	bne.n	80032c2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3308      	adds	r3, #8
 8003304:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800330e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3308      	adds	r3, #8
 800331e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003322:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003324:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003328:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e3      	bne.n	80032fe <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003354:	f023 0310 	bic.w	r3, r3, #16
 8003358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003366:	65bb      	str	r3, [r7, #88]	; 0x58
 8003368:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800336c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e4      	bne.n	8003344 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd fce5 	bl	8000d4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003390:	b29b      	uxth	r3, r3
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	b29b      	uxth	r3, r3
 8003396:	4619      	mov	r1, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f8f9 	bl	8003590 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800339e:	e0dc      	b.n	800355a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80ce 	beq.w	800355e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80033c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80c9 	beq.w	800355e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033ee:	647b      	str	r3, [r7, #68]	; 0x44
 80033f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e4      	bne.n	80033cc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3308      	adds	r3, #8
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	623b      	str	r3, [r7, #32]
   return(result);
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3308      	adds	r3, #8
 8003426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800342a:	633a      	str	r2, [r7, #48]	; 0x30
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003432:	e841 2300 	strex	r3, r2, [r1]
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1e1      	bne.n	8003402 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0310 	bic.w	r3, r3, #16
 8003466:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	69b9      	ldr	r1, [r7, #24]
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	617b      	str	r3, [r7, #20]
   return(result);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e4      	bne.n	8003452 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800348c:	4619      	mov	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f87e 	bl	8003590 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003494:	e063      	b.n	800355e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00e      	beq.n	80034c0 <HAL_UART_IRQHandler+0x584>
 80034a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fd1f 	bl	8003efc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034be:	e051      	b.n	8003564 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80034c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d014      	beq.n	80034f6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80034cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80034d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d03a      	beq.n	8003562 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
    }
    return;
 80034f4:	e035      	b.n	8003562 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_UART_IRQHandler+0x5da>
 8003502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fcc9 	bl	8003ea6 <UART_EndTransmit_IT>
    return;
 8003514:	e026      	b.n	8003564 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_UART_IRQHandler+0x5fa>
 8003522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003526:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fcf6 	bl	8003f20 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003534:	e016      	b.n	8003564 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d010      	beq.n	8003564 <HAL_UART_IRQHandler+0x628>
 8003542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003546:	2b00      	cmp	r3, #0
 8003548:	da0c      	bge.n	8003564 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fcdf 	bl	8003f0e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003550:	e008      	b.n	8003564 <HAL_UART_IRQHandler+0x628>
      return;
 8003552:	bf00      	nop
 8003554:	e006      	b.n	8003564 <HAL_UART_IRQHandler+0x628>
    return;
 8003556:	bf00      	nop
 8003558:	e004      	b.n	8003564 <HAL_UART_IRQHandler+0x628>
      return;
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <HAL_UART_IRQHandler+0x628>
      return;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <HAL_UART_IRQHandler+0x628>
    return;
 8003562:	bf00      	nop
  }
}
 8003564:	37e8      	adds	r7, #232	; 0xe8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop

0800356c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr

0800357e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
	...

080035a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a8:	b5b0      	push	{r4, r5, r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4bab      	ldr	r3, [pc, #684]	; (8003880 <UART_SetConfig+0x2d8>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	69f9      	ldr	r1, [r7, #28]
 80035dc:	430b      	orrs	r3, r1
 80035de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4aa0      	ldr	r2, [pc, #640]	; (8003884 <UART_SetConfig+0x2dc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	4313      	orrs	r3, r2
 800360e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800361a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	69f9      	ldr	r1, [r7, #28]
 8003624:	430b      	orrs	r3, r1
 8003626:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	f023 010f 	bic.w	r1, r3, #15
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a91      	ldr	r2, [pc, #580]	; (8003888 <UART_SetConfig+0x2e0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d122      	bne.n	800368e <UART_SetConfig+0xe6>
 8003648:	2003      	movs	r0, #3
 800364a:	f7ff fb70 	bl	8002d2e <LL_RCC_GetUSARTClockSource>
 800364e:	4603      	mov	r3, r0
 8003650:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003654:	2b03      	cmp	r3, #3
 8003656:	d817      	bhi.n	8003688 <UART_SetConfig+0xe0>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <UART_SetConfig+0xb8>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003671 	.word	0x08003671
 8003664:	0800367d 	.word	0x0800367d
 8003668:	08003677 	.word	0x08003677
 800366c:	08003683 	.word	0x08003683
 8003670:	2301      	movs	r3, #1
 8003672:	76fb      	strb	r3, [r7, #27]
 8003674:	e072      	b.n	800375c <UART_SetConfig+0x1b4>
 8003676:	2302      	movs	r3, #2
 8003678:	76fb      	strb	r3, [r7, #27]
 800367a:	e06f      	b.n	800375c <UART_SetConfig+0x1b4>
 800367c:	2304      	movs	r3, #4
 800367e:	76fb      	strb	r3, [r7, #27]
 8003680:	e06c      	b.n	800375c <UART_SetConfig+0x1b4>
 8003682:	2308      	movs	r3, #8
 8003684:	76fb      	strb	r3, [r7, #27]
 8003686:	e069      	b.n	800375c <UART_SetConfig+0x1b4>
 8003688:	2310      	movs	r3, #16
 800368a:	76fb      	strb	r3, [r7, #27]
 800368c:	e066      	b.n	800375c <UART_SetConfig+0x1b4>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a7e      	ldr	r2, [pc, #504]	; (800388c <UART_SetConfig+0x2e4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d134      	bne.n	8003702 <UART_SetConfig+0x15a>
 8003698:	200c      	movs	r0, #12
 800369a:	f7ff fb48 	bl	8002d2e <LL_RCC_GetUSARTClockSource>
 800369e:	4603      	mov	r3, r0
 80036a0:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80036a4:	2b0c      	cmp	r3, #12
 80036a6:	d829      	bhi.n	80036fc <UART_SetConfig+0x154>
 80036a8:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <UART_SetConfig+0x108>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036e5 	.word	0x080036e5
 80036b4:	080036fd 	.word	0x080036fd
 80036b8:	080036fd 	.word	0x080036fd
 80036bc:	080036fd 	.word	0x080036fd
 80036c0:	080036f1 	.word	0x080036f1
 80036c4:	080036fd 	.word	0x080036fd
 80036c8:	080036fd 	.word	0x080036fd
 80036cc:	080036fd 	.word	0x080036fd
 80036d0:	080036eb 	.word	0x080036eb
 80036d4:	080036fd 	.word	0x080036fd
 80036d8:	080036fd 	.word	0x080036fd
 80036dc:	080036fd 	.word	0x080036fd
 80036e0:	080036f7 	.word	0x080036f7
 80036e4:	2300      	movs	r3, #0
 80036e6:	76fb      	strb	r3, [r7, #27]
 80036e8:	e038      	b.n	800375c <UART_SetConfig+0x1b4>
 80036ea:	2302      	movs	r3, #2
 80036ec:	76fb      	strb	r3, [r7, #27]
 80036ee:	e035      	b.n	800375c <UART_SetConfig+0x1b4>
 80036f0:	2304      	movs	r3, #4
 80036f2:	76fb      	strb	r3, [r7, #27]
 80036f4:	e032      	b.n	800375c <UART_SetConfig+0x1b4>
 80036f6:	2308      	movs	r3, #8
 80036f8:	76fb      	strb	r3, [r7, #27]
 80036fa:	e02f      	b.n	800375c <UART_SetConfig+0x1b4>
 80036fc:	2310      	movs	r3, #16
 80036fe:	76fb      	strb	r3, [r7, #27]
 8003700:	e02c      	b.n	800375c <UART_SetConfig+0x1b4>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a5f      	ldr	r2, [pc, #380]	; (8003884 <UART_SetConfig+0x2dc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d125      	bne.n	8003758 <UART_SetConfig+0x1b0>
 800370c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003710:	f7ff fb1f 	bl	8002d52 <LL_RCC_GetLPUARTClockSource>
 8003714:	4603      	mov	r3, r0
 8003716:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800371a:	d017      	beq.n	800374c <UART_SetConfig+0x1a4>
 800371c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003720:	d817      	bhi.n	8003752 <UART_SetConfig+0x1aa>
 8003722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003726:	d00b      	beq.n	8003740 <UART_SetConfig+0x198>
 8003728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372c:	d811      	bhi.n	8003752 <UART_SetConfig+0x1aa>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <UART_SetConfig+0x192>
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d006      	beq.n	8003746 <UART_SetConfig+0x19e>
 8003738:	e00b      	b.n	8003752 <UART_SetConfig+0x1aa>
 800373a:	2300      	movs	r3, #0
 800373c:	76fb      	strb	r3, [r7, #27]
 800373e:	e00d      	b.n	800375c <UART_SetConfig+0x1b4>
 8003740:	2302      	movs	r3, #2
 8003742:	76fb      	strb	r3, [r7, #27]
 8003744:	e00a      	b.n	800375c <UART_SetConfig+0x1b4>
 8003746:	2304      	movs	r3, #4
 8003748:	76fb      	strb	r3, [r7, #27]
 800374a:	e007      	b.n	800375c <UART_SetConfig+0x1b4>
 800374c:	2308      	movs	r3, #8
 800374e:	76fb      	strb	r3, [r7, #27]
 8003750:	e004      	b.n	800375c <UART_SetConfig+0x1b4>
 8003752:	2310      	movs	r3, #16
 8003754:	76fb      	strb	r3, [r7, #27]
 8003756:	e001      	b.n	800375c <UART_SetConfig+0x1b4>
 8003758:	2310      	movs	r3, #16
 800375a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a48      	ldr	r2, [pc, #288]	; (8003884 <UART_SetConfig+0x2dc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	f040 8098 	bne.w	8003898 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003768:	7efb      	ldrb	r3, [r7, #27]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d823      	bhi.n	80037b6 <UART_SetConfig+0x20e>
 800376e:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <UART_SetConfig+0x1cc>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	08003799 	.word	0x08003799
 8003778:	080037b7 	.word	0x080037b7
 800377c:	080037a1 	.word	0x080037a1
 8003780:	080037b7 	.word	0x080037b7
 8003784:	080037a7 	.word	0x080037a7
 8003788:	080037b7 	.word	0x080037b7
 800378c:	080037b7 	.word	0x080037b7
 8003790:	080037b7 	.word	0x080037b7
 8003794:	080037af 	.word	0x080037af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003798:	f7fe fd40 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 800379c:	6178      	str	r0, [r7, #20]
        break;
 800379e:	e00f      	b.n	80037c0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a0:	4b3b      	ldr	r3, [pc, #236]	; (8003890 <UART_SetConfig+0x2e8>)
 80037a2:	617b      	str	r3, [r7, #20]
        break;
 80037a4:	e00c      	b.n	80037c0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a6:	f7fe fc85 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80037aa:	6178      	str	r0, [r7, #20]
        break;
 80037ac:	e008      	b.n	80037c0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037b2:	617b      	str	r3, [r7, #20]
        break;
 80037b4:	e004      	b.n	80037c0 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	76bb      	strb	r3, [r7, #26]
        break;
 80037be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8128 	beq.w	8003a18 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	4a31      	ldr	r2, [pc, #196]	; (8003894 <UART_SetConfig+0x2ec>)
 80037ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037d2:	461a      	mov	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037da:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d305      	bcc.n	80037f8 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d902      	bls.n	80037fe <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	76bb      	strb	r3, [r7, #26]
 80037fc:	e10c      	b.n	8003a18 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	4618      	mov	r0, r3
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	4a22      	ldr	r2, [pc, #136]	; (8003894 <UART_SetConfig+0x2ec>)
 800380c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003810:	b29a      	uxth	r2, r3
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	f7fc fcb3 	bl	8000180 <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4610      	mov	r0, r2
 8003820:	4619      	mov	r1, r3
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	020b      	lsls	r3, r1, #8
 800382c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003830:	0202      	lsls	r2, r0, #8
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	6849      	ldr	r1, [r1, #4]
 8003836:	0849      	lsrs	r1, r1, #1
 8003838:	4608      	mov	r0, r1
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	1814      	adds	r4, r2, r0
 8003840:	eb43 0501 	adc.w	r5, r3, r1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	461a      	mov	r2, r3
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	4620      	mov	r0, r4
 8003850:	4629      	mov	r1, r5
 8003852:	f7fc fc95 	bl	8000180 <__aeabi_uldivmod>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4613      	mov	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003864:	d308      	bcc.n	8003878 <UART_SetConfig+0x2d0>
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386c:	d204      	bcs.n	8003878 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	e0cf      	b.n	8003a18 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	76bb      	strb	r3, [r7, #26]
 800387c:	e0cc      	b.n	8003a18 <UART_SetConfig+0x470>
 800387e:	bf00      	nop
 8003880:	cfff69f3 	.word	0xcfff69f3
 8003884:	40008000 	.word	0x40008000
 8003888:	40013800 	.word	0x40013800
 800388c:	40004400 	.word	0x40004400
 8003890:	00f42400 	.word	0x00f42400
 8003894:	08007484 	.word	0x08007484
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a0:	d165      	bne.n	800396e <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 80038a2:	7efb      	ldrb	r3, [r7, #27]
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d828      	bhi.n	80038fa <UART_SetConfig+0x352>
 80038a8:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <UART_SetConfig+0x308>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038d5 	.word	0x080038d5
 80038b4:	080038dd 	.word	0x080038dd
 80038b8:	080038e5 	.word	0x080038e5
 80038bc:	080038fb 	.word	0x080038fb
 80038c0:	080038eb 	.word	0x080038eb
 80038c4:	080038fb 	.word	0x080038fb
 80038c8:	080038fb 	.word	0x080038fb
 80038cc:	080038fb 	.word	0x080038fb
 80038d0:	080038f3 	.word	0x080038f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d4:	f7fe fca2 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 80038d8:	6178      	str	r0, [r7, #20]
        break;
 80038da:	e013      	b.n	8003904 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038dc:	f7fe fcb0 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 80038e0:	6178      	str	r0, [r7, #20]
        break;
 80038e2:	e00f      	b.n	8003904 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e4:	4b56      	ldr	r3, [pc, #344]	; (8003a40 <UART_SetConfig+0x498>)
 80038e6:	617b      	str	r3, [r7, #20]
        break;
 80038e8:	e00c      	b.n	8003904 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ea:	f7fe fbe3 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80038ee:	6178      	str	r0, [r7, #20]
        break;
 80038f0:	e008      	b.n	8003904 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038f6:	617b      	str	r3, [r7, #20]
        break;
 80038f8:	e004      	b.n	8003904 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	76bb      	strb	r3, [r7, #26]
        break;
 8003902:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8086 	beq.w	8003a18 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	4a4c      	ldr	r2, [pc, #304]	; (8003a44 <UART_SetConfig+0x49c>)
 8003912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003916:	461a      	mov	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	fbb3 f3f2 	udiv	r3, r3, r2
 800391e:	005a      	lsls	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	441a      	add	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	b29b      	uxth	r3, r3
 8003932:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b0f      	cmp	r3, #15
 8003938:	d916      	bls.n	8003968 <UART_SetConfig+0x3c0>
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003940:	d212      	bcs.n	8003968 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	b29b      	uxth	r3, r3
 8003946:	f023 030f 	bic.w	r3, r3, #15
 800394a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	b29b      	uxth	r3, r3
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	b29a      	uxth	r2, r3
 8003958:	89fb      	ldrh	r3, [r7, #14]
 800395a:	4313      	orrs	r3, r2
 800395c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	89fa      	ldrh	r2, [r7, #14]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	e057      	b.n	8003a18 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	76bb      	strb	r3, [r7, #26]
 800396c:	e054      	b.n	8003a18 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 800396e:	7efb      	ldrb	r3, [r7, #27]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d828      	bhi.n	80039c6 <UART_SetConfig+0x41e>
 8003974:	a201      	add	r2, pc, #4	; (adr r2, 800397c <UART_SetConfig+0x3d4>)
 8003976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397a:	bf00      	nop
 800397c:	080039a1 	.word	0x080039a1
 8003980:	080039a9 	.word	0x080039a9
 8003984:	080039b1 	.word	0x080039b1
 8003988:	080039c7 	.word	0x080039c7
 800398c:	080039b7 	.word	0x080039b7
 8003990:	080039c7 	.word	0x080039c7
 8003994:	080039c7 	.word	0x080039c7
 8003998:	080039c7 	.word	0x080039c7
 800399c:	080039bf 	.word	0x080039bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a0:	f7fe fc3c 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 80039a4:	6178      	str	r0, [r7, #20]
        break;
 80039a6:	e013      	b.n	80039d0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039a8:	f7fe fc4a 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 80039ac:	6178      	str	r0, [r7, #20]
        break;
 80039ae:	e00f      	b.n	80039d0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039b0:	4b23      	ldr	r3, [pc, #140]	; (8003a40 <UART_SetConfig+0x498>)
 80039b2:	617b      	str	r3, [r7, #20]
        break;
 80039b4:	e00c      	b.n	80039d0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b6:	f7fe fb7d 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80039ba:	6178      	str	r0, [r7, #20]
        break;
 80039bc:	e008      	b.n	80039d0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c2:	617b      	str	r3, [r7, #20]
        break;
 80039c4:	e004      	b.n	80039d0 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	76bb      	strb	r3, [r7, #26]
        break;
 80039ce:	bf00      	nop
    }

    if (pclk != 0U)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d020      	beq.n	8003a18 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <UART_SetConfig+0x49c>)
 80039dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039e0:	461a      	mov	r2, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2b0f      	cmp	r3, #15
 8003a00:	d908      	bls.n	8003a14 <UART_SetConfig+0x46c>
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a08:	d204      	bcs.n	8003a14 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	e001      	b.n	8003a18 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003a34:	7ebb      	ldrb	r3, [r7, #26]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	08007484 	.word	0x08007484

08003a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01a      	beq.n	8003b5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b46:	d10a      	bne.n	8003b5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]
  }
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af02      	add	r7, sp, #8
 8003b90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b9a:	f7fc fff1 	bl	8000b80 <HAL_GetTick>
 8003b9e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d10e      	bne.n	8003bcc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f82f 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e025      	b.n	8003c18 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d10e      	bne.n	8003bf8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f819 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e00f      	b.n	8003c18 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b09c      	sub	sp, #112	; 0x70
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c30:	e0a9      	b.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	f000 80a5 	beq.w	8003d86 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3c:	f7fc ffa0 	bl	8000b80 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d140      	bne.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c66:	667b      	str	r3, [r7, #100]	; 0x64
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c72:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e6      	bne.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c96:	f023 0301 	bic.w	r3, r3, #1
 8003c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ca4:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ca6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cac:	e841 2300 	strex	r3, r2, [r1]
 8003cb0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e5      	bne.n	8003c84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e069      	b.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d051      	beq.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf0:	d149      	bne.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cfa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e6      	bne.n	8003cfc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3308      	adds	r3, #8
 8003d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d4e:	623a      	str	r2, [r7, #32]
 8003d50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	69f9      	ldr	r1, [r7, #28]
 8003d54:	6a3a      	ldr	r2, [r7, #32]
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e5      	bne.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e010      	b.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	f43f af46 	beq.w	8003c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3770      	adds	r7, #112	; 0x70
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b095      	sub	sp, #84	; 0x54
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8003dd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e6      	bne.n	8003db8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3308      	adds	r3, #8
 8003df0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e3      	bne.n	8003dea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d118      	bne.n	8003e5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f023 0310 	bic.w	r3, r3, #16
 8003e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6979      	ldr	r1, [r7, #20]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	613b      	str	r3, [r7, #16]
   return(result);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e6      	bne.n	8003e2a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003e70:	bf00      	nop
 8003e72:	3754      	adds	r7, #84	; 0x54
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff fb70 	bl	800357e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b088      	sub	sp, #32
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	6979      	ldr	r1, [r7, #20]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e6      	bne.n	8003eae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fb3c 	bl	800356c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef4:	bf00      	nop
 8003ef6:	3720      	adds	r7, #32
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr

08003f32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_UARTEx_DisableFifoMode+0x16>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e027      	b.n	8003f98 <HAL_UARTEx_DisableFifoMode+0x66>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2224      	movs	r2, #36	; 0x24
 8003f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003f76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e02d      	b.n	8004016 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2224      	movs	r2, #36	; 0x24
 8003fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f850 	bl	800409c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004032:	2302      	movs	r3, #2
 8004034:	e02d      	b.n	8004092 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2224      	movs	r2, #36	; 0x24
 8004042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f812 	bl	800409c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d108      	bne.n	80040be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80040bc:	e031      	b.n	8004122 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80040be:	2308      	movs	r3, #8
 80040c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80040c2:	2308      	movs	r3, #8
 80040c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	0e5b      	lsrs	r3, r3, #25
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	0f5b      	lsrs	r3, r3, #29
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040e6:	7bbb      	ldrb	r3, [r7, #14]
 80040e8:	7b3a      	ldrb	r2, [r7, #12]
 80040ea:	4910      	ldr	r1, [pc, #64]	; (800412c <UARTEx_SetNbDataToProcess+0x90>)
 80040ec:	5c8a      	ldrb	r2, [r1, r2]
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80040f2:	7b3a      	ldrb	r2, [r7, #12]
 80040f4:	490e      	ldr	r1, [pc, #56]	; (8004130 <UARTEx_SetNbDataToProcess+0x94>)
 80040f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	7b7a      	ldrb	r2, [r7, #13]
 8004108:	4908      	ldr	r1, [pc, #32]	; (800412c <UARTEx_SetNbDataToProcess+0x90>)
 800410a:	5c8a      	ldrb	r2, [r1, r2]
 800410c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004110:	7b7a      	ldrb	r2, [r7, #13]
 8004112:	4907      	ldr	r1, [pc, #28]	; (8004130 <UARTEx_SetNbDataToProcess+0x94>)
 8004114:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004116:	fb93 f3f2 	sdiv	r3, r3, r2
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	0800749c 	.word	0x0800749c
 8004130:	080074a4 	.word	0x080074a4

08004134 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004146:	f3ef 8305 	mrs	r3, IPSR
 800414a:	60bb      	str	r3, [r7, #8]
  return(result);
 800414c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10f      	bne.n	8004172 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004152:	f3ef 8310 	mrs	r3, PRIMASK
 8004156:	607b      	str	r3, [r7, #4]
  return(result);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d105      	bne.n	800416a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800415e:	f3ef 8311 	mrs	r3, BASEPRI
 8004162:	603b      	str	r3, [r7, #0]
  return(result);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <osKernelInitialize+0x3a>
 800416a:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <osKernelInitialize+0x60>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d103      	bne.n	800417a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004172:	f06f 0305 	mvn.w	r3, #5
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e00c      	b.n	8004194 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <osKernelInitialize+0x60>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <osKernelInitialize+0x60>)
 8004184:	2201      	movs	r2, #1
 8004186:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e002      	b.n	8004194 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800418e:	f04f 33ff 	mov.w	r3, #4294967295
 8004192:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004194:	68fb      	ldr	r3, [r7, #12]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	20000094 	.word	0x20000094

080041a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041aa:	f3ef 8305 	mrs	r3, IPSR
 80041ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80041b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ba:	607b      	str	r3, [r7, #4]
  return(result);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d105      	bne.n	80041ce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041c2:	f3ef 8311 	mrs	r3, BASEPRI
 80041c6:	603b      	str	r3, [r7, #0]
  return(result);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <osKernelStart+0x3a>
 80041ce:	4b0f      	ldr	r3, [pc, #60]	; (800420c <osKernelStart+0x68>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d103      	bne.n	80041de <osKernelStart+0x3a>
    stat = osErrorISR;
 80041d6:	f06f 0305 	mvn.w	r3, #5
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	e010      	b.n	8004200 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <osKernelStart+0x68>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d109      	bne.n	80041fa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80041e6:	f7ff ffa5 	bl	8004134 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <osKernelStart+0x68>)
 80041ec:	2202      	movs	r2, #2
 80041ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80041f0:	f001 fb30 	bl	8005854 <vTaskStartScheduler>
      stat = osOK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e002      	b.n	8004200 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
 80041fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004200:	68fb      	ldr	r3, [r7, #12]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000094 	.word	0x20000094

08004210 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b090      	sub	sp, #64	; 0x40
 8004214:	af04      	add	r7, sp, #16
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004220:	f3ef 8305 	mrs	r3, IPSR
 8004224:	61fb      	str	r3, [r7, #28]
  return(result);
 8004226:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004228:	2b00      	cmp	r3, #0
 800422a:	f040 808f 	bne.w	800434c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422e:	f3ef 8310 	mrs	r3, PRIMASK
 8004232:	61bb      	str	r3, [r7, #24]
  return(result);
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d105      	bne.n	8004246 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800423a:	f3ef 8311 	mrs	r3, BASEPRI
 800423e:	617b      	str	r3, [r7, #20]
  return(result);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <osThreadNew+0x3e>
 8004246:	4b44      	ldr	r3, [pc, #272]	; (8004358 <osThreadNew+0x148>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d07e      	beq.n	800434c <osThreadNew+0x13c>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d07b      	beq.n	800434c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004258:	2318      	movs	r3, #24
 800425a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004260:	f04f 33ff 	mov.w	r3, #4294967295
 8004264:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d045      	beq.n	80042f8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <osThreadNew+0x6a>
        name = attr->name;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <osThreadNew+0x90>
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	2b38      	cmp	r3, #56	; 0x38
 8004292:	d805      	bhi.n	80042a0 <osThreadNew+0x90>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <osThreadNew+0x94>
        return (NULL);
 80042a0:	2300      	movs	r3, #0
 80042a2:	e054      	b.n	800434e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	089b      	lsrs	r3, r3, #2
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00e      	beq.n	80042da <osThreadNew+0xca>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2bbb      	cmp	r3, #187	; 0xbb
 80042c2:	d90a      	bls.n	80042da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d006      	beq.n	80042da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <osThreadNew+0xca>
        mem = 1;
 80042d4:	2301      	movs	r3, #1
 80042d6:	623b      	str	r3, [r7, #32]
 80042d8:	e010      	b.n	80042fc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10c      	bne.n	80042fc <osThreadNew+0xec>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d108      	bne.n	80042fc <osThreadNew+0xec>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d104      	bne.n	80042fc <osThreadNew+0xec>
          mem = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	623b      	str	r3, [r7, #32]
 80042f6:	e001      	b.n	80042fc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d110      	bne.n	8004324 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800430a:	9202      	str	r2, [sp, #8]
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f001 f8af 	bl	800547c <xTaskCreateStatic>
 800431e:	4603      	mov	r3, r0
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	e013      	b.n	800434c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d110      	bne.n	800434c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	b29a      	uxth	r2, r3
 800432e:	f107 0310 	add.w	r3, r7, #16
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f001 f8fa 	bl	8005536 <xTaskCreate>
 8004342:	4603      	mov	r3, r0
 8004344:	2b01      	cmp	r3, #1
 8004346:	d001      	beq.n	800434c <osThreadNew+0x13c>
          hTask = NULL;
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800434c:	693b      	ldr	r3, [r7, #16]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3730      	adds	r7, #48	; 0x30
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000094 	.word	0x20000094

0800435c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004364:	f3ef 8305 	mrs	r3, IPSR
 8004368:	613b      	str	r3, [r7, #16]
  return(result);
 800436a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10f      	bne.n	8004390 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004370:	f3ef 8310 	mrs	r3, PRIMASK
 8004374:	60fb      	str	r3, [r7, #12]
  return(result);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800437c:	f3ef 8311 	mrs	r3, BASEPRI
 8004380:	60bb      	str	r3, [r7, #8]
  return(result);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <osDelay+0x3c>
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <osDelay+0x58>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d103      	bne.n	8004398 <osDelay+0x3c>
    stat = osErrorISR;
 8004390:	f06f 0305 	mvn.w	r3, #5
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e007      	b.n	80043a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f001 fa22 	bl	80057ec <vTaskDelay>
    }
  }

  return (stat);
 80043a8:	697b      	ldr	r3, [r7, #20]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000094 	.word	0x20000094

080043b8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08c      	sub	sp, #48	; 0x30
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043c8:	f3ef 8305 	mrs	r3, IPSR
 80043cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80043ce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d16f      	bne.n	80044b4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d4:	f3ef 8310 	mrs	r3, PRIMASK
 80043d8:	617b      	str	r3, [r7, #20]
  return(result);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043e0:	f3ef 8311 	mrs	r3, BASEPRI
 80043e4:	613b      	str	r3, [r7, #16]
  return(result);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <osMessageQueueNew+0x3c>
 80043ec:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <osMessageQueueNew+0x108>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d05f      	beq.n	80044b4 <osMessageQueueNew+0xfc>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d05c      	beq.n	80044b4 <osMessageQueueNew+0xfc>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d059      	beq.n	80044b4 <osMessageQueueNew+0xfc>
    mem = -1;
 8004400:	f04f 33ff 	mov.w	r3, #4294967295
 8004404:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d029      	beq.n	8004460 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d012      	beq.n	800443a <osMessageQueueNew+0x82>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	2b4f      	cmp	r3, #79	; 0x4f
 800441a:	d90e      	bls.n	800443a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	429a      	cmp	r2, r3
 8004432:	d302      	bcc.n	800443a <osMessageQueueNew+0x82>
        mem = 1;
 8004434:	2301      	movs	r3, #1
 8004436:	623b      	str	r3, [r7, #32]
 8004438:	e014      	b.n	8004464 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d110      	bne.n	8004464 <osMessageQueueNew+0xac>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10c      	bne.n	8004464 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800444e:	2b00      	cmp	r3, #0
 8004450:	d108      	bne.n	8004464 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <osMessageQueueNew+0xac>
          mem = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	e001      	b.n	8004464 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10b      	bne.n	8004482 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2100      	movs	r1, #0
 8004474:	9100      	str	r1, [sp, #0]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 fa85 	bl	8004988 <xQueueGenericCreateStatic>
 800447e:	6278      	str	r0, [r7, #36]	; 0x24
 8004480:	e008      	b.n	8004494 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004488:	2200      	movs	r2, #0
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 faf3 	bl	8004a78 <xQueueGenericCreate>
 8004492:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00c      	beq.n	80044b4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	e001      	b.n	80044ac <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80044ac:	69f9      	ldr	r1, [r7, #28]
 80044ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044b0:	f000 ff88 	bl	80053c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3728      	adds	r7, #40	; 0x28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000094 	.word	0x20000094

080044c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80044d8:	2300      	movs	r3, #0
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044dc:	f3ef 8305 	mrs	r3, IPSR
 80044e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80044e2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10f      	bne.n	8004508 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e8:	f3ef 8310 	mrs	r3, PRIMASK
 80044ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d105      	bne.n	8004500 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044f4:	f3ef 8311 	mrs	r3, BASEPRI
 80044f8:	617b      	str	r3, [r7, #20]
  return(result);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d02c      	beq.n	800455a <osMessageQueuePut+0x96>
 8004500:	4b28      	ldr	r3, [pc, #160]	; (80045a4 <osMessageQueuePut+0xe0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d128      	bne.n	800455a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <osMessageQueuePut+0x56>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <osMessageQueuePut+0x56>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800451a:	f06f 0303 	mvn.w	r3, #3
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004520:	e039      	b.n	8004596 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004522:	2300      	movs	r3, #0
 8004524:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004526:	f107 0210 	add.w	r2, r7, #16
 800452a:	2300      	movs	r3, #0
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	6a38      	ldr	r0, [r7, #32]
 8004530:	f000 fc04 	bl	8004d3c <xQueueGenericSendFromISR>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d003      	beq.n	8004542 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800453a:	f06f 0302 	mvn.w	r3, #2
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004540:	e029      	b.n	8004596 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d026      	beq.n	8004596 <osMessageQueuePut+0xd2>
 8004548:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <osMessageQueuePut+0xe4>)
 800454a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004558:	e01d      	b.n	8004596 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <osMessageQueuePut+0xa2>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004566:	f06f 0303 	mvn.w	r3, #3
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
 800456c:	e014      	b.n	8004598 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800456e:	2300      	movs	r3, #0
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	6a38      	ldr	r0, [r7, #32]
 8004576:	f000 fae3 	bl	8004b40 <xQueueGenericSend>
 800457a:	4603      	mov	r3, r0
 800457c:	2b01      	cmp	r3, #1
 800457e:	d00b      	beq.n	8004598 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004586:	f06f 0301 	mvn.w	r3, #1
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	e004      	b.n	8004598 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800458e:	f06f 0302 	mvn.w	r3, #2
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
 8004594:	e000      	b.n	8004598 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004596:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800459a:	4618      	mov	r0, r3
 800459c:	3728      	adds	r7, #40	; 0x28
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000094 	.word	0x20000094
 80045a8:	e000ed04 	.word	0xe000ed04

080045ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80045be:	2300      	movs	r3, #0
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045c2:	f3ef 8305 	mrs	r3, IPSR
 80045c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80045c8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ce:	f3ef 8310 	mrs	r3, PRIMASK
 80045d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045da:	f3ef 8311 	mrs	r3, BASEPRI
 80045de:	617b      	str	r3, [r7, #20]
  return(result);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d02c      	beq.n	8004640 <osMessageQueueGet+0x94>
 80045e6:	4b28      	ldr	r3, [pc, #160]	; (8004688 <osMessageQueueGet+0xdc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d128      	bne.n	8004640 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <osMessageQueueGet+0x54>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <osMessageQueueGet+0x54>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004600:	f06f 0303 	mvn.w	r3, #3
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004606:	e038      	b.n	800467a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004608:	2300      	movs	r3, #0
 800460a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800460c:	f107 0310 	add.w	r3, r7, #16
 8004610:	461a      	mov	r2, r3
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	6a38      	ldr	r0, [r7, #32]
 8004616:	f000 fd09 	bl	800502c <xQueueReceiveFromISR>
 800461a:	4603      	mov	r3, r0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d003      	beq.n	8004628 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004620:	f06f 0302 	mvn.w	r3, #2
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004626:	e028      	b.n	800467a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d025      	beq.n	800467a <osMessageQueueGet+0xce>
 800462e:	4b17      	ldr	r3, [pc, #92]	; (800468c <osMessageQueueGet+0xe0>)
 8004630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800463e:	e01c      	b.n	800467a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <osMessageQueueGet+0xa0>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800464c:	f06f 0303 	mvn.w	r3, #3
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
 8004652:	e013      	b.n	800467c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	68b9      	ldr	r1, [r7, #8]
 8004658:	6a38      	ldr	r0, [r7, #32]
 800465a:	f000 fc07 	bl	8004e6c <xQueueReceive>
 800465e:	4603      	mov	r3, r0
 8004660:	2b01      	cmp	r3, #1
 8004662:	d00b      	beq.n	800467c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800466a:	f06f 0301 	mvn.w	r3, #1
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	e004      	b.n	800467c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004672:	f06f 0302 	mvn.w	r3, #2
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
 8004678:	e000      	b.n	800467c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800467a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800467e:	4618      	mov	r0, r3
 8004680:	3728      	adds	r7, #40	; 0x28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000094 	.word	0x20000094
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d102      	bne.n	80046a8 <osMessageQueueGetCount+0x18>
    count = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e01e      	b.n	80046e6 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a8:	f3ef 8305 	mrs	r3, IPSR
 80046ac:	617b      	str	r3, [r7, #20]
  return(result);
 80046ae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10f      	bne.n	80046d4 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b4:	f3ef 8310 	mrs	r3, PRIMASK
 80046b8:	613b      	str	r3, [r7, #16]
  return(result);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d105      	bne.n	80046cc <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046c0:	f3ef 8311 	mrs	r3, BASEPRI
 80046c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d008      	beq.n	80046de <osMessageQueueGetCount+0x4e>
 80046cc:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <osMessageQueueGetCount+0x60>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d104      	bne.n	80046de <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80046d4:	69b8      	ldr	r0, [r7, #24]
 80046d6:	f000 fd47 	bl	8005168 <uxQueueMessagesWaitingFromISR>
 80046da:	61f8      	str	r0, [r7, #28]
 80046dc:	e003      	b.n	80046e6 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80046de:	69b8      	ldr	r0, [r7, #24]
 80046e0:	f000 fd24 	bl	800512c <uxQueueMessagesWaiting>
 80046e4:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80046e6:	69fb      	ldr	r3, [r7, #28]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000094 	.word	0x20000094

080046f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a06      	ldr	r2, [pc, #24]	; (800471c <vApplicationGetIdleTaskMemory+0x28>)
 8004704:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4a05      	ldr	r2, [pc, #20]	; (8004720 <vApplicationGetIdleTaskMemory+0x2c>)
 800470a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2280      	movs	r2, #128	; 0x80
 8004710:	601a      	str	r2, [r3, #0]
}
 8004712:	bf00      	nop
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	20000098 	.word	0x20000098
 8004720:	20000154 	.word	0x20000154

08004724 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a07      	ldr	r2, [pc, #28]	; (8004750 <vApplicationGetTimerTaskMemory+0x2c>)
 8004734:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4a06      	ldr	r2, [pc, #24]	; (8004754 <vApplicationGetTimerTaskMemory+0x30>)
 800473a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004742:	601a      	str	r2, [r3, #0]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	20000354 	.word	0x20000354
 8004754:	20000410 	.word	0x20000410

08004758 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f103 0208 	add.w	r2, r3, #8
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f04f 32ff 	mov.w	r2, #4294967295
 8004770:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f103 0208 	add.w	r2, r3, #8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f103 0208 	add.w	r2, r3, #8
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr

080047ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	601a      	str	r2, [r3, #0]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d103      	bne.n	8004814 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e00c      	b.n	800482e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3308      	adds	r3, #8
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e002      	b.n	8004822 <vListInsert+0x2e>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	d2f6      	bcs.n	800481c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]
}
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr

08004864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6892      	ldr	r2, [r2, #8]
 800487a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6852      	ldr	r2, [r2, #4]
 8004884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d103      	bne.n	8004898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	1e5a      	subs	r2, r3, #1
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr
	...

080048b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048e2:	f002 f92b 	bl	8006b3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ee:	68f9      	ldr	r1, [r7, #12]
 80048f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048f2:	fb01 f303 	mul.w	r3, r1, r3
 80048f6:	441a      	add	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	3b01      	subs	r3, #1
 8004914:	68f9      	ldr	r1, [r7, #12]
 8004916:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004918:	fb01 f303 	mul.w	r3, r1, r3
 800491c:	441a      	add	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	22ff      	movs	r2, #255	; 0xff
 8004926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	22ff      	movs	r2, #255	; 0xff
 800492e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d114      	bne.n	8004962 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01a      	beq.n	8004976 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3310      	adds	r3, #16
 8004944:	4618      	mov	r0, r3
 8004946:	f001 fa1d 	bl	8005d84 <xTaskRemoveFromEventList>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d012      	beq.n	8004976 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <xQueueGenericReset+0xcc>)
 8004952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	e009      	b.n	8004976 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3310      	adds	r3, #16
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fef6 	bl	8004758 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3324      	adds	r3, #36	; 0x24
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fef1 	bl	8004758 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004976:	f002 f911 	bl	8006b9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800497a:	2301      	movs	r3, #1
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	e000ed04 	.word	0xe000ed04

08004988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08e      	sub	sp, #56	; 0x38
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049ca:	bf00      	nop
 80049cc:	e7fe      	b.n	80049cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <xQueueGenericCreateStatic+0x52>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <xQueueGenericCreateStatic+0x56>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <xQueueGenericCreateStatic+0x58>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	623b      	str	r3, [r7, #32]
}
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <xQueueGenericCreateStatic+0x7e>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <xQueueGenericCreateStatic+0x82>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <xQueueGenericCreateStatic+0x84>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	61fb      	str	r3, [r7, #28]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a26:	2350      	movs	r3, #80	; 0x50
 8004a28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b50      	cmp	r3, #80	; 0x50
 8004a2e:	d00a      	beq.n	8004a46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	61bb      	str	r3, [r7, #24]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f845 	bl	8004af8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3730      	adds	r7, #48	; 0x30
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	4613      	mov	r3, r2
 8004a84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	613b      	str	r3, [r7, #16]
}
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	e004      	b.n	8004ab8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	3350      	adds	r3, #80	; 0x50
 8004abc:	4618      	mov	r0, r3
 8004abe:	f002 f93d 	bl	8006d3c <pvPortMalloc>
 8004ac2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d011      	beq.n	8004aee <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	3350      	adds	r3, #80	; 0x50
 8004ad2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004adc:	79fa      	ldrb	r2, [r7, #7]
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f805 	bl	8004af8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004aee:	69bb      	ldr	r3, [r7, #24]
	}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d103      	bne.n	8004b14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e002      	b.n	8004b1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b26:	2101      	movs	r1, #1
 8004b28:	69b8      	ldr	r0, [r7, #24]
 8004b2a:	f7ff fec5 	bl	80048b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08e      	sub	sp, #56	; 0x38
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <xQueueGenericSend+0x32>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <xQueueGenericSend+0x40>
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <xQueueGenericSend+0x44>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <xQueueGenericSend+0x46>
 8004b84:	2300      	movs	r3, #0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <xQueueGenericSend+0x60>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d103      	bne.n	8004bae <xQueueGenericSend+0x6e>
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <xQueueGenericSend+0x72>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <xQueueGenericSend+0x74>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <xQueueGenericSend+0x8e>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	623b      	str	r3, [r7, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bce:	f001 fa9b 	bl	8006108 <xTaskGetSchedulerState>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <xQueueGenericSend+0x9e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <xQueueGenericSend+0xa2>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <xQueueGenericSend+0xa4>
 8004be2:	2300      	movs	r3, #0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <xQueueGenericSend+0xbe>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	61fb      	str	r3, [r7, #28]
}
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bfe:	f001 ff9d 	bl	8006b3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <xQueueGenericSend+0xd4>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d129      	bne.n	8004c68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c1a:	f000 fac2 	bl	80051a2 <prvCopyDataToQueue>
 8004c1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d010      	beq.n	8004c4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	3324      	adds	r3, #36	; 0x24
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 f8a9 	bl	8005d84 <xTaskRemoveFromEventList>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d013      	beq.n	8004c60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c38:	4b3f      	ldr	r3, [pc, #252]	; (8004d38 <xQueueGenericSend+0x1f8>)
 8004c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	e00a      	b.n	8004c60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c50:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <xQueueGenericSend+0x1f8>)
 8004c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c60:	f001 ff9c 	bl	8006b9c <vPortExitCritical>
				return pdPASS;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e063      	b.n	8004d30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d103      	bne.n	8004c76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c6e:	f001 ff95 	bl	8006b9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e05c      	b.n	8004d30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c7c:	f107 0314 	add.w	r3, r7, #20
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 f8e3 	bl	8005e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c86:	2301      	movs	r3, #1
 8004c88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c8a:	f001 ff87 	bl	8006b9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c8e:	f000 fe51 	bl	8005934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c92:	f001 ff53 	bl	8006b3c <vPortEnterCritical>
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c9c:	b25b      	sxtb	r3, r3
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d103      	bne.n	8004cac <xQueueGenericSend+0x16c>
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cb2:	b25b      	sxtb	r3, r3
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d103      	bne.n	8004cc2 <xQueueGenericSend+0x182>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cc2:	f001 ff6b 	bl	8006b9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cc6:	1d3a      	adds	r2, r7, #4
 8004cc8:	f107 0314 	add.w	r3, r7, #20
 8004ccc:	4611      	mov	r1, r2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 f8d2 	bl	8005e78 <xTaskCheckForTimeOut>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d124      	bne.n	8004d24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cdc:	f000 fb59 	bl	8005392 <prvIsQueueFull>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d018      	beq.n	8004d18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	3310      	adds	r3, #16
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	4611      	mov	r1, r2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fff8 	bl	8005ce4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cf6:	f000 fae4 	bl	80052c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cfa:	f000 fe29 	bl	8005950 <xTaskResumeAll>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f47f af7c 	bne.w	8004bfe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <xQueueGenericSend+0x1f8>)
 8004d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	e772      	b.n	8004bfe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d1a:	f000 fad2 	bl	80052c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d1e:	f000 fe17 	bl	8005950 <xTaskResumeAll>
 8004d22:	e76c      	b.n	8004bfe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d26:	f000 facc 	bl	80052c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d2a:	f000 fe11 	bl	8005950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3738      	adds	r7, #56	; 0x38
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08e      	sub	sp, #56	; 0x38
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d103      	bne.n	8004d78 <xQueueGenericSendFromISR+0x3c>
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <xQueueGenericSendFromISR+0x40>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <xQueueGenericSendFromISR+0x42>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	623b      	str	r3, [r7, #32]
}
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d103      	bne.n	8004da6 <xQueueGenericSendFromISR+0x6a>
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <xQueueGenericSendFromISR+0x6e>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <xQueueGenericSendFromISR+0x70>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	61fb      	str	r3, [r7, #28]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dc6:	f001 ff7b 	bl	8006cc0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dca:	f3ef 8211 	mrs	r2, BASEPRI
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	61ba      	str	r2, [r7, #24]
 8004de0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004de2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d302      	bcc.n	8004df8 <xQueueGenericSendFromISR+0xbc>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d12c      	bne.n	8004e52 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e08:	f000 f9cb 	bl	80051a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e0c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d112      	bne.n	8004e3c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	3324      	adds	r3, #36	; 0x24
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 ffae 	bl	8005d84 <xTaskRemoveFromEventList>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00e      	beq.n	8004e4c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00b      	beq.n	8004e4c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e007      	b.n	8004e4c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e40:	3301      	adds	r3, #1
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	b25a      	sxtb	r2, r3
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004e50:	e001      	b.n	8004e56 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3738      	adds	r7, #56	; 0x38
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08c      	sub	sp, #48	; 0x30
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10a      	bne.n	8004e9c <xQueueReceive+0x30>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	623b      	str	r3, [r7, #32]
}
 8004e98:	bf00      	nop
 8004e9a:	e7fe      	b.n	8004e9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d103      	bne.n	8004eaa <xQueueReceive+0x3e>
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <xQueueReceive+0x42>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <xQueueReceive+0x44>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10a      	bne.n	8004eca <xQueueReceive+0x5e>
	__asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	61fb      	str	r3, [r7, #28]
}
 8004ec6:	bf00      	nop
 8004ec8:	e7fe      	b.n	8004ec8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eca:	f001 f91d 	bl	8006108 <xTaskGetSchedulerState>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <xQueueReceive+0x6e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <xQueueReceive+0x72>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <xQueueReceive+0x74>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <xQueueReceive+0x8e>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	61bb      	str	r3, [r7, #24]
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004efa:	f001 fe1f 	bl	8006b3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01f      	beq.n	8004f4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0e:	f000 f9b2 	bl	8005276 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	1e5a      	subs	r2, r3, #1
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00f      	beq.n	8004f42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	3310      	adds	r3, #16
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 ff2c 	bl	8005d84 <xTaskRemoveFromEventList>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d007      	beq.n	8004f42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f32:	4b3d      	ldr	r3, [pc, #244]	; (8005028 <xQueueReceive+0x1bc>)
 8004f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f42:	f001 fe2b 	bl	8006b9c <vPortExitCritical>
				return pdPASS;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e069      	b.n	800501e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d103      	bne.n	8004f58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f50:	f001 fe24 	bl	8006b9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e062      	b.n	800501e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f5e:	f107 0310 	add.w	r3, r7, #16
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 ff72 	bl	8005e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f6c:	f001 fe16 	bl	8006b9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f70:	f000 fce0 	bl	8005934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f74:	f001 fde2 	bl	8006b3c <vPortEnterCritical>
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f7e:	b25b      	sxtb	r3, r3
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d103      	bne.n	8004f8e <xQueueReceive+0x122>
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f94:	b25b      	sxtb	r3, r3
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d103      	bne.n	8004fa4 <xQueueReceive+0x138>
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa4:	f001 fdfa 	bl	8006b9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fa8:	1d3a      	adds	r2, r7, #4
 8004faa:	f107 0310 	add.w	r3, r7, #16
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 ff61 	bl	8005e78 <xTaskCheckForTimeOut>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d123      	bne.n	8005004 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fbe:	f000 f9d2 	bl	8005366 <prvIsQueueEmpty>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d017      	beq.n	8004ff8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	3324      	adds	r3, #36	; 0x24
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	4611      	mov	r1, r2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fe87 	bl	8005ce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fd8:	f000 f973 	bl	80052c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fdc:	f000 fcb8 	bl	8005950 <xTaskResumeAll>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d189      	bne.n	8004efa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004fe6:	4b10      	ldr	r3, [pc, #64]	; (8005028 <xQueueReceive+0x1bc>)
 8004fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	e780      	b.n	8004efa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffa:	f000 f962 	bl	80052c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ffe:	f000 fca7 	bl	8005950 <xTaskResumeAll>
 8005002:	e77a      	b.n	8004efa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005006:	f000 f95c 	bl	80052c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800500a:	f000 fca1 	bl	8005950 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800500e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005010:	f000 f9a9 	bl	8005366 <prvIsQueueEmpty>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	f43f af6f 	beq.w	8004efa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800501c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800501e:	4618      	mov	r0, r3
 8005020:	3730      	adds	r7, #48	; 0x30
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	e000ed04 	.word	0xe000ed04

0800502c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08e      	sub	sp, #56	; 0x38
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	623b      	str	r3, [r7, #32]
}
 8005054:	bf00      	nop
 8005056:	e7fe      	b.n	8005056 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d103      	bne.n	8005066 <xQueueReceiveFromISR+0x3a>
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <xQueueReceiveFromISR+0x3e>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <xQueueReceiveFromISR+0x40>
 800506a:	2300      	movs	r3, #0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	61fb      	str	r3, [r7, #28]
}
 8005082:	bf00      	nop
 8005084:	e7fe      	b.n	8005084 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005086:	f001 fe1b 	bl	8006cc0 <vPortValidateInterruptPriority>
	__asm volatile
 800508a:	f3ef 8211 	mrs	r2, BASEPRI
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	61ba      	str	r2, [r7, #24]
 80050a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80050a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d02f      	beq.n	8005112 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050c0:	f000 f8d9 	bl	8005276 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	1e5a      	subs	r2, r3, #1
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80050cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d112      	bne.n	80050fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d016      	beq.n	800510c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	3310      	adds	r3, #16
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fe4e 	bl	8005d84 <xTaskRemoveFromEventList>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00e      	beq.n	800510c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00b      	beq.n	800510c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	e007      	b.n	800510c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80050fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005100:	3301      	adds	r3, #1
 8005102:	b2db      	uxtb	r3, r3
 8005104:	b25a      	sxtb	r2, r3
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800510c:	2301      	movs	r3, #1
 800510e:	637b      	str	r3, [r7, #52]	; 0x34
 8005110:	e001      	b.n	8005116 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005112:	2300      	movs	r3, #0
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	613b      	str	r3, [r7, #16]
	__asm volatile
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f383 8811 	msr	BASEPRI, r3
}
 8005120:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005124:	4618      	mov	r0, r3
 8005126:	3738      	adds	r7, #56	; 0x38
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	60bb      	str	r3, [r7, #8]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005150:	f001 fcf4 	bl	8006b3c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800515a:	f001 fd1f 	bl	8006b9c <vPortExitCritical>

	return uxReturn;
 800515e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	60fb      	str	r3, [r7, #12]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005196:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005198:	4618      	mov	r0, r3
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr

080051a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b086      	sub	sp, #24
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10d      	bne.n	80051dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d14d      	bne.n	8005264 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 ffb9 	bl	8006144 <xTaskPriorityDisinherit>
 80051d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	609a      	str	r2, [r3, #8]
 80051da:	e043      	b.n	8005264 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d119      	bne.n	8005216 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6858      	ldr	r0, [r3, #4]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	461a      	mov	r2, r3
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	f001 ffa3 	bl	8007138 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	441a      	add	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	d32b      	bcc.n	8005264 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	605a      	str	r2, [r3, #4]
 8005214:	e026      	b.n	8005264 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68d8      	ldr	r0, [r3, #12]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	461a      	mov	r2, r3
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	f001 ff89 	bl	8007138 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	425b      	negs	r3, r3
 8005230:	441a      	add	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d207      	bcs.n	8005252 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	425b      	negs	r3, r3
 800524c:	441a      	add	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d105      	bne.n	8005264 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	3b01      	subs	r3, #1
 8005262:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800526c:	697b      	ldr	r3, [r7, #20]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d018      	beq.n	80052ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	441a      	add	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d303      	bcc.n	80052aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68d9      	ldr	r1, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	461a      	mov	r2, r3
 80052b4:	6838      	ldr	r0, [r7, #0]
 80052b6:	f001 ff3f 	bl	8007138 <memcpy>
	}
}
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052ca:	f001 fc37 	bl	8006b3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052d6:	e011      	b.n	80052fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d012      	beq.n	8005306 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3324      	adds	r3, #36	; 0x24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fd4d 	bl	8005d84 <xTaskRemoveFromEventList>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052f0:	f000 fe24 	bl	8005f3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005300:	2b00      	cmp	r3, #0
 8005302:	dce9      	bgt.n	80052d8 <prvUnlockQueue+0x16>
 8005304:	e000      	b.n	8005308 <prvUnlockQueue+0x46>
					break;
 8005306:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	22ff      	movs	r2, #255	; 0xff
 800530c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005310:	f001 fc44 	bl	8006b9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005314:	f001 fc12 	bl	8006b3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800531e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005320:	e011      	b.n	8005346 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d012      	beq.n	8005350 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3310      	adds	r3, #16
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fd28 	bl	8005d84 <xTaskRemoveFromEventList>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800533a:	f000 fdff 	bl	8005f3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800533e:	7bbb      	ldrb	r3, [r7, #14]
 8005340:	3b01      	subs	r3, #1
 8005342:	b2db      	uxtb	r3, r3
 8005344:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800534a:	2b00      	cmp	r3, #0
 800534c:	dce9      	bgt.n	8005322 <prvUnlockQueue+0x60>
 800534e:	e000      	b.n	8005352 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005350:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	22ff      	movs	r2, #255	; 0xff
 8005356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800535a:	f001 fc1f 	bl	8006b9c <vPortExitCritical>
}
 800535e:	bf00      	nop
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800536e:	f001 fbe5 	bl	8006b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800537a:	2301      	movs	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e001      	b.n	8005384 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005384:	f001 fc0a 	bl	8006b9c <vPortExitCritical>

	return xReturn;
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800539a:	f001 fbcf 	bl	8006b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d102      	bne.n	80053b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	e001      	b.n	80053b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053b4:	f001 fbf2 	bl	8006b9c <vPortExitCritical>

	return xReturn;
 80053b8:	68fb      	ldr	r3, [r7, #12]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	e014      	b.n	80053fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053d4:	4a0e      	ldr	r2, [pc, #56]	; (8005410 <vQueueAddToRegistry+0x4c>)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10b      	bne.n	80053f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053e0:	490b      	ldr	r1, [pc, #44]	; (8005410 <vQueueAddToRegistry+0x4c>)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053ea:	4a09      	ldr	r2, [pc, #36]	; (8005410 <vQueueAddToRegistry+0x4c>)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4413      	add	r3, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053f6:	e006      	b.n	8005406 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3301      	adds	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b07      	cmp	r3, #7
 8005402:	d9e7      	bls.n	80053d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr
 8005410:	20001b50 	.word	0x20001b50

08005414 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005424:	f001 fb8a 	bl	8006b3c <vPortEnterCritical>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800542e:	b25b      	sxtb	r3, r3
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d103      	bne.n	800543e <vQueueWaitForMessageRestricted+0x2a>
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005444:	b25b      	sxtb	r3, r3
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	d103      	bne.n	8005454 <vQueueWaitForMessageRestricted+0x40>
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005454:	f001 fba2 	bl	8006b9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	3324      	adds	r3, #36	; 0x24
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fc5f 	bl	8005d2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800546e:	6978      	ldr	r0, [r7, #20]
 8005470:	f7ff ff27 	bl	80052c2 <prvUnlockQueue>
	}
 8005474:	bf00      	nop
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08e      	sub	sp, #56	; 0x38
 8005480:	af04      	add	r7, sp, #16
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	623b      	str	r3, [r7, #32]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	61fb      	str	r3, [r7, #28]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054c2:	23bc      	movs	r3, #188	; 0xbc
 80054c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2bbc      	cmp	r3, #188	; 0xbc
 80054ca:	d00a      	beq.n	80054e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	61bb      	str	r3, [r7, #24]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01e      	beq.n	8005528 <xTaskCreateStatic+0xac>
 80054ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01b      	beq.n	8005528 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005502:	2300      	movs	r3, #0
 8005504:	9303      	str	r3, [sp, #12]
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	9302      	str	r3, [sp, #8]
 800550a:	f107 0314 	add.w	r3, r7, #20
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f850 	bl	80055c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005522:	f000 f8f3 	bl	800570c <prvAddNewTaskToReadyList>
 8005526:	e001      	b.n	800552c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800552c:	697b      	ldr	r3, [r7, #20]
	}
 800552e:	4618      	mov	r0, r3
 8005530:	3728      	adds	r7, #40	; 0x28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005536:	b580      	push	{r7, lr}
 8005538:	b08c      	sub	sp, #48	; 0x30
 800553a:	af04      	add	r7, sp, #16
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	4613      	mov	r3, r2
 8005544:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4618      	mov	r0, r3
 800554c:	f001 fbf6 	bl	8006d3c <pvPortMalloc>
 8005550:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00e      	beq.n	8005576 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005558:	20bc      	movs	r0, #188	; 0xbc
 800555a:	f001 fbef 	bl	8006d3c <pvPortMalloc>
 800555e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	631a      	str	r2, [r3, #48]	; 0x30
 800556c:	e005      	b.n	800557a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800556e:	6978      	ldr	r0, [r7, #20]
 8005570:	f001 fca8 	bl	8006ec4 <vPortFree>
 8005574:	e001      	b.n	800557a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d017      	beq.n	80055b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005588:	88fa      	ldrh	r2, [r7, #6]
 800558a:	2300      	movs	r3, #0
 800558c:	9303      	str	r3, [sp, #12]
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	9302      	str	r3, [sp, #8]
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f80e 	bl	80055c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055a4:	69f8      	ldr	r0, [r7, #28]
 80055a6:	f000 f8b1 	bl	800570c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055aa:	2301      	movs	r3, #1
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	e002      	b.n	80055b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055b0:	f04f 33ff 	mov.w	r3, #4294967295
 80055b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055b6:	69bb      	ldr	r3, [r7, #24]
	}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3720      	adds	r7, #32
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	461a      	mov	r2, r3
 80055d8:	21a5      	movs	r1, #165	; 0xa5
 80055da:	f001 fdbb 	bl	8007154 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055e8:	3b01      	subs	r3, #1
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f023 0307 	bic.w	r3, r3, #7
 80055f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	617b      	str	r3, [r7, #20]
}
 8005614:	bf00      	nop
 8005616:	e7fe      	b.n	8005616 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01f      	beq.n	800565e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
 8005622:	e012      	b.n	800564a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	7819      	ldrb	r1, [r3, #0]
 800562c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	4413      	add	r3, r2
 8005632:	3334      	adds	r3, #52	; 0x34
 8005634:	460a      	mov	r2, r1
 8005636:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d006      	beq.n	8005652 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	3301      	adds	r3, #1
 8005648:	61fb      	str	r3, [r7, #28]
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	2b0f      	cmp	r3, #15
 800564e:	d9e9      	bls.n	8005624 <prvInitialiseNewTask+0x64>
 8005650:	e000      	b.n	8005654 <prvInitialiseNewTask+0x94>
			{
				break;
 8005652:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800565c:	e003      	b.n	8005666 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	2b37      	cmp	r3, #55	; 0x37
 800566a:	d901      	bls.n	8005670 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800566c:	2337      	movs	r3, #55	; 0x37
 800566e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005674:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800567a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	2200      	movs	r2, #0
 8005680:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	3304      	adds	r3, #4
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff f885 	bl	8004796 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	3318      	adds	r3, #24
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff f880 	bl	8004796 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800569a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	3354      	adds	r3, #84	; 0x54
 80056c0:	2260      	movs	r2, #96	; 0x60
 80056c2:	2100      	movs	r1, #0
 80056c4:	4618      	mov	r0, r3
 80056c6:	f001 fd45 	bl	8007154 <memset>
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	4a0c      	ldr	r2, [pc, #48]	; (8005700 <prvInitialiseNewTask+0x140>)
 80056ce:	659a      	str	r2, [r3, #88]	; 0x58
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	4a0c      	ldr	r2, [pc, #48]	; (8005704 <prvInitialiseNewTask+0x144>)
 80056d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	4a0b      	ldr	r2, [pc, #44]	; (8005708 <prvInitialiseNewTask+0x148>)
 80056da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	69b8      	ldr	r0, [r7, #24]
 80056e2:	f001 f93d 	bl	8006960 <pxPortInitialiseStack>
 80056e6:	4602      	mov	r2, r0
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056f8:	bf00      	nop
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	080074cc 	.word	0x080074cc
 8005704:	080074ec 	.word	0x080074ec
 8005708:	080074ac 	.word	0x080074ac

0800570c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005714:	f001 fa12 	bl	8006b3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005718:	4b2d      	ldr	r3, [pc, #180]	; (80057d0 <prvAddNewTaskToReadyList+0xc4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3301      	adds	r3, #1
 800571e:	4a2c      	ldr	r2, [pc, #176]	; (80057d0 <prvAddNewTaskToReadyList+0xc4>)
 8005720:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005722:	4b2c      	ldr	r3, [pc, #176]	; (80057d4 <prvAddNewTaskToReadyList+0xc8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800572a:	4a2a      	ldr	r2, [pc, #168]	; (80057d4 <prvAddNewTaskToReadyList+0xc8>)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005730:	4b27      	ldr	r3, [pc, #156]	; (80057d0 <prvAddNewTaskToReadyList+0xc4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d110      	bne.n	800575a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005738:	f000 fc24 	bl	8005f84 <prvInitialiseTaskLists>
 800573c:	e00d      	b.n	800575a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800573e:	4b26      	ldr	r3, [pc, #152]	; (80057d8 <prvAddNewTaskToReadyList+0xcc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005746:	4b23      	ldr	r3, [pc, #140]	; (80057d4 <prvAddNewTaskToReadyList+0xc8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	429a      	cmp	r2, r3
 8005752:	d802      	bhi.n	800575a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005754:	4a1f      	ldr	r2, [pc, #124]	; (80057d4 <prvAddNewTaskToReadyList+0xc8>)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800575a:	4b20      	ldr	r3, [pc, #128]	; (80057dc <prvAddNewTaskToReadyList+0xd0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3301      	adds	r3, #1
 8005760:	4a1e      	ldr	r2, [pc, #120]	; (80057dc <prvAddNewTaskToReadyList+0xd0>)
 8005762:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005764:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <prvAddNewTaskToReadyList+0xd0>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005770:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <prvAddNewTaskToReadyList+0xd4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d903      	bls.n	8005780 <prvAddNewTaskToReadyList+0x74>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <prvAddNewTaskToReadyList+0xd4>)
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <prvAddNewTaskToReadyList+0xd8>)
 800578e:	441a      	add	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f7ff f809 	bl	80047ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800579c:	f001 f9fe 	bl	8006b9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057a0:	4b0d      	ldr	r3, [pc, #52]	; (80057d8 <prvAddNewTaskToReadyList+0xcc>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00e      	beq.n	80057c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057a8:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <prvAddNewTaskToReadyList+0xc8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d207      	bcs.n	80057c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <prvAddNewTaskToReadyList+0xdc>)
 80057b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000ce4 	.word	0x20000ce4
 80057d4:	20000810 	.word	0x20000810
 80057d8:	20000cf0 	.word	0x20000cf0
 80057dc:	20000d00 	.word	0x20000d00
 80057e0:	20000cec 	.word	0x20000cec
 80057e4:	20000814 	.word	0x20000814
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d017      	beq.n	800582e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057fe:	4b13      	ldr	r3, [pc, #76]	; (800584c <vTaskDelay+0x60>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <vTaskDelay+0x30>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	60bb      	str	r3, [r7, #8]
}
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800581c:	f000 f88a 	bl	8005934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005820:	2100      	movs	r1, #0
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fcfc 	bl	8006220 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005828:	f000 f892 	bl	8005950 <xTaskResumeAll>
 800582c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d107      	bne.n	8005844 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005834:	4b06      	ldr	r3, [pc, #24]	; (8005850 <vTaskDelay+0x64>)
 8005836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000d0c 	.word	0x20000d0c
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	; 0x28
 8005858:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005862:	463a      	mov	r2, r7
 8005864:	1d39      	adds	r1, r7, #4
 8005866:	f107 0308 	add.w	r3, r7, #8
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe ff42 	bl	80046f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	9202      	str	r2, [sp, #8]
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	2300      	movs	r3, #0
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	2300      	movs	r3, #0
 8005880:	460a      	mov	r2, r1
 8005882:	4924      	ldr	r1, [pc, #144]	; (8005914 <vTaskStartScheduler+0xc0>)
 8005884:	4824      	ldr	r0, [pc, #144]	; (8005918 <vTaskStartScheduler+0xc4>)
 8005886:	f7ff fdf9 	bl	800547c <xTaskCreateStatic>
 800588a:	4603      	mov	r3, r0
 800588c:	4a23      	ldr	r2, [pc, #140]	; (800591c <vTaskStartScheduler+0xc8>)
 800588e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005890:	4b22      	ldr	r3, [pc, #136]	; (800591c <vTaskStartScheduler+0xc8>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005898:	2301      	movs	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e001      	b.n	80058a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d102      	bne.n	80058ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058a8:	f000 fd0e 	bl	80062c8 <xTimerCreateTimerTask>
 80058ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d11b      	bne.n	80058ec <vTaskStartScheduler+0x98>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	613b      	str	r3, [r7, #16]
}
 80058c6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058c8:	4b15      	ldr	r3, [pc, #84]	; (8005920 <vTaskStartScheduler+0xcc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3354      	adds	r3, #84	; 0x54
 80058ce:	4a15      	ldr	r2, [pc, #84]	; (8005924 <vTaskStartScheduler+0xd0>)
 80058d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058d2:	4b15      	ldr	r3, [pc, #84]	; (8005928 <vTaskStartScheduler+0xd4>)
 80058d4:	f04f 32ff 	mov.w	r2, #4294967295
 80058d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058da:	4b14      	ldr	r3, [pc, #80]	; (800592c <vTaskStartScheduler+0xd8>)
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058e0:	4b13      	ldr	r3, [pc, #76]	; (8005930 <vTaskStartScheduler+0xdc>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058e6:	f001 f8b7 	bl	8006a58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058ea:	e00e      	b.n	800590a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d10a      	bne.n	800590a <vTaskStartScheduler+0xb6>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	60fb      	str	r3, [r7, #12]
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <vTaskStartScheduler+0xb4>
}
 800590a:	bf00      	nop
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	08007348 	.word	0x08007348
 8005918:	08005f55 	.word	0x08005f55
 800591c:	20000d08 	.word	0x20000d08
 8005920:	20000810 	.word	0x20000810
 8005924:	20000010 	.word	0x20000010
 8005928:	20000d04 	.word	0x20000d04
 800592c:	20000cf0 	.word	0x20000cf0
 8005930:	20000ce8 	.word	0x20000ce8

08005934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <vTaskSuspendAll+0x18>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	4a03      	ldr	r2, [pc, #12]	; (800594c <vTaskSuspendAll+0x18>)
 8005940:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005942:	bf00      	nop
 8005944:	46bd      	mov	sp, r7
 8005946:	bc80      	pop	{r7}
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	20000d0c 	.word	0x20000d0c

08005950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800595e:	4b42      	ldr	r3, [pc, #264]	; (8005a68 <xTaskResumeAll+0x118>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <xTaskResumeAll+0x2c>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	603b      	str	r3, [r7, #0]
}
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800597c:	f001 f8de 	bl	8006b3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005980:	4b39      	ldr	r3, [pc, #228]	; (8005a68 <xTaskResumeAll+0x118>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3b01      	subs	r3, #1
 8005986:	4a38      	ldr	r2, [pc, #224]	; (8005a68 <xTaskResumeAll+0x118>)
 8005988:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598a:	4b37      	ldr	r3, [pc, #220]	; (8005a68 <xTaskResumeAll+0x118>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d162      	bne.n	8005a58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005992:	4b36      	ldr	r3, [pc, #216]	; (8005a6c <xTaskResumeAll+0x11c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d05e      	beq.n	8005a58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800599a:	e02f      	b.n	80059fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800599c:	4b34      	ldr	r3, [pc, #208]	; (8005a70 <xTaskResumeAll+0x120>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3318      	adds	r3, #24
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe ff5b 	bl	8004864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe ff56 	bl	8004864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059bc:	4b2d      	ldr	r3, [pc, #180]	; (8005a74 <xTaskResumeAll+0x124>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d903      	bls.n	80059cc <xTaskResumeAll+0x7c>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	4a2a      	ldr	r2, [pc, #168]	; (8005a74 <xTaskResumeAll+0x124>)
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4a27      	ldr	r2, [pc, #156]	; (8005a78 <xTaskResumeAll+0x128>)
 80059da:	441a      	add	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f7fe fee3 	bl	80047ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	4b23      	ldr	r3, [pc, #140]	; (8005a7c <xTaskResumeAll+0x12c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d302      	bcc.n	80059fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80059f6:	4b22      	ldr	r3, [pc, #136]	; (8005a80 <xTaskResumeAll+0x130>)
 80059f8:	2201      	movs	r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059fc:	4b1c      	ldr	r3, [pc, #112]	; (8005a70 <xTaskResumeAll+0x120>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1cb      	bne.n	800599c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a0a:	f000 fb5d 	bl	80060c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a0e:	4b1d      	ldr	r3, [pc, #116]	; (8005a84 <xTaskResumeAll+0x134>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d010      	beq.n	8005a3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a1a:	f000 f845 	bl	8005aa8 <xTaskIncrementTick>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005a24:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <xTaskResumeAll+0x130>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f1      	bne.n	8005a1a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005a36:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <xTaskResumeAll+0x134>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a3c:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <xTaskResumeAll+0x130>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d009      	beq.n	8005a58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a48:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <xTaskResumeAll+0x138>)
 8005a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a58:	f001 f8a0 	bl	8006b9c <vPortExitCritical>

	return xAlreadyYielded;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000d0c 	.word	0x20000d0c
 8005a6c:	20000ce4 	.word	0x20000ce4
 8005a70:	20000ca4 	.word	0x20000ca4
 8005a74:	20000cec 	.word	0x20000cec
 8005a78:	20000814 	.word	0x20000814
 8005a7c:	20000810 	.word	0x20000810
 8005a80:	20000cf8 	.word	0x20000cf8
 8005a84:	20000cf4 	.word	0x20000cf4
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a92:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <xTaskGetTickCount+0x18>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a98:	687b      	ldr	r3, [r7, #4]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr
 8005aa4:	20000ce8 	.word	0x20000ce8

08005aa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ab2:	4b4f      	ldr	r3, [pc, #316]	; (8005bf0 <xTaskIncrementTick+0x148>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 8089 	bne.w	8005bce <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005abc:	4b4d      	ldr	r3, [pc, #308]	; (8005bf4 <xTaskIncrementTick+0x14c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ac4:	4a4b      	ldr	r2, [pc, #300]	; (8005bf4 <xTaskIncrementTick+0x14c>)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d120      	bne.n	8005b12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ad0:	4b49      	ldr	r3, [pc, #292]	; (8005bf8 <xTaskIncrementTick+0x150>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	603b      	str	r3, [r7, #0]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <xTaskIncrementTick+0x46>
 8005af0:	4b41      	ldr	r3, [pc, #260]	; (8005bf8 <xTaskIncrementTick+0x150>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	4b41      	ldr	r3, [pc, #260]	; (8005bfc <xTaskIncrementTick+0x154>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a3f      	ldr	r2, [pc, #252]	; (8005bf8 <xTaskIncrementTick+0x150>)
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4a3f      	ldr	r2, [pc, #252]	; (8005bfc <xTaskIncrementTick+0x154>)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	4b3e      	ldr	r3, [pc, #248]	; (8005c00 <xTaskIncrementTick+0x158>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	4a3d      	ldr	r2, [pc, #244]	; (8005c00 <xTaskIncrementTick+0x158>)
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	f000 fadb 	bl	80060c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b12:	4b3c      	ldr	r3, [pc, #240]	; (8005c04 <xTaskIncrementTick+0x15c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d349      	bcc.n	8005bb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b1c:	4b36      	ldr	r3, [pc, #216]	; (8005bf8 <xTaskIncrementTick+0x150>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b26:	4b37      	ldr	r3, [pc, #220]	; (8005c04 <xTaskIncrementTick+0x15c>)
 8005b28:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2c:	601a      	str	r2, [r3, #0]
					break;
 8005b2e:	e03f      	b.n	8005bb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b30:	4b31      	ldr	r3, [pc, #196]	; (8005bf8 <xTaskIncrementTick+0x150>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d203      	bcs.n	8005b50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b48:	4a2e      	ldr	r2, [pc, #184]	; (8005c04 <xTaskIncrementTick+0x15c>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b4e:	e02f      	b.n	8005bb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fe fe85 	bl	8004864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	3318      	adds	r3, #24
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe fe7c 	bl	8004864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b70:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <xTaskIncrementTick+0x160>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d903      	bls.n	8005b80 <xTaskIncrementTick+0xd8>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	4a22      	ldr	r2, [pc, #136]	; (8005c08 <xTaskIncrementTick+0x160>)
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4a1f      	ldr	r2, [pc, #124]	; (8005c0c <xTaskIncrementTick+0x164>)
 8005b8e:	441a      	add	r2, r3
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f7fe fe09 	bl	80047ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba0:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <xTaskIncrementTick+0x168>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d3b8      	bcc.n	8005b1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005baa:	2301      	movs	r3, #1
 8005bac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bae:	e7b5      	b.n	8005b1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bb0:	4b17      	ldr	r3, [pc, #92]	; (8005c10 <xTaskIncrementTick+0x168>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb6:	4915      	ldr	r1, [pc, #84]	; (8005c0c <xTaskIncrementTick+0x164>)
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d907      	bls.n	8005bd8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e004      	b.n	8005bd8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005bce:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <xTaskIncrementTick+0x16c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	4a0f      	ldr	r2, [pc, #60]	; (8005c14 <xTaskIncrementTick+0x16c>)
 8005bd6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <xTaskIncrementTick+0x170>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8005be0:	2301      	movs	r3, #1
 8005be2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005be4:	697b      	ldr	r3, [r7, #20]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000d0c 	.word	0x20000d0c
 8005bf4:	20000ce8 	.word	0x20000ce8
 8005bf8:	20000c9c 	.word	0x20000c9c
 8005bfc:	20000ca0 	.word	0x20000ca0
 8005c00:	20000cfc 	.word	0x20000cfc
 8005c04:	20000d04 	.word	0x20000d04
 8005c08:	20000cec 	.word	0x20000cec
 8005c0c:	20000814 	.word	0x20000814
 8005c10:	20000810 	.word	0x20000810
 8005c14:	20000cf4 	.word	0x20000cf4
 8005c18:	20000cf8 	.word	0x20000cf8

08005c1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c22:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <vTaskSwitchContext+0xb0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c2a:	4b29      	ldr	r3, [pc, #164]	; (8005cd0 <vTaskSwitchContext+0xb4>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c30:	e046      	b.n	8005cc0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005c32:	4b27      	ldr	r3, [pc, #156]	; (8005cd0 <vTaskSwitchContext+0xb4>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c38:	4b26      	ldr	r3, [pc, #152]	; (8005cd4 <vTaskSwitchContext+0xb8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	e010      	b.n	8005c62 <vTaskSwitchContext+0x46>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <vTaskSwitchContext+0x40>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	607b      	str	r3, [r7, #4]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <vTaskSwitchContext+0x3e>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	491d      	ldr	r1, [pc, #116]	; (8005cd8 <vTaskSwitchContext+0xbc>)
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4613      	mov	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0e4      	beq.n	8005c40 <vTaskSwitchContext+0x24>
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <vTaskSwitchContext+0xbc>)
 8005c82:	4413      	add	r3, r2
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	605a      	str	r2, [r3, #4]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	3308      	adds	r3, #8
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d104      	bne.n	8005ca6 <vTaskSwitchContext+0x8a>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4a0b      	ldr	r2, [pc, #44]	; (8005cdc <vTaskSwitchContext+0xc0>)
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <vTaskSwitchContext+0xb8>)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cb6:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <vTaskSwitchContext+0xc0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3354      	adds	r3, #84	; 0x54
 8005cbc:	4a08      	ldr	r2, [pc, #32]	; (8005ce0 <vTaskSwitchContext+0xc4>)
 8005cbe:	6013      	str	r3, [r2, #0]
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000d0c 	.word	0x20000d0c
 8005cd0:	20000cf8 	.word	0x20000cf8
 8005cd4:	20000cec 	.word	0x20000cec
 8005cd8:	20000814 	.word	0x20000814
 8005cdc:	20000810 	.word	0x20000810
 8005ce0:	20000010 	.word	0x20000010

08005ce4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	60fb      	str	r3, [r7, #12]
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d0a:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <vTaskPlaceOnEventList+0x44>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3318      	adds	r3, #24
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fe fd6e 	bl	80047f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d18:	2101      	movs	r1, #1
 8005d1a:	6838      	ldr	r0, [r7, #0]
 8005d1c:	f000 fa80 	bl	8006220 <prvAddCurrentTaskToDelayedList>
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20000810 	.word	0x20000810

08005d2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	617b      	str	r3, [r7, #20]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d54:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3318      	adds	r3, #24
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f7fe fd26 	bl	80047ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005d68:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	68b8      	ldr	r0, [r7, #8]
 8005d72:	f000 fa55 	bl	8006220 <prvAddCurrentTaskToDelayedList>
	}
 8005d76:	bf00      	nop
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000810 	.word	0x20000810

08005d84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	60fb      	str	r3, [r7, #12]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	3318      	adds	r3, #24
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe fd55 	bl	8004864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dba:	4b1e      	ldr	r3, [pc, #120]	; (8005e34 <xTaskRemoveFromEventList+0xb0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d11d      	bne.n	8005dfe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fd4c 	bl	8004864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd0:	4b19      	ldr	r3, [pc, #100]	; (8005e38 <xTaskRemoveFromEventList+0xb4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d903      	bls.n	8005de0 <xTaskRemoveFromEventList+0x5c>
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	4a16      	ldr	r2, [pc, #88]	; (8005e38 <xTaskRemoveFromEventList+0xb4>)
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4a13      	ldr	r2, [pc, #76]	; (8005e3c <xTaskRemoveFromEventList+0xb8>)
 8005dee:	441a      	add	r2, r3
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f7fe fcd9 	bl	80047ae <vListInsertEnd>
 8005dfc:	e005      	b.n	8005e0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	3318      	adds	r3, #24
 8005e02:	4619      	mov	r1, r3
 8005e04:	480e      	ldr	r0, [pc, #56]	; (8005e40 <xTaskRemoveFromEventList+0xbc>)
 8005e06:	f7fe fcd2 	bl	80047ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <xTaskRemoveFromEventList+0xc0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d905      	bls.n	8005e24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <xTaskRemoveFromEventList+0xc4>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e001      	b.n	8005e28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e28:	697b      	ldr	r3, [r7, #20]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000d0c 	.word	0x20000d0c
 8005e38:	20000cec 	.word	0x20000cec
 8005e3c:	20000814 	.word	0x20000814
 8005e40:	20000ca4 	.word	0x20000ca4
 8005e44:	20000810 	.word	0x20000810
 8005e48:	20000cf8 	.word	0x20000cf8

08005e4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <vTaskInternalSetTimeOutState+0x24>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <vTaskInternalSetTimeOutState+0x28>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	605a      	str	r2, [r3, #4]
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000cfc 	.word	0x20000cfc
 8005e74:	20000ce8 	.word	0x20000ce8

08005e78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	613b      	str	r3, [r7, #16]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	60fb      	str	r3, [r7, #12]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005eba:	f000 fe3f 	bl	8006b3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ebe:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <xTaskCheckForTimeOut+0xbc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d102      	bne.n	8005ede <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	e023      	b.n	8005f26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <xTaskCheckForTimeOut+0xc0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d007      	beq.n	8005efa <xTaskCheckForTimeOut+0x82>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d302      	bcc.n	8005efa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	e015      	b.n	8005f26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d20b      	bcs.n	8005f1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	1ad2      	subs	r2, r2, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff9b 	bl	8005e4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f16:	2300      	movs	r3, #0
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	e004      	b.n	8005f26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f22:	2301      	movs	r3, #1
 8005f24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f26:	f000 fe39 	bl	8006b9c <vPortExitCritical>

	return xReturn;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3720      	adds	r7, #32
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000ce8 	.word	0x20000ce8
 8005f38:	20000cfc 	.word	0x20000cfc

08005f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f40:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <vTaskMissedYield+0x14>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	601a      	str	r2, [r3, #0]
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000cf8 	.word	0x20000cf8

08005f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f5c:	f000 f852 	bl	8006004 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f60:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <prvIdleTask+0x28>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d9f9      	bls.n	8005f5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f68:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <prvIdleTask+0x2c>)
 8005f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f78:	e7f0      	b.n	8005f5c <prvIdleTask+0x8>
 8005f7a:	bf00      	nop
 8005f7c:	20000814 	.word	0x20000814
 8005f80:	e000ed04 	.word	0xe000ed04

08005f84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	607b      	str	r3, [r7, #4]
 8005f8e:	e00c      	b.n	8005faa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4a12      	ldr	r2, [pc, #72]	; (8005fe4 <prvInitialiseTaskLists+0x60>)
 8005f9c:	4413      	add	r3, r2
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe fbda 	bl	8004758 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	607b      	str	r3, [r7, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b37      	cmp	r3, #55	; 0x37
 8005fae:	d9ef      	bls.n	8005f90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fb0:	480d      	ldr	r0, [pc, #52]	; (8005fe8 <prvInitialiseTaskLists+0x64>)
 8005fb2:	f7fe fbd1 	bl	8004758 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fb6:	480d      	ldr	r0, [pc, #52]	; (8005fec <prvInitialiseTaskLists+0x68>)
 8005fb8:	f7fe fbce 	bl	8004758 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fbc:	480c      	ldr	r0, [pc, #48]	; (8005ff0 <prvInitialiseTaskLists+0x6c>)
 8005fbe:	f7fe fbcb 	bl	8004758 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fc2:	480c      	ldr	r0, [pc, #48]	; (8005ff4 <prvInitialiseTaskLists+0x70>)
 8005fc4:	f7fe fbc8 	bl	8004758 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fc8:	480b      	ldr	r0, [pc, #44]	; (8005ff8 <prvInitialiseTaskLists+0x74>)
 8005fca:	f7fe fbc5 	bl	8004758 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <prvInitialiseTaskLists+0x78>)
 8005fd0:	4a05      	ldr	r2, [pc, #20]	; (8005fe8 <prvInitialiseTaskLists+0x64>)
 8005fd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <prvInitialiseTaskLists+0x7c>)
 8005fd6:	4a05      	ldr	r2, [pc, #20]	; (8005fec <prvInitialiseTaskLists+0x68>)
 8005fd8:	601a      	str	r2, [r3, #0]
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000814 	.word	0x20000814
 8005fe8:	20000c74 	.word	0x20000c74
 8005fec:	20000c88 	.word	0x20000c88
 8005ff0:	20000ca4 	.word	0x20000ca4
 8005ff4:	20000cb8 	.word	0x20000cb8
 8005ff8:	20000cd0 	.word	0x20000cd0
 8005ffc:	20000c9c 	.word	0x20000c9c
 8006000:	20000ca0 	.word	0x20000ca0

08006004 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800600a:	e019      	b.n	8006040 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800600c:	f000 fd96 	bl	8006b3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006010:	4b10      	ldr	r3, [pc, #64]	; (8006054 <prvCheckTasksWaitingTermination+0x50>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3304      	adds	r3, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe fc21 	bl	8004864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006022:	4b0d      	ldr	r3, [pc, #52]	; (8006058 <prvCheckTasksWaitingTermination+0x54>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3b01      	subs	r3, #1
 8006028:	4a0b      	ldr	r2, [pc, #44]	; (8006058 <prvCheckTasksWaitingTermination+0x54>)
 800602a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <prvCheckTasksWaitingTermination+0x58>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3b01      	subs	r3, #1
 8006032:	4a0a      	ldr	r2, [pc, #40]	; (800605c <prvCheckTasksWaitingTermination+0x58>)
 8006034:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006036:	f000 fdb1 	bl	8006b9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f810 	bl	8006060 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <prvCheckTasksWaitingTermination+0x58>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e1      	bne.n	800600c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000cb8 	.word	0x20000cb8
 8006058:	20000ce4 	.word	0x20000ce4
 800605c:	20000ccc 	.word	0x20000ccc

08006060 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3354      	adds	r3, #84	; 0x54
 800606c:	4618      	mov	r0, r3
 800606e:	f001 f887 	bl	8007180 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006078:	2b00      	cmp	r3, #0
 800607a:	d108      	bne.n	800608e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	4618      	mov	r0, r3
 8006082:	f000 ff1f 	bl	8006ec4 <vPortFree>
				vPortFree( pxTCB );
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 ff1c 	bl	8006ec4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800608c:	e018      	b.n	80060c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006094:	2b01      	cmp	r3, #1
 8006096:	d103      	bne.n	80060a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 ff13 	bl	8006ec4 <vPortFree>
	}
 800609e:	e00f      	b.n	80060c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d00a      	beq.n	80060c0 <prvDeleteTCB+0x60>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	60fb      	str	r3, [r7, #12]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <prvDeleteTCB+0x5e>
	}
 80060c0:	bf00      	nop
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ce:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <prvResetNextTaskUnblockTime+0x38>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d104      	bne.n	80060e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <prvResetNextTaskUnblockTime+0x3c>)
 80060da:	f04f 32ff 	mov.w	r2, #4294967295
 80060de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060e0:	e008      	b.n	80060f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e2:	4b07      	ldr	r3, [pc, #28]	; (8006100 <prvResetNextTaskUnblockTime+0x38>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	4a04      	ldr	r2, [pc, #16]	; (8006104 <prvResetNextTaskUnblockTime+0x3c>)
 80060f2:	6013      	str	r3, [r2, #0]
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	20000c9c 	.word	0x20000c9c
 8006104:	20000d04 	.word	0x20000d04

08006108 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800610e:	4b0b      	ldr	r3, [pc, #44]	; (800613c <xTaskGetSchedulerState+0x34>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d102      	bne.n	800611c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006116:	2301      	movs	r3, #1
 8006118:	607b      	str	r3, [r7, #4]
 800611a:	e008      	b.n	800612e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800611c:	4b08      	ldr	r3, [pc, #32]	; (8006140 <xTaskGetSchedulerState+0x38>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d102      	bne.n	800612a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006124:	2302      	movs	r3, #2
 8006126:	607b      	str	r3, [r7, #4]
 8006128:	e001      	b.n	800612e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800612a:	2300      	movs	r3, #0
 800612c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800612e:	687b      	ldr	r3, [r7, #4]
	}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	20000cf0 	.word	0x20000cf0
 8006140:	20000d0c 	.word	0x20000d0c

08006144 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006150:	2300      	movs	r3, #0
 8006152:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d056      	beq.n	8006208 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800615a:	4b2e      	ldr	r3, [pc, #184]	; (8006214 <xTaskPriorityDisinherit+0xd0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	429a      	cmp	r2, r3
 8006162:	d00a      	beq.n	800617a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	60fb      	str	r3, [r7, #12]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10a      	bne.n	8006198 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	60bb      	str	r3, [r7, #8]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800619c:	1e5a      	subs	r2, r3, #1
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d02c      	beq.n	8006208 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d128      	bne.n	8006208 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	3304      	adds	r3, #4
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe fb52 	bl	8004864 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d8:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <xTaskPriorityDisinherit+0xd4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d903      	bls.n	80061e8 <xTaskPriorityDisinherit+0xa4>
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	4a0c      	ldr	r2, [pc, #48]	; (8006218 <xTaskPriorityDisinherit+0xd4>)
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4a09      	ldr	r2, [pc, #36]	; (800621c <xTaskPriorityDisinherit+0xd8>)
 80061f6:	441a      	add	r2, r3
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	3304      	adds	r3, #4
 80061fc:	4619      	mov	r1, r3
 80061fe:	4610      	mov	r0, r2
 8006200:	f7fe fad5 	bl	80047ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006208:	697b      	ldr	r3, [r7, #20]
	}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000810 	.word	0x20000810
 8006218:	20000cec 	.word	0x20000cec
 800621c:	20000814 	.word	0x20000814

08006220 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800622a:	4b21      	ldr	r3, [pc, #132]	; (80062b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006230:	4b20      	ldr	r3, [pc, #128]	; (80062b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3304      	adds	r3, #4
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe fb14 	bl	8004864 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006242:	d10a      	bne.n	800625a <prvAddCurrentTaskToDelayedList+0x3a>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800624a:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3304      	adds	r3, #4
 8006250:	4619      	mov	r1, r3
 8006252:	4819      	ldr	r0, [pc, #100]	; (80062b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006254:	f7fe faab 	bl	80047ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006258:	e026      	b.n	80062a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4413      	add	r3, r2
 8006260:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006262:	4b14      	ldr	r3, [pc, #80]	; (80062b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	429a      	cmp	r2, r3
 8006270:	d209      	bcs.n	8006286 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006272:	4b12      	ldr	r3, [pc, #72]	; (80062bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	4b0f      	ldr	r3, [pc, #60]	; (80062b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3304      	adds	r3, #4
 800627c:	4619      	mov	r1, r3
 800627e:	4610      	mov	r0, r2
 8006280:	f7fe fab8 	bl	80047f4 <vListInsert>
}
 8006284:	e010      	b.n	80062a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006286:	4b0e      	ldr	r3, [pc, #56]	; (80062c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3304      	adds	r3, #4
 8006290:	4619      	mov	r1, r3
 8006292:	4610      	mov	r0, r2
 8006294:	f7fe faae 	bl	80047f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d202      	bcs.n	80062a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062a2:	4a08      	ldr	r2, [pc, #32]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6013      	str	r3, [r2, #0]
}
 80062a8:	bf00      	nop
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	20000ce8 	.word	0x20000ce8
 80062b4:	20000810 	.word	0x20000810
 80062b8:	20000cd0 	.word	0x20000cd0
 80062bc:	20000ca0 	.word	0x20000ca0
 80062c0:	20000c9c 	.word	0x20000c9c
 80062c4:	20000d04 	.word	0x20000d04

080062c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062d2:	f000 fb05 	bl	80068e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062d6:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <xTimerCreateTimerTask+0x80>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d021      	beq.n	8006322 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062e6:	1d3a      	adds	r2, r7, #4
 80062e8:	f107 0108 	add.w	r1, r7, #8
 80062ec:	f107 030c 	add.w	r3, r7, #12
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fe fa17 	bl	8004724 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	9202      	str	r2, [sp, #8]
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	2302      	movs	r3, #2
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	2300      	movs	r3, #0
 8006306:	460a      	mov	r2, r1
 8006308:	4910      	ldr	r1, [pc, #64]	; (800634c <xTimerCreateTimerTask+0x84>)
 800630a:	4811      	ldr	r0, [pc, #68]	; (8006350 <xTimerCreateTimerTask+0x88>)
 800630c:	f7ff f8b6 	bl	800547c <xTaskCreateStatic>
 8006310:	4603      	mov	r3, r0
 8006312:	4a10      	ldr	r2, [pc, #64]	; (8006354 <xTimerCreateTimerTask+0x8c>)
 8006314:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006316:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <xTimerCreateTimerTask+0x8c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800631e:	2301      	movs	r3, #1
 8006320:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	613b      	str	r3, [r7, #16]
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800633e:	697b      	ldr	r3, [r7, #20]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	20000d40 	.word	0x20000d40
 800634c:	08007350 	.word	0x08007350
 8006350:	0800648d 	.word	0x0800648d
 8006354:	20000d44 	.word	0x20000d44

08006358 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006366:	2300      	movs	r3, #0
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	623b      	str	r3, [r7, #32]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006386:	4b1a      	ldr	r3, [pc, #104]	; (80063f0 <xTimerGenericCommand+0x98>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d02a      	beq.n	80063e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b05      	cmp	r3, #5
 800639e:	dc18      	bgt.n	80063d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063a0:	f7ff feb2 	bl	8006108 <xTaskGetSchedulerState>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d109      	bne.n	80063be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063aa:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <xTimerGenericCommand+0x98>)
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	f107 0110 	add.w	r1, r7, #16
 80063b2:	2300      	movs	r3, #0
 80063b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b6:	f7fe fbc3 	bl	8004b40 <xQueueGenericSend>
 80063ba:	6278      	str	r0, [r7, #36]	; 0x24
 80063bc:	e012      	b.n	80063e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063be:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <xTimerGenericCommand+0x98>)
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	f107 0110 	add.w	r1, r7, #16
 80063c6:	2300      	movs	r3, #0
 80063c8:	2200      	movs	r2, #0
 80063ca:	f7fe fbb9 	bl	8004b40 <xQueueGenericSend>
 80063ce:	6278      	str	r0, [r7, #36]	; 0x24
 80063d0:	e008      	b.n	80063e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063d2:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <xTimerGenericCommand+0x98>)
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	f107 0110 	add.w	r1, r7, #16
 80063da:	2300      	movs	r3, #0
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	f7fe fcad 	bl	8004d3c <xQueueGenericSendFromISR>
 80063e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3728      	adds	r7, #40	; 0x28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20000d40 	.word	0x20000d40

080063f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063fe:	4b22      	ldr	r3, [pc, #136]	; (8006488 <prvProcessExpiredTimer+0x94>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	3304      	adds	r3, #4
 800640c:	4618      	mov	r0, r3
 800640e:	f7fe fa29 	bl	8004864 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d022      	beq.n	8006466 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	699a      	ldr	r2, [r3, #24]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	18d1      	adds	r1, r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	6978      	ldr	r0, [r7, #20]
 800642e:	f000 f8cf 	bl	80065d0 <prvInsertTimerInActiveList>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01f      	beq.n	8006478 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006438:	2300      	movs	r3, #0
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	2300      	movs	r3, #0
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	2100      	movs	r1, #0
 8006442:	6978      	ldr	r0, [r7, #20]
 8006444:	f7ff ff88 	bl	8006358 <xTimerGenericCommand>
 8006448:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d113      	bne.n	8006478 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	60fb      	str	r3, [r7, #12]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	b2da      	uxtb	r2, r3
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	6978      	ldr	r0, [r7, #20]
 800647e:	4798      	blx	r3
}
 8006480:	bf00      	nop
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000d38 	.word	0x20000d38

0800648c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006494:	f107 0308 	add.w	r3, r7, #8
 8006498:	4618      	mov	r0, r3
 800649a:	f000 f857 	bl	800654c <prvGetNextExpireTime>
 800649e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4619      	mov	r1, r3
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f803 	bl	80064b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064aa:	f000 f8d3 	bl	8006654 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064ae:	e7f1      	b.n	8006494 <prvTimerTask+0x8>

080064b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064ba:	f7ff fa3b 	bl	8005934 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064be:	f107 0308 	add.w	r3, r7, #8
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f864 	bl	8006590 <prvSampleTimeNow>
 80064c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d130      	bne.n	8006532 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <prvProcessTimerOrBlockTask+0x3c>
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d806      	bhi.n	80064ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064de:	f7ff fa37 	bl	8005950 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064e2:	68f9      	ldr	r1, [r7, #12]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff ff85 	bl	80063f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064ea:	e024      	b.n	8006536 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064f2:	4b13      	ldr	r3, [pc, #76]	; (8006540 <prvProcessTimerOrBlockTask+0x90>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <prvProcessTimerOrBlockTask+0x50>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <prvProcessTimerOrBlockTask+0x52>
 8006500:	2300      	movs	r3, #0
 8006502:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006504:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <prvProcessTimerOrBlockTask+0x94>)
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	f7fe ff7f 	bl	8005414 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006516:	f7ff fa1b 	bl	8005950 <xTaskResumeAll>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006520:	4b09      	ldr	r3, [pc, #36]	; (8006548 <prvProcessTimerOrBlockTask+0x98>)
 8006522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
}
 8006530:	e001      	b.n	8006536 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006532:	f7ff fa0d 	bl	8005950 <xTaskResumeAll>
}
 8006536:	bf00      	nop
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20000d3c 	.word	0x20000d3c
 8006544:	20000d40 	.word	0x20000d40
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006554:	4b0d      	ldr	r3, [pc, #52]	; (800658c <prvGetNextExpireTime+0x40>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <prvGetNextExpireTime+0x16>
 800655e:	2201      	movs	r2, #1
 8006560:	e000      	b.n	8006564 <prvGetNextExpireTime+0x18>
 8006562:	2200      	movs	r2, #0
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d105      	bne.n	800657c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006570:	4b06      	ldr	r3, [pc, #24]	; (800658c <prvGetNextExpireTime+0x40>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e001      	b.n	8006580 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006580:	68fb      	ldr	r3, [r7, #12]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr
 800658c:	20000d38 	.word	0x20000d38

08006590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006598:	f7ff fa78 	bl	8005a8c <xTaskGetTickCount>
 800659c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <prvSampleTimeNow+0x3c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d205      	bcs.n	80065b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065a8:	f000 f936 	bl	8006818 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e002      	b.n	80065ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065ba:	4a04      	ldr	r2, [pc, #16]	; (80065cc <prvSampleTimeNow+0x3c>)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065c0:	68fb      	ldr	r3, [r7, #12]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000d48 	.word	0x20000d48

080065d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d812      	bhi.n	800661c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	1ad2      	subs	r2, r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	429a      	cmp	r2, r3
 8006602:	d302      	bcc.n	800660a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006604:	2301      	movs	r3, #1
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	e01b      	b.n	8006642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800660a:	4b10      	ldr	r3, [pc, #64]	; (800664c <prvInsertTimerInActiveList+0x7c>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3304      	adds	r3, #4
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f7fe f8ed 	bl	80047f4 <vListInsert>
 800661a:	e012      	b.n	8006642 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d206      	bcs.n	8006632 <prvInsertTimerInActiveList+0x62>
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d302      	bcc.n	8006632 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800662c:	2301      	movs	r3, #1
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e007      	b.n	8006642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006632:	4b07      	ldr	r3, [pc, #28]	; (8006650 <prvInsertTimerInActiveList+0x80>)
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3304      	adds	r3, #4
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f7fe f8d9 	bl	80047f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006642:	697b      	ldr	r3, [r7, #20]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20000d3c 	.word	0x20000d3c
 8006650:	20000d38 	.word	0x20000d38

08006654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08e      	sub	sp, #56	; 0x38
 8006658:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800665a:	e0ca      	b.n	80067f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	da18      	bge.n	8006694 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	3304      	adds	r3, #4
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	61fb      	str	r3, [r7, #28]
}
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800668a:	6850      	ldr	r0, [r2, #4]
 800668c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800668e:	6892      	ldr	r2, [r2, #8]
 8006690:	4611      	mov	r1, r2
 8006692:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f2c0 80aa 	blt.w	80067f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d004      	beq.n	80066b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	3304      	adds	r3, #4
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe f8d9 	bl	8004864 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066b2:	463b      	mov	r3, r7
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff ff6b 	bl	8006590 <prvSampleTimeNow>
 80066ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b09      	cmp	r3, #9
 80066c0:	f200 8097 	bhi.w	80067f2 <prvProcessReceivedCommands+0x19e>
 80066c4:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <prvProcessReceivedCommands+0x78>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	080066f5 	.word	0x080066f5
 80066d8:	08006769 	.word	0x08006769
 80066dc:	0800677d 	.word	0x0800677d
 80066e0:	080067c7 	.word	0x080067c7
 80066e4:	080066f5 	.word	0x080066f5
 80066e8:	080066f5 	.word	0x080066f5
 80066ec:	08006769 	.word	0x08006769
 80066f0:	0800677d 	.word	0x0800677d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	18d1      	adds	r1, r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006714:	f7ff ff5c 	bl	80065d0 <prvInsertTimerInActiveList>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d069      	beq.n	80067f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d05e      	beq.n	80067f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	441a      	add	r2, r3
 800673c:	2300      	movs	r3, #0
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	2300      	movs	r3, #0
 8006742:	2100      	movs	r1, #0
 8006744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006746:	f7ff fe07 	bl	8006358 <xTimerGenericCommand>
 800674a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d14f      	bne.n	80067f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	61bb      	str	r3, [r7, #24]
}
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	b2da      	uxtb	r2, r3
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800677a:	e03a      	b.n	80067f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006782:	f043 0301 	orr.w	r3, r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	617b      	str	r3, [r7, #20]
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	699a      	ldr	r2, [r3, #24]
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	18d1      	adds	r1, r2, r3
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c0:	f7ff ff06 	bl	80065d0 <prvInsertTimerInActiveList>
					break;
 80067c4:	e015      	b.n	80067f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d103      	bne.n	80067dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80067d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d6:	f000 fb75 	bl	8006ec4 <vPortFree>
 80067da:	e00a      	b.n	80067f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067e2:	f023 0301 	bic.w	r3, r3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067ee:	e000      	b.n	80067f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80067f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067f2:	4b08      	ldr	r3, [pc, #32]	; (8006814 <prvProcessReceivedCommands+0x1c0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	1d39      	adds	r1, r7, #4
 80067f8:	2200      	movs	r2, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe fb36 	bl	8004e6c <xQueueReceive>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	f47f af2a 	bne.w	800665c <prvProcessReceivedCommands+0x8>
	}
}
 8006808:	bf00      	nop
 800680a:	bf00      	nop
 800680c:	3730      	adds	r7, #48	; 0x30
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000d40 	.word	0x20000d40

08006818 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800681e:	e048      	b.n	80068b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006820:	4b2d      	ldr	r3, [pc, #180]	; (80068d8 <prvSwitchTimerLists+0xc0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800682a:	4b2b      	ldr	r3, [pc, #172]	; (80068d8 <prvSwitchTimerLists+0xc0>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3304      	adds	r3, #4
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe f813 	bl	8004864 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d02e      	beq.n	80068b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4413      	add	r3, r2
 800685c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	429a      	cmp	r2, r3
 8006864:	d90e      	bls.n	8006884 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006872:	4b19      	ldr	r3, [pc, #100]	; (80068d8 <prvSwitchTimerLists+0xc0>)
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3304      	adds	r3, #4
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f7fd ffb9 	bl	80047f4 <vListInsert>
 8006882:	e016      	b.n	80068b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006884:	2300      	movs	r3, #0
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	2300      	movs	r3, #0
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	2100      	movs	r1, #0
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7ff fd62 	bl	8006358 <xTimerGenericCommand>
 8006894:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10a      	bne.n	80068b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	603b      	str	r3, [r7, #0]
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068b2:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <prvSwitchTimerLists+0xc0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1b1      	bne.n	8006820 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068bc:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <prvSwitchTimerLists+0xc0>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068c2:	4b06      	ldr	r3, [pc, #24]	; (80068dc <prvSwitchTimerLists+0xc4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a04      	ldr	r2, [pc, #16]	; (80068d8 <prvSwitchTimerLists+0xc0>)
 80068c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80068ca:	4a04      	ldr	r2, [pc, #16]	; (80068dc <prvSwitchTimerLists+0xc4>)
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	6013      	str	r3, [r2, #0]
}
 80068d0:	bf00      	nop
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000d38 	.word	0x20000d38
 80068dc:	20000d3c 	.word	0x20000d3c

080068e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068e6:	f000 f929 	bl	8006b3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068ea:	4b15      	ldr	r3, [pc, #84]	; (8006940 <prvCheckForValidListAndQueue+0x60>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d120      	bne.n	8006934 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068f2:	4814      	ldr	r0, [pc, #80]	; (8006944 <prvCheckForValidListAndQueue+0x64>)
 80068f4:	f7fd ff30 	bl	8004758 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068f8:	4813      	ldr	r0, [pc, #76]	; (8006948 <prvCheckForValidListAndQueue+0x68>)
 80068fa:	f7fd ff2d 	bl	8004758 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <prvCheckForValidListAndQueue+0x6c>)
 8006900:	4a10      	ldr	r2, [pc, #64]	; (8006944 <prvCheckForValidListAndQueue+0x64>)
 8006902:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006904:	4b12      	ldr	r3, [pc, #72]	; (8006950 <prvCheckForValidListAndQueue+0x70>)
 8006906:	4a10      	ldr	r2, [pc, #64]	; (8006948 <prvCheckForValidListAndQueue+0x68>)
 8006908:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800690a:	2300      	movs	r3, #0
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	4b11      	ldr	r3, [pc, #68]	; (8006954 <prvCheckForValidListAndQueue+0x74>)
 8006910:	4a11      	ldr	r2, [pc, #68]	; (8006958 <prvCheckForValidListAndQueue+0x78>)
 8006912:	2110      	movs	r1, #16
 8006914:	200a      	movs	r0, #10
 8006916:	f7fe f837 	bl	8004988 <xQueueGenericCreateStatic>
 800691a:	4603      	mov	r3, r0
 800691c:	4a08      	ldr	r2, [pc, #32]	; (8006940 <prvCheckForValidListAndQueue+0x60>)
 800691e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <prvCheckForValidListAndQueue+0x60>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <prvCheckForValidListAndQueue+0x60>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	490b      	ldr	r1, [pc, #44]	; (800695c <prvCheckForValidListAndQueue+0x7c>)
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fd48 	bl	80053c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006934:	f000 f932 	bl	8006b9c <vPortExitCritical>
}
 8006938:	bf00      	nop
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20000d40 	.word	0x20000d40
 8006944:	20000d10 	.word	0x20000d10
 8006948:	20000d24 	.word	0x20000d24
 800694c:	20000d38 	.word	0x20000d38
 8006950:	20000d3c 	.word	0x20000d3c
 8006954:	20000dec 	.word	0x20000dec
 8006958:	20000d4c 	.word	0x20000d4c
 800695c:	08007358 	.word	0x08007358

08006960 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3b04      	subs	r3, #4
 8006970:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3b04      	subs	r3, #4
 800697e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f023 0201 	bic.w	r2, r3, #1
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3b04      	subs	r3, #4
 800698e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006990:	4a08      	ldr	r2, [pc, #32]	; (80069b4 <pxPortInitialiseStack+0x54>)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3b14      	subs	r3, #20
 800699a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3b20      	subs	r3, #32
 80069a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069a8:	68fb      	ldr	r3, [r7, #12]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr
 80069b4:	080069b9 	.word	0x080069b9

080069b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80069be:	2300      	movs	r3, #0
 80069c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069c2:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <prvTaskExitError+0x54>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d00a      	beq.n	80069e2 <prvTaskExitError+0x2a>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	60fb      	str	r3, [r7, #12]
}
 80069de:	bf00      	nop
 80069e0:	e7fe      	b.n	80069e0 <prvTaskExitError+0x28>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	60bb      	str	r3, [r7, #8]
}
 80069f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069f6:	bf00      	nop
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0fc      	beq.n	80069f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	2000000c 	.word	0x2000000c

08006a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a10:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <pxCurrentTCBConst2>)
 8006a12:	6819      	ldr	r1, [r3, #0]
 8006a14:	6808      	ldr	r0, [r1, #0]
 8006a16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a1a:	f380 8809 	msr	PSP, r0
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f04f 0000 	mov.w	r0, #0
 8006a26:	f380 8811 	msr	BASEPRI, r0
 8006a2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006a2e:	4770      	bx	lr

08006a30 <pxCurrentTCBConst2>:
 8006a30:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop

08006a38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006a38:	4806      	ldr	r0, [pc, #24]	; (8006a54 <prvPortStartFirstTask+0x1c>)
 8006a3a:	6800      	ldr	r0, [r0, #0]
 8006a3c:	6800      	ldr	r0, [r0, #0]
 8006a3e:	f380 8808 	msr	MSP, r0
 8006a42:	b662      	cpsie	i
 8006a44:	b661      	cpsie	f
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	df00      	svc	0
 8006a50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a52:	bf00      	nop
 8006a54:	e000ed08 	.word	0xe000ed08

08006a58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a5e:	4b32      	ldr	r3, [pc, #200]	; (8006b28 <xPortStartScheduler+0xd0>)
 8006a60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	22ff      	movs	r2, #255	; 0xff
 8006a6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	4b2a      	ldr	r3, [pc, #168]	; (8006b2c <xPortStartScheduler+0xd4>)
 8006a84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a86:	4b2a      	ldr	r3, [pc, #168]	; (8006b30 <xPortStartScheduler+0xd8>)
 8006a88:	2207      	movs	r2, #7
 8006a8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a8c:	e009      	b.n	8006aa2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006a8e:	4b28      	ldr	r3, [pc, #160]	; (8006b30 <xPortStartScheduler+0xd8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	4a26      	ldr	r2, [pc, #152]	; (8006b30 <xPortStartScheduler+0xd8>)
 8006a96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aa2:	78fb      	ldrb	r3, [r7, #3]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aaa:	2b80      	cmp	r3, #128	; 0x80
 8006aac:	d0ef      	beq.n	8006a8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aae:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <xPortStartScheduler+0xd8>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f1c3 0307 	rsb	r3, r3, #7
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d00a      	beq.n	8006ad0 <xPortStartScheduler+0x78>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	60bb      	str	r3, [r7, #8]
}
 8006acc:	bf00      	nop
 8006ace:	e7fe      	b.n	8006ace <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ad0:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <xPortStartScheduler+0xd8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <xPortStartScheduler+0xd8>)
 8006ad8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ada:	4b15      	ldr	r3, [pc, #84]	; (8006b30 <xPortStartScheduler+0xd8>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ae2:	4a13      	ldr	r2, [pc, #76]	; (8006b30 <xPortStartScheduler+0xd8>)
 8006ae4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006aee:	4b11      	ldr	r3, [pc, #68]	; (8006b34 <xPortStartScheduler+0xdc>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a10      	ldr	r2, [pc, #64]	; (8006b34 <xPortStartScheduler+0xdc>)
 8006af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006af8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006afa:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <xPortStartScheduler+0xdc>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a0d      	ldr	r2, [pc, #52]	; (8006b34 <xPortStartScheduler+0xdc>)
 8006b00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b06:	f000 f8b9 	bl	8006c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <xPortStartScheduler+0xe0>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b10:	f7ff ff92 	bl	8006a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b14:	f7ff f882 	bl	8005c1c <vTaskSwitchContext>
	prvTaskExitError();
 8006b18:	f7ff ff4e 	bl	80069b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	e000e400 	.word	0xe000e400
 8006b2c:	20000e3c 	.word	0x20000e3c
 8006b30:	20000e40 	.word	0x20000e40
 8006b34:	e000ed20 	.word	0xe000ed20
 8006b38:	2000000c 	.word	0x2000000c

08006b3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	607b      	str	r3, [r7, #4]
}
 8006b54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b56:	4b0f      	ldr	r3, [pc, #60]	; (8006b94 <vPortEnterCritical+0x58>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	4a0d      	ldr	r2, [pc, #52]	; (8006b94 <vPortEnterCritical+0x58>)
 8006b5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b60:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <vPortEnterCritical+0x58>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d10f      	bne.n	8006b88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b68:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <vPortEnterCritical+0x5c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	603b      	str	r3, [r7, #0]
}
 8006b84:	bf00      	nop
 8006b86:	e7fe      	b.n	8006b86 <vPortEnterCritical+0x4a>
	}
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	2000000c 	.word	0x2000000c
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ba2:	4b11      	ldr	r3, [pc, #68]	; (8006be8 <vPortExitCritical+0x4c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10a      	bne.n	8006bc0 <vPortExitCritical+0x24>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	607b      	str	r3, [r7, #4]
}
 8006bbc:	bf00      	nop
 8006bbe:	e7fe      	b.n	8006bbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006bc0:	4b09      	ldr	r3, [pc, #36]	; (8006be8 <vPortExitCritical+0x4c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	4a08      	ldr	r2, [pc, #32]	; (8006be8 <vPortExitCritical+0x4c>)
 8006bc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bca:	4b07      	ldr	r3, [pc, #28]	; (8006be8 <vPortExitCritical+0x4c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d105      	bne.n	8006bde <vPortExitCritical+0x42>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	f383 8811 	msr	BASEPRI, r3
}
 8006bdc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bc80      	pop	{r7}
 8006be6:	4770      	bx	lr
 8006be8:	2000000c 	.word	0x2000000c
 8006bec:	00000000 	.word	0x00000000

08006bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bf0:	f3ef 8009 	mrs	r0, PSP
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <pxCurrentTCBConst>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c00:	6010      	str	r0, [r2, #0]
 8006c02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006c06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c0a:	f380 8811 	msr	BASEPRI, r0
 8006c0e:	f7ff f805 	bl	8005c1c <vTaskSwitchContext>
 8006c12:	f04f 0000 	mov.w	r0, #0
 8006c16:	f380 8811 	msr	BASEPRI, r0
 8006c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c1e:	6819      	ldr	r1, [r3, #0]
 8006c20:	6808      	ldr	r0, [r1, #0]
 8006c22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c26:	f380 8809 	msr	PSP, r0
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	4770      	bx	lr

08006c30 <pxCurrentTCBConst>:
 8006c30:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop

08006c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	607b      	str	r3, [r7, #4]
}
 8006c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c52:	f7fe ff29 	bl	8005aa8 <xTaskIncrementTick>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c5c:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <SysTick_Handler+0x40>)
 8006c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	2300      	movs	r3, #0
 8006c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	f383 8811 	msr	BASEPRI, r3
}
 8006c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <vPortSetupTimerInterrupt+0x30>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <vPortSetupTimerInterrupt+0x34>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c8c:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <vPortSetupTimerInterrupt+0x38>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a09      	ldr	r2, [pc, #36]	; (8006cb8 <vPortSetupTimerInterrupt+0x3c>)
 8006c92:	fba2 2303 	umull	r2, r3, r2, r3
 8006c96:	099b      	lsrs	r3, r3, #6
 8006c98:	4a08      	ldr	r2, [pc, #32]	; (8006cbc <vPortSetupTimerInterrupt+0x40>)
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c9e:	4b03      	ldr	r3, [pc, #12]	; (8006cac <vPortSetupTimerInterrupt+0x30>)
 8006ca0:	2207      	movs	r2, #7
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr
 8006cac:	e000e010 	.word	0xe000e010
 8006cb0:	e000e018 	.word	0xe000e018
 8006cb4:	20000000 	.word	0x20000000
 8006cb8:	10624dd3 	.word	0x10624dd3
 8006cbc:	e000e014 	.word	0xe000e014

08006cc0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cc6:	f3ef 8305 	mrs	r3, IPSR
 8006cca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2b0f      	cmp	r3, #15
 8006cd0:	d914      	bls.n	8006cfc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cd2:	4a16      	ldr	r2, [pc, #88]	; (8006d2c <vPortValidateInterruptPriority+0x6c>)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cdc:	4b14      	ldr	r3, [pc, #80]	; (8006d30 <vPortValidateInterruptPriority+0x70>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	7afa      	ldrb	r2, [r7, #11]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d20a      	bcs.n	8006cfc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	607b      	str	r3, [r7, #4]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <vPortValidateInterruptPriority+0x74>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d04:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <vPortValidateInterruptPriority+0x78>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d90a      	bls.n	8006d22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	603b      	str	r3, [r7, #0]
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <vPortValidateInterruptPriority+0x60>
	}
 8006d22:	bf00      	nop
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bc80      	pop	{r7}
 8006d2a:	4770      	bx	lr
 8006d2c:	e000e3f0 	.word	0xe000e3f0
 8006d30:	20000e3c 	.word	0x20000e3c
 8006d34:	e000ed0c 	.word	0xe000ed0c
 8006d38:	20000e40 	.word	0x20000e40

08006d3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08a      	sub	sp, #40	; 0x28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d44:	2300      	movs	r3, #0
 8006d46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d48:	f7fe fdf4 	bl	8005934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d4c:	4b58      	ldr	r3, [pc, #352]	; (8006eb0 <pvPortMalloc+0x174>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d54:	f000 f910 	bl	8006f78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d58:	4b56      	ldr	r3, [pc, #344]	; (8006eb4 <pvPortMalloc+0x178>)
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f040 808e 	bne.w	8006e82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01d      	beq.n	8006da8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4413      	add	r3, r2
 8006d72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d014      	beq.n	8006da8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f023 0307 	bic.w	r3, r3, #7
 8006d84:	3308      	adds	r3, #8
 8006d86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <pvPortMalloc+0x6c>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	617b      	str	r3, [r7, #20]
}
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d069      	beq.n	8006e82 <pvPortMalloc+0x146>
 8006dae:	4b42      	ldr	r3, [pc, #264]	; (8006eb8 <pvPortMalloc+0x17c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d864      	bhi.n	8006e82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006db8:	4b40      	ldr	r3, [pc, #256]	; (8006ebc <pvPortMalloc+0x180>)
 8006dba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dbc:	4b3f      	ldr	r3, [pc, #252]	; (8006ebc <pvPortMalloc+0x180>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dc2:	e004      	b.n	8006dce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d903      	bls.n	8006de0 <pvPortMalloc+0xa4>
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1f1      	bne.n	8006dc4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006de0:	4b33      	ldr	r3, [pc, #204]	; (8006eb0 <pvPortMalloc+0x174>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d04b      	beq.n	8006e82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2208      	movs	r2, #8
 8006df0:	4413      	add	r3, r2
 8006df2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	1ad2      	subs	r2, r2, r3
 8006e04:	2308      	movs	r3, #8
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d91f      	bls.n	8006e4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4413      	add	r3, r2
 8006e12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <pvPortMalloc+0xf8>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	613b      	str	r3, [r7, #16]
}
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	1ad2      	subs	r2, r2, r3
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e46:	69b8      	ldr	r0, [r7, #24]
 8006e48:	f000 f8f8 	bl	800703c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <pvPortMalloc+0x17c>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	4a18      	ldr	r2, [pc, #96]	; (8006eb8 <pvPortMalloc+0x17c>)
 8006e58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e5a:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <pvPortMalloc+0x17c>)
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	4b18      	ldr	r3, [pc, #96]	; (8006ec0 <pvPortMalloc+0x184>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d203      	bcs.n	8006e6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e66:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <pvPortMalloc+0x17c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a15      	ldr	r2, [pc, #84]	; (8006ec0 <pvPortMalloc+0x184>)
 8006e6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	4b10      	ldr	r3, [pc, #64]	; (8006eb4 <pvPortMalloc+0x178>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	431a      	orrs	r2, r3
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e82:	f7fe fd65 	bl	8005950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <pvPortMalloc+0x16a>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	60fb      	str	r3, [r7, #12]
}
 8006ea2:	bf00      	nop
 8006ea4:	e7fe      	b.n	8006ea4 <pvPortMalloc+0x168>
	return pvReturn;
 8006ea6:	69fb      	ldr	r3, [r7, #28]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3728      	adds	r7, #40	; 0x28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20001a4c 	.word	0x20001a4c
 8006eb4:	20001a58 	.word	0x20001a58
 8006eb8:	20001a50 	.word	0x20001a50
 8006ebc:	20001a44 	.word	0x20001a44
 8006ec0:	20001a54 	.word	0x20001a54

08006ec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d048      	beq.n	8006f68 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ed6:	2308      	movs	r3, #8
 8006ed8:	425b      	negs	r3, r3
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4413      	add	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	4b21      	ldr	r3, [pc, #132]	; (8006f70 <vPortFree+0xac>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4013      	ands	r3, r2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <vPortFree+0x44>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	60fb      	str	r3, [r7, #12]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <vPortFree+0x62>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60bb      	str	r3, [r7, #8]
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <vPortFree+0xac>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d019      	beq.n	8006f68 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d115      	bne.n	8006f68 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <vPortFree+0xac>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	43db      	mvns	r3, r3
 8006f46:	401a      	ands	r2, r3
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f4c:	f7fe fcf2 	bl	8005934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <vPortFree+0xb0>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4413      	add	r3, r2
 8006f5a:	4a06      	ldr	r2, [pc, #24]	; (8006f74 <vPortFree+0xb0>)
 8006f5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f5e:	6938      	ldr	r0, [r7, #16]
 8006f60:	f000 f86c 	bl	800703c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f64:	f7fe fcf4 	bl	8005950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f68:	bf00      	nop
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20001a58 	.word	0x20001a58
 8006f74:	20001a50 	.word	0x20001a50

08006f78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006f82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f84:	4b27      	ldr	r3, [pc, #156]	; (8007024 <prvHeapInit+0xac>)
 8006f86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00c      	beq.n	8006fac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3307      	adds	r3, #7
 8006f96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0307 	bic.w	r3, r3, #7
 8006f9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	4a1f      	ldr	r2, [pc, #124]	; (8007024 <prvHeapInit+0xac>)
 8006fa8:	4413      	add	r3, r2
 8006faa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fb0:	4a1d      	ldr	r2, [pc, #116]	; (8007028 <prvHeapInit+0xb0>)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fb6:	4b1c      	ldr	r3, [pc, #112]	; (8007028 <prvHeapInit+0xb0>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	1a9b      	subs	r3, r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0307 	bic.w	r3, r3, #7
 8006fd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4a15      	ldr	r2, [pc, #84]	; (800702c <prvHeapInit+0xb4>)
 8006fd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fda:	4b14      	ldr	r3, [pc, #80]	; (800702c <prvHeapInit+0xb4>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fe2:	4b12      	ldr	r3, [pc, #72]	; (800702c <prvHeapInit+0xb4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	1ad2      	subs	r2, r2, r3
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ff8:	4b0c      	ldr	r3, [pc, #48]	; (800702c <prvHeapInit+0xb4>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	4a0a      	ldr	r2, [pc, #40]	; (8007030 <prvHeapInit+0xb8>)
 8007006:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	4a09      	ldr	r2, [pc, #36]	; (8007034 <prvHeapInit+0xbc>)
 800700e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007010:	4b09      	ldr	r3, [pc, #36]	; (8007038 <prvHeapInit+0xc0>)
 8007012:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007016:	601a      	str	r2, [r3, #0]
}
 8007018:	bf00      	nop
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000e44 	.word	0x20000e44
 8007028:	20001a44 	.word	0x20001a44
 800702c:	20001a4c 	.word	0x20001a4c
 8007030:	20001a54 	.word	0x20001a54
 8007034:	20001a50 	.word	0x20001a50
 8007038:	20001a58 	.word	0x20001a58

0800703c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007044:	4b27      	ldr	r3, [pc, #156]	; (80070e4 <prvInsertBlockIntoFreeList+0xa8>)
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	e002      	b.n	8007050 <prvInsertBlockIntoFreeList+0x14>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	429a      	cmp	r2, r3
 8007058:	d8f7      	bhi.n	800704a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	4413      	add	r3, r2
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	429a      	cmp	r2, r3
 800706a:	d108      	bne.n	800707e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	441a      	add	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	441a      	add	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	429a      	cmp	r2, r3
 8007090:	d118      	bne.n	80070c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	4b14      	ldr	r3, [pc, #80]	; (80070e8 <prvInsertBlockIntoFreeList+0xac>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	429a      	cmp	r2, r3
 800709c:	d00d      	beq.n	80070ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	441a      	add	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e008      	b.n	80070cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070ba:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <prvInsertBlockIntoFreeList+0xac>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	e003      	b.n	80070cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d002      	beq.n	80070da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070da:	bf00      	nop
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	bc80      	pop	{r7}
 80070e2:	4770      	bx	lr
 80070e4:	20001a44 	.word	0x20001a44
 80070e8:	20001a4c 	.word	0x20001a4c

080070ec <__libc_init_array>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	4d0d      	ldr	r5, [pc, #52]	; (8007124 <__libc_init_array+0x38>)
 80070f0:	4c0d      	ldr	r4, [pc, #52]	; (8007128 <__libc_init_array+0x3c>)
 80070f2:	1b64      	subs	r4, r4, r5
 80070f4:	10a4      	asrs	r4, r4, #2
 80070f6:	2600      	movs	r6, #0
 80070f8:	42a6      	cmp	r6, r4
 80070fa:	d109      	bne.n	8007110 <__libc_init_array+0x24>
 80070fc:	4d0b      	ldr	r5, [pc, #44]	; (800712c <__libc_init_array+0x40>)
 80070fe:	4c0c      	ldr	r4, [pc, #48]	; (8007130 <__libc_init_array+0x44>)
 8007100:	f000 f8f4 	bl	80072ec <_init>
 8007104:	1b64      	subs	r4, r4, r5
 8007106:	10a4      	asrs	r4, r4, #2
 8007108:	2600      	movs	r6, #0
 800710a:	42a6      	cmp	r6, r4
 800710c:	d105      	bne.n	800711a <__libc_init_array+0x2e>
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	f855 3b04 	ldr.w	r3, [r5], #4
 8007114:	4798      	blx	r3
 8007116:	3601      	adds	r6, #1
 8007118:	e7ee      	b.n	80070f8 <__libc_init_array+0xc>
 800711a:	f855 3b04 	ldr.w	r3, [r5], #4
 800711e:	4798      	blx	r3
 8007120:	3601      	adds	r6, #1
 8007122:	e7f2      	b.n	800710a <__libc_init_array+0x1e>
 8007124:	08007514 	.word	0x08007514
 8007128:	08007514 	.word	0x08007514
 800712c:	08007514 	.word	0x08007514
 8007130:	08007518 	.word	0x08007518

08007134 <__retarget_lock_acquire_recursive>:
 8007134:	4770      	bx	lr

08007136 <__retarget_lock_release_recursive>:
 8007136:	4770      	bx	lr

08007138 <memcpy>:
 8007138:	440a      	add	r2, r1
 800713a:	4291      	cmp	r1, r2
 800713c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007140:	d100      	bne.n	8007144 <memcpy+0xc>
 8007142:	4770      	bx	lr
 8007144:	b510      	push	{r4, lr}
 8007146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800714a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800714e:	4291      	cmp	r1, r2
 8007150:	d1f9      	bne.n	8007146 <memcpy+0xe>
 8007152:	bd10      	pop	{r4, pc}

08007154 <memset>:
 8007154:	4402      	add	r2, r0
 8007156:	4603      	mov	r3, r0
 8007158:	4293      	cmp	r3, r2
 800715a:	d100      	bne.n	800715e <memset+0xa>
 800715c:	4770      	bx	lr
 800715e:	f803 1b01 	strb.w	r1, [r3], #1
 8007162:	e7f9      	b.n	8007158 <memset+0x4>

08007164 <cleanup_glue>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	460c      	mov	r4, r1
 8007168:	6809      	ldr	r1, [r1, #0]
 800716a:	4605      	mov	r5, r0
 800716c:	b109      	cbz	r1, 8007172 <cleanup_glue+0xe>
 800716e:	f7ff fff9 	bl	8007164 <cleanup_glue>
 8007172:	4621      	mov	r1, r4
 8007174:	4628      	mov	r0, r5
 8007176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800717a:	f000 b869 	b.w	8007250 <_free_r>
	...

08007180 <_reclaim_reent>:
 8007180:	4b2c      	ldr	r3, [pc, #176]	; (8007234 <_reclaim_reent+0xb4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4283      	cmp	r3, r0
 8007186:	b570      	push	{r4, r5, r6, lr}
 8007188:	4604      	mov	r4, r0
 800718a:	d051      	beq.n	8007230 <_reclaim_reent+0xb0>
 800718c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800718e:	b143      	cbz	r3, 80071a2 <_reclaim_reent+0x22>
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d14a      	bne.n	800722c <_reclaim_reent+0xac>
 8007196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007198:	6819      	ldr	r1, [r3, #0]
 800719a:	b111      	cbz	r1, 80071a2 <_reclaim_reent+0x22>
 800719c:	4620      	mov	r0, r4
 800719e:	f000 f857 	bl	8007250 <_free_r>
 80071a2:	6961      	ldr	r1, [r4, #20]
 80071a4:	b111      	cbz	r1, 80071ac <_reclaim_reent+0x2c>
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 f852 	bl	8007250 <_free_r>
 80071ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80071ae:	b111      	cbz	r1, 80071b6 <_reclaim_reent+0x36>
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 f84d 	bl	8007250 <_free_r>
 80071b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80071b8:	b111      	cbz	r1, 80071c0 <_reclaim_reent+0x40>
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 f848 	bl	8007250 <_free_r>
 80071c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80071c2:	b111      	cbz	r1, 80071ca <_reclaim_reent+0x4a>
 80071c4:	4620      	mov	r0, r4
 80071c6:	f000 f843 	bl	8007250 <_free_r>
 80071ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80071cc:	b111      	cbz	r1, 80071d4 <_reclaim_reent+0x54>
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 f83e 	bl	8007250 <_free_r>
 80071d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80071d6:	b111      	cbz	r1, 80071de <_reclaim_reent+0x5e>
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 f839 	bl	8007250 <_free_r>
 80071de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80071e0:	b111      	cbz	r1, 80071e8 <_reclaim_reent+0x68>
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 f834 	bl	8007250 <_free_r>
 80071e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071ea:	b111      	cbz	r1, 80071f2 <_reclaim_reent+0x72>
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 f82f 	bl	8007250 <_free_r>
 80071f2:	69a3      	ldr	r3, [r4, #24]
 80071f4:	b1e3      	cbz	r3, 8007230 <_reclaim_reent+0xb0>
 80071f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071f8:	4620      	mov	r0, r4
 80071fa:	4798      	blx	r3
 80071fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80071fe:	b1b9      	cbz	r1, 8007230 <_reclaim_reent+0xb0>
 8007200:	4620      	mov	r0, r4
 8007202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007206:	f7ff bfad 	b.w	8007164 <cleanup_glue>
 800720a:	5949      	ldr	r1, [r1, r5]
 800720c:	b941      	cbnz	r1, 8007220 <_reclaim_reent+0xa0>
 800720e:	3504      	adds	r5, #4
 8007210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007212:	2d80      	cmp	r5, #128	; 0x80
 8007214:	68d9      	ldr	r1, [r3, #12]
 8007216:	d1f8      	bne.n	800720a <_reclaim_reent+0x8a>
 8007218:	4620      	mov	r0, r4
 800721a:	f000 f819 	bl	8007250 <_free_r>
 800721e:	e7ba      	b.n	8007196 <_reclaim_reent+0x16>
 8007220:	680e      	ldr	r6, [r1, #0]
 8007222:	4620      	mov	r0, r4
 8007224:	f000 f814 	bl	8007250 <_free_r>
 8007228:	4631      	mov	r1, r6
 800722a:	e7ef      	b.n	800720c <_reclaim_reent+0x8c>
 800722c:	2500      	movs	r5, #0
 800722e:	e7ef      	b.n	8007210 <_reclaim_reent+0x90>
 8007230:	bd70      	pop	{r4, r5, r6, pc}
 8007232:	bf00      	nop
 8007234:	20000010 	.word	0x20000010

08007238 <__malloc_lock>:
 8007238:	4801      	ldr	r0, [pc, #4]	; (8007240 <__malloc_lock+0x8>)
 800723a:	f7ff bf7b 	b.w	8007134 <__retarget_lock_acquire_recursive>
 800723e:	bf00      	nop
 8007240:	20001b94 	.word	0x20001b94

08007244 <__malloc_unlock>:
 8007244:	4801      	ldr	r0, [pc, #4]	; (800724c <__malloc_unlock+0x8>)
 8007246:	f7ff bf76 	b.w	8007136 <__retarget_lock_release_recursive>
 800724a:	bf00      	nop
 800724c:	20001b94 	.word	0x20001b94

08007250 <_free_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4605      	mov	r5, r0
 8007254:	2900      	cmp	r1, #0
 8007256:	d045      	beq.n	80072e4 <_free_r+0x94>
 8007258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800725c:	1f0c      	subs	r4, r1, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	bfb8      	it	lt
 8007262:	18e4      	addlt	r4, r4, r3
 8007264:	f7ff ffe8 	bl	8007238 <__malloc_lock>
 8007268:	4a1f      	ldr	r2, [pc, #124]	; (80072e8 <_free_r+0x98>)
 800726a:	6813      	ldr	r3, [r2, #0]
 800726c:	4610      	mov	r0, r2
 800726e:	b933      	cbnz	r3, 800727e <_free_r+0x2e>
 8007270:	6063      	str	r3, [r4, #4]
 8007272:	6014      	str	r4, [r2, #0]
 8007274:	4628      	mov	r0, r5
 8007276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800727a:	f7ff bfe3 	b.w	8007244 <__malloc_unlock>
 800727e:	42a3      	cmp	r3, r4
 8007280:	d90b      	bls.n	800729a <_free_r+0x4a>
 8007282:	6821      	ldr	r1, [r4, #0]
 8007284:	1862      	adds	r2, r4, r1
 8007286:	4293      	cmp	r3, r2
 8007288:	bf04      	itt	eq
 800728a:	681a      	ldreq	r2, [r3, #0]
 800728c:	685b      	ldreq	r3, [r3, #4]
 800728e:	6063      	str	r3, [r4, #4]
 8007290:	bf04      	itt	eq
 8007292:	1852      	addeq	r2, r2, r1
 8007294:	6022      	streq	r2, [r4, #0]
 8007296:	6004      	str	r4, [r0, #0]
 8007298:	e7ec      	b.n	8007274 <_free_r+0x24>
 800729a:	461a      	mov	r2, r3
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	b10b      	cbz	r3, 80072a4 <_free_r+0x54>
 80072a0:	42a3      	cmp	r3, r4
 80072a2:	d9fa      	bls.n	800729a <_free_r+0x4a>
 80072a4:	6811      	ldr	r1, [r2, #0]
 80072a6:	1850      	adds	r0, r2, r1
 80072a8:	42a0      	cmp	r0, r4
 80072aa:	d10b      	bne.n	80072c4 <_free_r+0x74>
 80072ac:	6820      	ldr	r0, [r4, #0]
 80072ae:	4401      	add	r1, r0
 80072b0:	1850      	adds	r0, r2, r1
 80072b2:	4283      	cmp	r3, r0
 80072b4:	6011      	str	r1, [r2, #0]
 80072b6:	d1dd      	bne.n	8007274 <_free_r+0x24>
 80072b8:	6818      	ldr	r0, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	6053      	str	r3, [r2, #4]
 80072be:	4401      	add	r1, r0
 80072c0:	6011      	str	r1, [r2, #0]
 80072c2:	e7d7      	b.n	8007274 <_free_r+0x24>
 80072c4:	d902      	bls.n	80072cc <_free_r+0x7c>
 80072c6:	230c      	movs	r3, #12
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	e7d3      	b.n	8007274 <_free_r+0x24>
 80072cc:	6820      	ldr	r0, [r4, #0]
 80072ce:	1821      	adds	r1, r4, r0
 80072d0:	428b      	cmp	r3, r1
 80072d2:	bf04      	itt	eq
 80072d4:	6819      	ldreq	r1, [r3, #0]
 80072d6:	685b      	ldreq	r3, [r3, #4]
 80072d8:	6063      	str	r3, [r4, #4]
 80072da:	bf04      	itt	eq
 80072dc:	1809      	addeq	r1, r1, r0
 80072de:	6021      	streq	r1, [r4, #0]
 80072e0:	6054      	str	r4, [r2, #4]
 80072e2:	e7c7      	b.n	8007274 <_free_r+0x24>
 80072e4:	bd38      	pop	{r3, r4, r5, pc}
 80072e6:	bf00      	nop
 80072e8:	20001a5c 	.word	0x20001a5c

080072ec <_init>:
 80072ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ee:	bf00      	nop
 80072f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f2:	bc08      	pop	{r3}
 80072f4:	469e      	mov	lr, r3
 80072f6:	4770      	bx	lr

080072f8 <_fini>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	bf00      	nop
 80072fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fe:	bc08      	pop	{r3}
 8007300:	469e      	mov	lr, r3
 8007302:	4770      	bx	lr
