
WLEtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a64  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001b9c  08001b9c  00011b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c38  08001c38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c38  08001c38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c38  08001c38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c38  08001c38  00011c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c3c  08001c3c  00011c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001c4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001c4c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006aa6  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f8  00000000  00000000  00026adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  000280d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  00028a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017993  00000000  00000000  00029310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000793d  00000000  00000000  00040ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d0d  00000000  00000000  000485e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db2ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024dc  00000000  00000000  000db340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08001b84 	.word	0x08001b84

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08001b84 	.word	0x08001b84

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]
 80001ba:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001bc:	2002      	movs	r0, #2
 80001be:	f7ff ffdb 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_SET);
 80001c2:	2201      	movs	r2, #1
 80001c4:	2160      	movs	r1, #96	; 0x60
 80001c6:	4810      	ldr	r0, [pc, #64]	; (8000208 <MX_GPIO_Init+0x60>)
 80001c8:	f000 fbc3 	bl	8000952 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80001cc:	2360      	movs	r3, #96	; 0x60
 80001ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d0:	2301      	movs	r3, #1
 80001d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d8:	2300      	movs	r3, #0
 80001da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	4809      	ldr	r0, [pc, #36]	; (8000208 <MX_GPIO_Init+0x60>)
 80001e2:	f000 fa3f 	bl	8000664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 80001e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ec:	2300      	movs	r3, #0
 80001ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <MX_GPIO_Init+0x60>)
 80001fa:	f000 fa33 	bl	8000664 <HAL_GPIO_Init>

}
 80001fe:	bf00      	nop
 8000200:	3718      	adds	r7, #24
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	48000400 	.word	0x48000400

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000210:	f000 f8d0 	bl	80003b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000214:	f000 f81a 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000218:	f7ff ffc6 	bl	80001a8 <MX_GPIO_Init>
	  //HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
	//  HAL_Delay(2000);
	  //HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
//	  HAL_Delay(1000);
//	  LED_RED_TOGGLE;
	  if(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == KEY2_PRESS){
 800021c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000220:	4809      	ldr	r0, [pc, #36]	; (8000248 <main+0x3c>)
 8000222:	f000 fb7f 	bl	8000924 <HAL_GPIO_ReadPin>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d1f7      	bne.n	800021c <main+0x10>
		  LED_RED_TOGGLE;
 800022c:	2120      	movs	r1, #32
 800022e:	4806      	ldr	r0, [pc, #24]	; (8000248 <main+0x3c>)
 8000230:	f000 fba6 	bl	8000980 <HAL_GPIO_TogglePin>
		  while(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == KEY2_PRESS){}
 8000234:	bf00      	nop
 8000236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800023a:	4803      	ldr	r0, [pc, #12]	; (8000248 <main+0x3c>)
 800023c:	f000 fb72 	bl	8000924 <HAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f7      	beq.n	8000236 <main+0x2a>
	  if(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == KEY2_PRESS){
 8000246:	e7e9      	b.n	800021c <main+0x10>
 8000248:	48000400 	.word	0x48000400

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b09a      	sub	sp, #104	; 0x68
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0320 	add.w	r3, r7, #32
 8000256:	2248      	movs	r2, #72	; 0x48
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fc8a 	bl	8001b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 0308 	add.w	r3, r7, #8
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
 8000270:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000272:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <SystemClock_Config+0xa0>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800027a:	4a1c      	ldr	r2, [pc, #112]	; (80002ec <SystemClock_Config+0xa0>)
 800027c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000280:	6013      	str	r3, [r2, #0]
 8000282:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <SystemClock_Config+0xa0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800028e:	2320      	movs	r3, #32
 8000290:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000296:	2300      	movs	r3, #0
 8000298:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800029a:	2360      	movs	r3, #96	; 0x60
 800029c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029e:	2300      	movs	r3, #0
 80002a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0320 	add.w	r3, r7, #32
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fe18 	bl	8000edc <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002b2:	f000 f81d 	bl	80002f0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80002b6:	234f      	movs	r3, #79	; 0x4f
 80002b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ce:	f107 0308 	add.w	r3, r7, #8
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f001 f99b 	bl	8001610 <HAL_RCC_ClockConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002e0:	f000 f806 	bl	80002f0 <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3768      	adds	r7, #104	; 0x68
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	58000400 	.word	0x58000400

080002f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f4:	b672      	cpsid	i
}
 80002f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <Error_Handler+0x8>

080002fa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800030a:	e7fe      	b.n	800030a <NMI_Handler+0x4>

0800030c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000310:	e7fe      	b.n	8000310 <HardFault_Handler+0x4>

08000312 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000316:	e7fe      	b.n	8000316 <MemManage_Handler+0x4>

08000318 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800031c:	e7fe      	b.n	800031c <BusFault_Handler+0x4>

0800031e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000322:	e7fe      	b.n	8000322 <UsageFault_Handler+0x4>

08000324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr

08000348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800034c:	f000 f88c 	bl	8000468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	; (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000364:	f7ff fff6 	bl	8000354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	; (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	; (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038e:	f001 fbcd 	bl	8001b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff ff3b 	bl	800020c <main>

08000396 <LoopForever>:

LoopForever:
    b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003a4:	08001c40 	.word	0x08001c40
  ldr r2, =_sbss
 80003a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003ac:	2000002c 	.word	0x2000002c

080003b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>
	...

080003b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80003ba:	2300      	movs	r3, #0
 80003bc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003be:	2003      	movs	r0, #3
 80003c0:	f000 f91e 	bl	8000600 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80003c4:	f001 fae8 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80003c8:	4603      	mov	r3, r0
 80003ca:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <HAL_Init+0x3c>)
 80003cc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003ce:	200f      	movs	r0, #15
 80003d0:	f000 f810 	bl	80003f4 <HAL_InitTick>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80003da:	2301      	movs	r3, #1
 80003dc:	71fb      	strb	r3, [r7, #7]
 80003de:	e001      	b.n	80003e4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80003e0:	f7ff ff8b 	bl	80002fa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80003e4:	79fb      	ldrb	r3, [r7, #7]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000000 	.word	0x20000000

080003f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80003fc:	2300      	movs	r3, #0
 80003fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000400:	4b17      	ldr	r3, [pc, #92]	; (8000460 <HAL_InitTick+0x6c>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d024      	beq.n	8000452 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000408:	f001 fac6 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 800040c:	4602      	mov	r2, r0
 800040e:	4b14      	ldr	r3, [pc, #80]	; (8000460 <HAL_InitTick+0x6c>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	4619      	mov	r1, r3
 8000414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000418:	fbb3 f3f1 	udiv	r3, r3, r1
 800041c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000420:	4618      	mov	r0, r3
 8000422:	f000 f912 	bl	800064a <HAL_SYSTICK_Config>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d10f      	bne.n	800044c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2b0f      	cmp	r3, #15
 8000430:	d809      	bhi.n	8000446 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000432:	2200      	movs	r2, #0
 8000434:	6879      	ldr	r1, [r7, #4]
 8000436:	f04f 30ff 	mov.w	r0, #4294967295
 800043a:	f000 f8ec 	bl	8000616 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800043e:	4a09      	ldr	r2, [pc, #36]	; (8000464 <HAL_InitTick+0x70>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	6013      	str	r3, [r2, #0]
 8000444:	e007      	b.n	8000456 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000446:	2301      	movs	r3, #1
 8000448:	73fb      	strb	r3, [r7, #15]
 800044a:	e004      	b.n	8000456 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800044c:	2301      	movs	r3, #1
 800044e:	73fb      	strb	r3, [r7, #15]
 8000450:	e001      	b.n	8000456 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000452:	2301      	movs	r3, #1
 8000454:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000456:	7bfb      	ldrb	r3, [r7, #15]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000008 	.word	0x20000008
 8000464:	20000004 	.word	0x20000004

08000468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_IncTick+0x1c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <HAL_IncTick+0x20>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4413      	add	r3, r2
 8000478:	4a03      	ldr	r2, [pc, #12]	; (8000488 <HAL_IncTick+0x20>)
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	20000008 	.word	0x20000008
 8000488:	20000028 	.word	0x20000028

0800048c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  return uwTick;
 8000490:	4b02      	ldr	r3, [pc, #8]	; (800049c <HAL_GetTick+0x10>)
 8000492:	681b      	ldr	r3, [r3, #0]
}
 8000494:	4618      	mov	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	20000028 	.word	0x20000028

080004a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f003 0307 	and.w	r3, r3, #7
 80004ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <__NVIC_SetPriorityGrouping+0x44>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004bc:	4013      	ands	r3, r2
 80004be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004d2:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <__NVIC_SetPriorityGrouping+0x44>)
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	60d3      	str	r3, [r2, #12]
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <__NVIC_GetPriorityGrouping+0x18>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	0a1b      	lsrs	r3, r3, #8
 80004f2:	f003 0307 	and.w	r3, r3, #7
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	6039      	str	r1, [r7, #0]
 800050e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	db0a      	blt.n	800052e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	b2da      	uxtb	r2, r3
 800051c:	490c      	ldr	r1, [pc, #48]	; (8000550 <__NVIC_SetPriority+0x4c>)
 800051e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000522:	0112      	lsls	r2, r2, #4
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	440b      	add	r3, r1
 8000528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800052c:	e00a      	b.n	8000544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4908      	ldr	r1, [pc, #32]	; (8000554 <__NVIC_SetPriority+0x50>)
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	f003 030f 	and.w	r3, r3, #15
 800053a:	3b04      	subs	r3, #4
 800053c:	0112      	lsls	r2, r2, #4
 800053e:	b2d2      	uxtb	r2, r2
 8000540:	440b      	add	r3, r1
 8000542:	761a      	strb	r2, [r3, #24]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000e100 	.word	0xe000e100
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000558:	b480      	push	{r7}
 800055a:	b089      	sub	sp, #36	; 0x24
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	f1c3 0307 	rsb	r3, r3, #7
 8000572:	2b04      	cmp	r3, #4
 8000574:	bf28      	it	cs
 8000576:	2304      	movcs	r3, #4
 8000578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	3304      	adds	r3, #4
 800057e:	2b06      	cmp	r3, #6
 8000580:	d902      	bls.n	8000588 <NVIC_EncodePriority+0x30>
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	3b03      	subs	r3, #3
 8000586:	e000      	b.n	800058a <NVIC_EncodePriority+0x32>
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058c:	f04f 32ff 	mov.w	r2, #4294967295
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	43da      	mvns	r2, r3
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	401a      	ands	r2, r3
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a0:	f04f 31ff 	mov.w	r1, #4294967295
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	43d9      	mvns	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	4313      	orrs	r3, r2
         );
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3724      	adds	r7, #36	; 0x24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005cc:	d301      	bcc.n	80005d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ce:	2301      	movs	r3, #1
 80005d0:	e00f      	b.n	80005f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d2:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <SysTick_Config+0x40>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005da:	210f      	movs	r1, #15
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295
 80005e0:	f7ff ff90 	bl	8000504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <SysTick_Config+0x40>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ea:	4b04      	ldr	r3, [pc, #16]	; (80005fc <SysTick_Config+0x40>)
 80005ec:	2207      	movs	r2, #7
 80005ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	e000e010 	.word	0xe000e010

08000600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ff49 	bl	80004a0 <__NVIC_SetPriorityGrouping>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b086      	sub	sp, #24
 800061a:	af00      	add	r7, sp, #0
 800061c:	4603      	mov	r3, r0
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	607a      	str	r2, [r7, #4]
 8000622:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000624:	f7ff ff60 	bl	80004e8 <__NVIC_GetPriorityGrouping>
 8000628:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	68b9      	ldr	r1, [r7, #8]
 800062e:	6978      	ldr	r0, [r7, #20]
 8000630:	f7ff ff92 	bl	8000558 <NVIC_EncodePriority>
 8000634:	4602      	mov	r2, r0
 8000636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff61 	bl	8000504 <__NVIC_SetPriority>
}
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ffb2 	bl	80005bc <SysTick_Config>
 8000658:	4603      	mov	r3, r0
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000664:	b480      	push	{r7}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000672:	e140      	b.n	80008f6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	2101      	movs	r1, #1
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	fa01 f303 	lsl.w	r3, r1, r3
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	f000 8132 	beq.w	80008f0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	f003 0303 	and.w	r3, r3, #3
 8000694:	2b01      	cmp	r3, #1
 8000696:	d005      	beq.n	80006a4 <HAL_GPIO_Init+0x40>
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f003 0303 	and.w	r3, r3, #3
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d130      	bne.n	8000706 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	2203      	movs	r2, #3
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	43db      	mvns	r3, r3
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	68da      	ldr	r2, [r3, #12]
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006da:	2201      	movs	r2, #1
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43db      	mvns	r3, r3
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	4013      	ands	r3, r2
 80006e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	091b      	lsrs	r3, r3, #4
 80006f0:	f003 0201 	and.w	r2, r3, #1
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	f003 0303 	and.w	r3, r3, #3
 800070e:	2b03      	cmp	r3, #3
 8000710:	d017      	beq.n	8000742 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	2203      	movs	r2, #3
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43db      	mvns	r3, r3
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	4013      	ands	r3, r2
 8000728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	689a      	ldr	r2, [r3, #8]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	4313      	orrs	r3, r2
 800073a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	693a      	ldr	r2, [r7, #16]
 8000740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f003 0303 	and.w	r3, r3, #3
 800074a:	2b02      	cmp	r3, #2
 800074c:	d123      	bne.n	8000796 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	08da      	lsrs	r2, r3, #3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3208      	adds	r2, #8
 8000756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800075a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	220f      	movs	r2, #15
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	4013      	ands	r3, r2
 8000770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	691a      	ldr	r2, [r3, #16]
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	f003 0307 	and.w	r3, r3, #7
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	4313      	orrs	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	08da      	lsrs	r2, r3, #3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3208      	adds	r2, #8
 8000790:	6939      	ldr	r1, [r7, #16]
 8000792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	2203      	movs	r2, #3
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43db      	mvns	r3, r3
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	4013      	ands	r3, r2
 80007ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f003 0203 	and.w	r2, r3, #3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f000 808c 	beq.w	80008f0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80007d8:	4a4e      	ldr	r2, [pc, #312]	; (8000914 <HAL_GPIO_Init+0x2b0>)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	089b      	lsrs	r3, r3, #2
 80007de:	3302      	adds	r3, #2
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	2207      	movs	r2, #7
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	4013      	ands	r3, r2
 80007fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000802:	d00d      	beq.n	8000820 <HAL_GPIO_Init+0x1bc>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a44      	ldr	r2, [pc, #272]	; (8000918 <HAL_GPIO_Init+0x2b4>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d007      	beq.n	800081c <HAL_GPIO_Init+0x1b8>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a43      	ldr	r2, [pc, #268]	; (800091c <HAL_GPIO_Init+0x2b8>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d101      	bne.n	8000818 <HAL_GPIO_Init+0x1b4>
 8000814:	2302      	movs	r3, #2
 8000816:	e004      	b.n	8000822 <HAL_GPIO_Init+0x1be>
 8000818:	2307      	movs	r3, #7
 800081a:	e002      	b.n	8000822 <HAL_GPIO_Init+0x1be>
 800081c:	2301      	movs	r3, #1
 800081e:	e000      	b.n	8000822 <HAL_GPIO_Init+0x1be>
 8000820:	2300      	movs	r3, #0
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	f002 0203 	and.w	r2, r2, #3
 8000828:	0092      	lsls	r2, r2, #2
 800082a:	4093      	lsls	r3, r2
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4313      	orrs	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000832:	4938      	ldr	r1, [pc, #224]	; (8000914 <HAL_GPIO_Init+0x2b0>)
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	089b      	lsrs	r3, r3, #2
 8000838:	3302      	adds	r3, #2
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000840:	4b37      	ldr	r3, [pc, #220]	; (8000920 <HAL_GPIO_Init+0x2bc>)
 8000842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000846:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	43db      	mvns	r3, r3
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	4013      	ands	r3, r2
 8000850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4313      	orrs	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000866:	4a2e      	ldr	r2, [pc, #184]	; (8000920 <HAL_GPIO_Init+0x2bc>)
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <HAL_GPIO_Init+0x2bc>)
 8000870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000874:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	43db      	mvns	r3, r3
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4013      	ands	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000888:	2b00      	cmp	r3, #0
 800088a:	d003      	beq.n	8000894 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	4313      	orrs	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000894:	4a22      	ldr	r2, [pc, #136]	; (8000920 <HAL_GPIO_Init+0x2bc>)
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <HAL_GPIO_Init+0x2bc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	43db      	mvns	r3, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4013      	ands	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d003      	beq.n	80008c0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80008c0:	4a17      	ldr	r2, [pc, #92]	; (8000920 <HAL_GPIO_Init+0x2bc>)
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <HAL_GPIO_Init+0x2bc>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	43db      	mvns	r3, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4013      	ands	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d003      	beq.n	80008ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80008ea:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <HAL_GPIO_Init+0x2bc>)
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3301      	adds	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	f47f aeb7 	bne.w	8000674 <HAL_GPIO_Init+0x10>
  }
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	371c      	adds	r7, #28
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40010000 	.word	0x40010000
 8000918:	48000400 	.word	0x48000400
 800091c:	48000800 	.word	0x48000800
 8000920:	58000800 	.word	0x58000800

08000924 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	691a      	ldr	r2, [r3, #16]
 8000934:	887b      	ldrh	r3, [r7, #2]
 8000936:	4013      	ands	r3, r2
 8000938:	2b00      	cmp	r3, #0
 800093a:	d002      	beq.n	8000942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800093c:	2301      	movs	r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e001      	b.n	8000946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000946:	7bfb      	ldrb	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	460b      	mov	r3, r1
 800095c:	807b      	strh	r3, [r7, #2]
 800095e:	4613      	mov	r3, r2
 8000960:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000962:	787b      	ldrb	r3, [r7, #1]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d003      	beq.n	8000970 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000968:	887a      	ldrh	r2, [r7, #2]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800096e:	e002      	b.n	8000976 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000970:	887a      	ldrh	r2, [r7, #2]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000992:	887a      	ldrh	r2, [r7, #2]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4013      	ands	r3, r2
 8000998:	041a      	lsls	r2, r3, #16
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	43d9      	mvns	r1, r3
 800099e:	887b      	ldrh	r3, [r7, #2]
 80009a0:	400b      	ands	r3, r1
 80009a2:	431a      	orrs	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	619a      	str	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
	...

080009b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a03      	ldr	r2, [pc, #12]	; (80009cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80009be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	58000400 	.word	0x58000400

080009d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_PWREx_GetVoltageRange+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	58000400 	.word	0x58000400

080009e8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009f8:	d101      	bne.n	80009fe <LL_PWR_IsEnabledBkUpAccess+0x16>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	58000400 	.word	0x58000400

08000a0c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000a56:	d101      	bne.n	8000a5c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e000      	b.n	8000a5e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a78:	6013      	str	r3, [r2, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a94:	6013      	str	r3, [r2, #0]
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ab0:	d101      	bne.n	8000ab6 <LL_RCC_HSE_IsReady+0x18>
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e000      	b.n	8000ab8 <LL_RCC_HSE_IsReady+0x1a>
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000aea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b0a:	d101      	bne.n	8000b10 <LL_RCC_HSI_IsReady+0x18>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e000      	b.n	8000b12 <LL_RCC_HSI_IsReady+0x1a>
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	061b      	lsls	r3, r3, #24
 8000b30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b34:	4313      	orrs	r3, r2
 8000b36:	604b      	str	r3, [r1, #4]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d101      	bne.n	8000b5a <LL_RCC_LSE_IsReady+0x18>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e000      	b.n	8000b5c <LL_RCC_LSE_IsReady+0x1a>
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b94:	f023 0301 	bic.w	r3, r3, #1
 8000b98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d101      	bne.n	8000bbc <LL_RCC_LSI_IsReady+0x18>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <LL_RCC_LSI_IsReady+0x1a>
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6013      	str	r3, [r2, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bf0:	f023 0301 	bic.w	r3, r3, #1
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr

08000bfe <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d101      	bne.n	8000c14 <LL_RCC_MSI_IsReady+0x16>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <LL_RCC_MSI_IsReady+0x18>
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	2b08      	cmp	r3, #8
 8000c2e:	d101      	bne.n	8000c34 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000c30:	2301      	movs	r3, #1
 8000c32:	e000      	b.n	8000c36 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	021b      	lsls	r3, r3, #8
 8000c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c86:	4313      	orrs	r3, r2
 8000c88:	604b      	str	r3, [r1, #4]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f023 0203 	bic.w	r2, r3, #3
 8000ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	608b      	str	r3, [r1, #8]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	608b      	str	r3, [r1, #8]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d06:	f023 020f 	bic.w	r2, r3, #15
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d12:	4313      	orrs	r3, r2
 8000d14:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	608b      	str	r3, [r1, #8]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	608b      	str	r3, [r1, #8]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000db0:	6013      	str	r3, [r2, #0]
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr

08000dba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000dcc:	6013      	str	r3, [r2, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr

08000dd6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000de8:	d101      	bne.n	8000dee <LL_RCC_PLL_IsReady+0x18>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <LL_RCC_PLL_IsReady+0x1a>
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	0a1b      	lsrs	r3, r3, #8
 8000e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	f003 0303 	and.w	r3, r3, #3
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e64:	d101      	bne.n	8000e6a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8000e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e88:	d101      	bne.n	8000e8e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8000e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000eaa:	d101      	bne.n	8000eb0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8000ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ec8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000ecc:	d101      	bne.n	8000ed2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e38a      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eee:	f7ff fee4 	bl	8000cba <LL_RCC_GetSysClkSource>
 8000ef2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ef4:	f7ff ffa2 	bl	8000e3c <LL_RCC_PLL_GetMainSource>
 8000ef8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0320 	and.w	r3, r3, #32
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 80c9 	beq.w	800109a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <HAL_RCC_OscConfig+0x3e>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	2b0c      	cmp	r3, #12
 8000f12:	d17b      	bne.n	800100c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d178      	bne.n	800100c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f1a:	f7ff fe70 	bl	8000bfe <LL_RCC_MSI_IsReady>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d005      	beq.n	8000f30 <HAL_RCC_OscConfig+0x54>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e369      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <HAL_RCC_OscConfig+0x72>
 8000f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f4c:	e006      	b.n	8000f5c <HAL_RCC_OscConfig+0x80>
 8000f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d222      	bcs.n	8000fa6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fd2b 	bl	80019c0 <RCC_SetFlashLatencyFromMSIRange>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e347      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f96:	4313      	orrs	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fe64 	bl	8000c6c <LL_RCC_MSI_SetCalibTrimming>
 8000fa4:	e021      	b.n	8000fea <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fe4b 	bl	8000c6c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fcf0 	bl	80019c0 <RCC_SetFlashLatencyFromMSIRange>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e30c      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000fea:	f000 fcd5 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4ab4      	ldr	r2, [pc, #720]	; (80012c4 <HAL_RCC_OscConfig+0x3e8>)
 8000ff2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ff4:	4bb4      	ldr	r3, [pc, #720]	; (80012c8 <HAL_RCC_OscConfig+0x3ec>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff f9fb 	bl	80003f4 <HAL_InitTick>
 8000ffe:	4603      	mov	r3, r0
 8001000:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001002:	7cfb      	ldrb	r3, [r7, #19]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d047      	beq.n	8001098 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	e2fb      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d02c      	beq.n	800106e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001014:	f7ff fdd7 	bl	8000bc6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001018:	f7ff fa38 	bl	800048c <HAL_GetTick>
 800101c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001020:	f7ff fa34 	bl	800048c <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e2e8      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001032:	f7ff fde4 	bl	8000bfe <LL_RCC_MSI_IsReady>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f1      	beq.n	8001020 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800103c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800105e:	4313      	orrs	r3, r2
 8001060:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe00 	bl	8000c6c <LL_RCC_MSI_SetCalibTrimming>
 800106c:	e015      	b.n	800109a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800106e:	f7ff fdb8 	bl	8000be2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001072:	f7ff fa0b 	bl	800048c <HAL_GetTick>
 8001076:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800107a:	f7ff fa07 	bl	800048c <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e2bb      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 800108c:	f7ff fdb7 	bl	8000bfe <LL_RCC_MSI_IsReady>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f1      	bne.n	800107a <HAL_RCC_OscConfig+0x19e>
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001098:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d05f      	beq.n	8001166 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_OscConfig+0x1dc>
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b0c      	cmp	r3, #12
 80010b0:	d10d      	bne.n	80010ce <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d10a      	bne.n	80010ce <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	f7ff fcf1 	bl	8000a9e <LL_RCC_HSE_IsReady>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d050      	beq.n	8001164 <HAL_RCC_OscConfig+0x288>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d14c      	bne.n	8001164 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e29a      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80010ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ec:	d102      	bne.n	80010f4 <HAL_RCC_OscConfig+0x218>
 80010ee:	f7ff fcba 	bl	8000a66 <LL_RCC_HSE_Enable>
 80010f2:	e00d      	b.n	8001110 <HAL_RCC_OscConfig+0x234>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80010fc:	d104      	bne.n	8001108 <HAL_RCC_OscConfig+0x22c>
 80010fe:	f7ff fc85 	bl	8000a0c <LL_RCC_HSE_EnableTcxo>
 8001102:	f7ff fcb0 	bl	8000a66 <LL_RCC_HSE_Enable>
 8001106:	e003      	b.n	8001110 <HAL_RCC_OscConfig+0x234>
 8001108:	f7ff fcbb 	bl	8000a82 <LL_RCC_HSE_Disable>
 800110c:	f7ff fc8c 	bl	8000a28 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d012      	beq.n	800113e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001118:	f7ff f9b8 	bl	800048c <HAL_GetTick>
 800111c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff f9b4 	bl	800048c <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e268      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001132:	f7ff fcb4 	bl	8000a9e <LL_RCC_HSE_IsReady>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f1      	beq.n	8001120 <HAL_RCC_OscConfig+0x244>
 800113c:	e013      	b.n	8001166 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113e:	f7ff f9a5 	bl	800048c <HAL_GetTick>
 8001142:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001146:	f7ff f9a1 	bl	800048c <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b64      	cmp	r3, #100	; 0x64
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e255      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001158:	f7ff fca1 	bl	8000a9e <LL_RCC_HSE_IsReady>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f1      	bne.n	8001146 <HAL_RCC_OscConfig+0x26a>
 8001162:	e000      	b.n	8001166 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d04b      	beq.n	800120a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	2b04      	cmp	r3, #4
 8001176:	d005      	beq.n	8001184 <HAL_RCC_OscConfig+0x2a8>
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	2b0c      	cmp	r3, #12
 800117c:	d113      	bne.n	80011a6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d110      	bne.n	80011a6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001184:	f7ff fcb8 	bl	8000af8 <LL_RCC_HSI_IsReady>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d005      	beq.n	800119a <HAL_RCC_OscConfig+0x2be>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e234      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fcbb 	bl	8000b1a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011a4:	e031      	b.n	800120a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d019      	beq.n	80011e2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ae:	f7ff fc87 	bl	8000ac0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b2:	f7ff f96b 	bl	800048c <HAL_GetTick>
 80011b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ba:	f7ff f967 	bl	800048c <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e21b      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 80011cc:	f7ff fc94 	bl	8000af8 <LL_RCC_HSI_IsReady>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f1      	beq.n	80011ba <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fc9d 	bl	8000b1a <LL_RCC_HSI_SetCalibTrimming>
 80011e0:	e013      	b.n	800120a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e2:	f7ff fc7b 	bl	8000adc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff f951 	bl	800048c <HAL_GetTick>
 80011ea:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff f94d 	bl	800048c <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e201      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001200:	f7ff fc7a 	bl	8000af8 <LL_RCC_HSI_IsReady>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f1      	bne.n	80011ee <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d06e      	beq.n	80012f4 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d056      	beq.n	80012cc <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001226:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69da      	ldr	r2, [r3, #28]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	429a      	cmp	r2, r3
 8001234:	d031      	beq.n	800129a <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1da      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8001258:	f7ff fc94 	bl	8000b84 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800125c:	f7ff f916 	bl	800048c <HAL_GetTick>
 8001260:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001264:	f7ff f912 	bl	800048c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b11      	cmp	r3, #17
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e1c6      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001276:	f7ff fc95 	bl	8000ba4 <LL_RCC_LSI_IsReady>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f1      	bne.n	8001264 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001288:	f023 0210 	bic.w	r2, r3, #16
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001294:	4313      	orrs	r3, r2
 8001296:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129a:	f7ff fc63 	bl	8000b64 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129e:	f7ff f8f5 	bl	800048c <HAL_GetTick>
 80012a2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff f8f1 	bl	800048c <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b11      	cmp	r3, #17
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e1a5      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80012b8:	f7ff fc74 	bl	8000ba4 <LL_RCC_LSI_IsReady>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f1      	beq.n	80012a6 <HAL_RCC_OscConfig+0x3ca>
 80012c2:	e017      	b.n	80012f4 <HAL_RCC_OscConfig+0x418>
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012cc:	f7ff fc5a 	bl	8000b84 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff f8dc 	bl	800048c <HAL_GetTick>
 80012d4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d8:	f7ff f8d8 	bl	800048c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b11      	cmp	r3, #17
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e18c      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 80012ea:	f7ff fc5b 	bl	8000ba4 <LL_RCC_LSI_IsReady>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f1      	bne.n	80012d8 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80d8 	beq.w	80014b2 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001302:	f7ff fb71 	bl	80009e8 <LL_PWR_IsEnabledBkUpAccess>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d113      	bne.n	8001334 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800130c:	f7ff fb52 	bl	80009b4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001310:	f7ff f8bc 	bl	800048c <HAL_GetTick>
 8001314:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001318:	f7ff f8b8 	bl	800048c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e16c      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800132a:	f7ff fb5d 	bl	80009e8 <LL_PWR_IsEnabledBkUpAccess>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f1      	beq.n	8001318 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d07b      	beq.n	8001434 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b85      	cmp	r3, #133	; 0x85
 8001342:	d003      	beq.n	800134c <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b05      	cmp	r3, #5
 800134a:	d109      	bne.n	8001360 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800134c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001360:	f7ff f894 	bl	800048c <HAL_GetTick>
 8001364:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800137a:	e00a      	b.n	8001392 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137c:	f7ff f886 	bl	800048c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f241 3288 	movw	r2, #5000	; 0x1388
 800138a:	4293      	cmp	r3, r2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e138      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001392:	f7ff fbd6 	bl	8000b42 <LL_RCC_LSE_IsReady>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0ef      	beq.n	800137c <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b81      	cmp	r3, #129	; 0x81
 80013a2:	d003      	beq.n	80013ac <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b85      	cmp	r3, #133	; 0x85
 80013aa:	d121      	bne.n	80013f0 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff f86e 	bl	800048c <HAL_GetTick>
 80013b0:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80013c6:	e00a      	b.n	80013de <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff f860 	bl	800048c <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e112      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80013de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0ec      	beq.n	80013c8 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80013ee:	e060      	b.n	80014b2 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff f84c 	bl	800048c <HAL_GetTick>
 80013f4:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80013f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800140a:	e00a      	b.n	8001422 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140c:	f7ff f83e 	bl	800048c <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	; 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e0f0      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1ec      	bne.n	800140c <HAL_RCC_OscConfig+0x530>
 8001432:	e03e      	b.n	80014b2 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001434:	f7ff f82a 	bl	800048c <HAL_GetTick>
 8001438:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001442:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800144a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800144e:	e00a      	b.n	8001466 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001450:	f7ff f81c 	bl	800048c <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	; 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0ce      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1ec      	bne.n	8001450 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001476:	f7ff f809 	bl	800048c <HAL_GetTick>
 800147a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7fe fffb 	bl	800048c <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e0ad      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80014a8:	f7ff fb4b 	bl	8000b42 <LL_RCC_LSE_IsReady>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1ef      	bne.n	8001492 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 80a3 	beq.w	8001602 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d076      	beq.n	80015b0 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d14b      	bne.n	8001562 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	f7ff fc76 	bl	8000dba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7fe ffdd 	bl	800048c <HAL_GetTick>
 80014d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7fe ffd9 	bl	800048c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b0a      	cmp	r3, #10
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e08d      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80014e8:	f7ff fc75 	bl	8000dd6 <LL_RCC_PLL_IsReady>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f1      	bne.n	80014d6 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	4b44      	ldr	r3, [pc, #272]	; (800160c <HAL_RCC_OscConfig+0x730>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001504:	4311      	orrs	r1, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800150a:	0212      	lsls	r2, r2, #8
 800150c:	4311      	orrs	r1, r2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001512:	4311      	orrs	r1, r2
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001518:	4311      	orrs	r1, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800151e:	430a      	orrs	r2, r1
 8001520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001524:	4313      	orrs	r3, r2
 8001526:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001528:	f7ff fc39 	bl	8000d9e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7fe ffa6 	bl	800048c <HAL_GetTick>
 8001540:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7fe ffa2 	bl	800048c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b0a      	cmp	r3, #10
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e056      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001556:	f7ff fc3e 	bl	8000dd6 <LL_RCC_PLL_IsReady>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f1      	beq.n	8001544 <HAL_RCC_OscConfig+0x668>
 8001560:	e04f      	b.n	8001602 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001562:	f7ff fc2a 	bl	8000dba <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001570:	f023 0303 	bic.w	r3, r3, #3
 8001574:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8001576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001580:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001588:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7fe ff7f 	bl	800048c <HAL_GetTick>
 800158e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001592:	f7fe ff7b 	bl	800048c <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b0a      	cmp	r3, #10
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e02f      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80015a4:	f7ff fc17 	bl	8000dd6 <LL_RCC_PLL_IsReady>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f1      	bne.n	8001592 <HAL_RCC_OscConfig+0x6b6>
 80015ae:	e028      	b.n	8001602 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e023      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	f003 0203 	and.w	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d115      	bne.n	80015fe <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015dc:	429a      	cmp	r2, r3
 80015de:	d10e      	bne.n	80015fe <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	11c1808c 	.word	0x11c1808c

08001610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e10f      	b.n	8001844 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b89      	ldr	r3, [pc, #548]	; (800184c <HAL_RCC_ClockConfig+0x23c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d91b      	bls.n	800166a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b86      	ldr	r3, [pc, #536]	; (800184c <HAL_RCC_ClockConfig+0x23c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0207 	bic.w	r2, r3, #7
 800163a:	4984      	ldr	r1, [pc, #528]	; (800184c <HAL_RCC_ClockConfig+0x23c>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001642:	f7fe ff23 	bl	800048c <HAL_GetTick>
 8001646:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001648:	e008      	b.n	800165c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800164a:	f7fe ff1f 	bl	800048c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e0f3      	b.n	8001844 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165c:	4b7b      	ldr	r3, [pc, #492]	; (800184c <HAL_RCC_ClockConfig+0x23c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d1ef      	bne.n	800164a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d016      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fb28 	bl	8000cd0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001680:	f7fe ff04 	bl	800048c <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001688:	f7fe ff00 	bl	800048c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e0d4      	b.n	8001844 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800169a:	f7ff fbda 	bl	8000e52 <LL_RCC_IsActiveFlag_HPRE>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f1      	beq.n	8001688 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d016      	beq.n	80016de <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fb1e 	bl	8000cf6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80016ba:	f7fe fee7 	bl	800048c <HAL_GetTick>
 80016be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80016c2:	f7fe fee3 	bl	800048c <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e0b7      	b.n	8001844 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80016d4:	f7ff fbce 	bl	8000e74 <LL_RCC_IsActiveFlag_SHDHPRE>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f1      	beq.n	80016c2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fb17 	bl	8000d22 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80016f4:	f7fe feca 	bl	800048c <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80016fc:	f7fe fec6 	bl	800048c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e09a      	b.n	8001844 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800170e:	f7ff fbc3 	bl	8000e98 <LL_RCC_IsActiveFlag_PPRE1>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f1      	beq.n	80016fc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d017      	beq.n	8001754 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fb0c 	bl	8000d48 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001730:	f7fe feac 	bl	800048c <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001738:	f7fe fea8 	bl	800048c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e07c      	b.n	8001844 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800174a:	f7ff fbb6 	bl	8000eba <LL_RCC_IsActiveFlag_PPRE2>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f1      	beq.n	8001738 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d043      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d106      	bne.n	8001776 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001768:	f7ff f999 	bl	8000a9e <LL_RCC_HSE_IsReady>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d11e      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e066      	b.n	8001844 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d106      	bne.n	800178c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800177e:	f7ff fb2a 	bl	8000dd6 <LL_RCC_PLL_IsReady>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d113      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e05b      	b.n	8001844 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001794:	f7ff fa33 	bl	8000bfe <LL_RCC_MSI_IsReady>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d108      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e050      	b.n	8001844 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80017a2:	f7ff f9a9 	bl	8000af8 <LL_RCC_HSI_IsReady>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e049      	b.n	8001844 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fa6d 	bl	8000c94 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017ba:	f7fe fe67 	bl	800048c <HAL_GetTick>
 80017be:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c2:	f7fe fe63 	bl	800048c <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e035      	b.n	8001844 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d8:	f7ff fa6f 	bl	8000cba <LL_RCC_GetSysClkSource>
 80017dc:	4602      	mov	r2, r0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1ec      	bne.n	80017c2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_RCC_ClockConfig+0x23c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d21b      	bcs.n	800182e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_RCC_ClockConfig+0x23c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0207 	bic.w	r2, r3, #7
 80017fe:	4913      	ldr	r1, [pc, #76]	; (800184c <HAL_RCC_ClockConfig+0x23c>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001806:	f7fe fe41 	bl	800048c <HAL_GetTick>
 800180a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180c:	e008      	b.n	8001820 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800180e:	f7fe fe3d 	bl	800048c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e011      	b.n	8001844 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_RCC_ClockConfig+0x23c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d1ef      	bne.n	800180e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800182e:	f000 f8b3 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 8001832:	4603      	mov	r3, r0
 8001834:	4a06      	ldr	r2, [pc, #24]	; (8001850 <HAL_RCC_ClockConfig+0x240>)
 8001836:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_RCC_ClockConfig+0x244>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fdd9 	bl	80003f4 <HAL_InitTick>
 8001842:	4603      	mov	r3, r0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	58004000 	.word	0x58004000
 8001850:	20000000 	.word	0x20000000
 8001854:	20000004 	.word	0x20000004

08001858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001866:	f7ff fa28 	bl	8000cba <LL_RCC_GetSysClkSource>
 800186a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800186c:	f7ff fae6 	bl	8000e3c <LL_RCC_PLL_GetMainSource>
 8001870:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x2c>
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d139      	bne.n	80018f2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d136      	bne.n	80018f2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001884:	f7ff f9cb 	bl	8000c1e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d115      	bne.n	80018ba <HAL_RCC_GetSysClockFreq+0x62>
 800188e:	f7ff f9c6 	bl	8000c1e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001892:	4603      	mov	r3, r0
 8001894:	2b01      	cmp	r3, #1
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_GetSysClockFreq+0x4e>
 8001898:	f7ff f9d1 	bl	8000c3e <LL_RCC_MSI_GetRange>
 800189c:	4603      	mov	r3, r0
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	e005      	b.n	80018b2 <HAL_RCC_GetSysClockFreq+0x5a>
 80018a6:	f7ff f9d5 	bl	8000c54 <LL_RCC_MSI_GetRangeAfterStandby>
 80018aa:	4603      	mov	r3, r0
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	4a36      	ldr	r2, [pc, #216]	; (800198c <HAL_RCC_GetSysClockFreq+0x134>)
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x8c>
 80018ba:	f7ff f9b0 	bl	8000c1e <LL_RCC_MSI_IsEnabledRangeSelect>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_GetSysClockFreq+0x7a>
 80018c4:	f7ff f9bb 	bl	8000c3e <LL_RCC_MSI_GetRange>
 80018c8:	4603      	mov	r3, r0
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	e005      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x86>
 80018d2:	f7ff f9bf 	bl	8000c54 <LL_RCC_MSI_GetRangeAfterStandby>
 80018d6:	4603      	mov	r3, r0
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	4a2b      	ldr	r2, [pc, #172]	; (800198c <HAL_RCC_GetSysClockFreq+0x134>)
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d115      	bne.n	8001918 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80018f0:	e012      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d102      	bne.n	80018fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_RCC_GetSysClockFreq+0x138>)
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e00c      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b08      	cmp	r3, #8
 8001902:	d109      	bne.n	8001918 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001904:	f7ff f89e 	bl	8000a44 <LL_RCC_HSE_IsEnabledDiv2>
 8001908:	4603      	mov	r3, r0
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_RCC_GetSysClockFreq+0x138>)
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e001      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001916:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001918:	f7ff f9cf 	bl	8000cba <LL_RCC_GetSysClkSource>
 800191c:	4603      	mov	r3, r0
 800191e:	2b0c      	cmp	r3, #12
 8001920:	d12f      	bne.n	8001982 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001922:	f7ff fa8b 	bl	8000e3c <LL_RCC_PLL_GetMainSource>
 8001926:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d003      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0xde>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d003      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0xe4>
 8001934:	e00d      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_RCC_GetSysClockFreq+0x138>)
 8001938:	60fb      	str	r3, [r7, #12]
        break;
 800193a:	e00d      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800193c:	f7ff f882 	bl	8000a44 <LL_RCC_HSE_IsEnabledDiv2>
 8001940:	4603      	mov	r3, r0
 8001942:	2b01      	cmp	r3, #1
 8001944:	d102      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_RCC_GetSysClockFreq+0x138>)
 8001948:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800194a:	e005      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_RCC_GetSysClockFreq+0x13c>)
 800194e:	60fb      	str	r3, [r7, #12]
        break;
 8001950:	e002      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	60fb      	str	r3, [r7, #12]
        break;
 8001956:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001958:	f7ff fa4e 	bl	8000df8 <LL_RCC_PLL_GetN>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	fb03 f402 	mul.w	r4, r3, r2
 8001964:	f7ff fa5f 	bl	8000e26 <LL_RCC_PLL_GetDivider>
 8001968:	4603      	mov	r3, r0
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	3301      	adds	r3, #1
 800196e:	fbb4 f4f3 	udiv	r4, r4, r3
 8001972:	f7ff fa4d 	bl	8000e10 <LL_RCC_PLL_GetR>
 8001976:	4603      	mov	r3, r0
 8001978:	0f5b      	lsrs	r3, r3, #29
 800197a:	3301      	adds	r3, #1
 800197c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001980:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001982:	697b      	ldr	r3, [r7, #20]
}
 8001984:	4618      	mov	r0, r3
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	08001bf8 	.word	0x08001bf8
 8001990:	00f42400 	.word	0x00f42400
 8001994:	01e84800 	.word	0x01e84800

08001998 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001998:	b598      	push	{r3, r4, r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800199c:	f7ff ff5c 	bl	8001858 <HAL_RCC_GetSysClockFreq>
 80019a0:	4604      	mov	r4, r0
 80019a2:	f7ff f9e4 	bl	8000d6e <LL_RCC_GetAHBPrescaler>
 80019a6:	4603      	mov	r3, r0
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	4a03      	ldr	r2, [pc, #12]	; (80019bc <HAL_RCC_GetHCLKFreq+0x24>)
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd98      	pop	{r3, r4, r7, pc}
 80019bc:	08001bb8 	.word	0x08001bb8

080019c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80019d8:	f7ff f9d4 	bl	8000d84 <LL_RCC_GetAHB3Prescaler>
 80019dc:	4603      	mov	r3, r0
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80019e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0c9c      	lsrs	r4, r3, #18
 80019fc:	f7fe ffe8 	bl	80009d0 <HAL_PWREx_GetVoltageRange>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4619      	mov	r1, r3
 8001a04:	4620      	mov	r0, r4
 8001a06:	f000 f80b 	bl	8001a20 <RCC_SetFlashLatency>
 8001a0a:	4603      	mov	r3, r0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd90      	pop	{r4, r7, pc}
 8001a14:	08001bf8 	.word	0x08001bf8
 8001a18:	08001bb8 	.word	0x08001bb8
 8001a1c:	431bde83 	.word	0x431bde83

08001a20 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08e      	sub	sp, #56	; 0x38
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001a2a:	4a3c      	ldr	r2, [pc, #240]	; (8001b1c <RCC_SetFlashLatency+0xfc>)
 8001a2c:	f107 0320 	add.w	r3, r7, #32
 8001a30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a34:	6018      	str	r0, [r3, #0]
 8001a36:	3304      	adds	r3, #4
 8001a38:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001a3a:	4a39      	ldr	r2, [pc, #228]	; (8001b20 <RCC_SetFlashLatency+0x100>)
 8001a3c:	f107 0318 	add.w	r3, r7, #24
 8001a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a44:	6018      	str	r0, [r3, #0]
 8001a46:	3304      	adds	r3, #4
 8001a48:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001a4a:	4a36      	ldr	r2, [pc, #216]	; (8001b24 <RCC_SetFlashLatency+0x104>)
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a52:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001a56:	2300      	movs	r3, #0
 8001a58:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a60:	d11d      	bne.n	8001a9e <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
 8001a66:	e016      	b.n	8001a96 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a70:	4413      	add	r3, r2
 8001a72:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001a76:	461a      	mov	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d808      	bhi.n	8001a90 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a86:	4413      	add	r3, r2
 8001a88:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001a8e:	e023      	b.n	8001ad8 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a92:	3301      	adds	r3, #1
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
 8001a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d9e5      	bls.n	8001a68 <RCC_SetFlashLatency+0x48>
 8001a9c:	e01c      	b.n	8001ad8 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa2:	e016      	b.n	8001ad2 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001aac:	4413      	add	r3, r2
 8001aae:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d808      	bhi.n	8001acc <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001aca:	e005      	b.n	8001ad8 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ace:	3301      	adds	r3, #1
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d9e5      	bls.n	8001aa4 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <RCC_SetFlashLatency+0x108>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 0207 	bic.w	r2, r3, #7
 8001ae0:	4911      	ldr	r1, [pc, #68]	; (8001b28 <RCC_SetFlashLatency+0x108>)
 8001ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001ae8:	f7fe fcd0 	bl	800048c <HAL_GetTick>
 8001aec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001aee:	e008      	b.n	8001b02 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001af0:	f7fe fccc 	bl	800048c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e007      	b.n	8001b12 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <RCC_SetFlashLatency+0x108>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1ef      	bne.n	8001af0 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3738      	adds	r7, #56	; 0x38
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	08001b9c 	.word	0x08001b9c
 8001b20:	08001ba4 	.word	0x08001ba4
 8001b24:	08001bac 	.word	0x08001bac
 8001b28:	58004000 	.word	0x58004000

08001b2c <__libc_init_array>:
 8001b2c:	b570      	push	{r4, r5, r6, lr}
 8001b2e:	4d0d      	ldr	r5, [pc, #52]	; (8001b64 <__libc_init_array+0x38>)
 8001b30:	4c0d      	ldr	r4, [pc, #52]	; (8001b68 <__libc_init_array+0x3c>)
 8001b32:	1b64      	subs	r4, r4, r5
 8001b34:	10a4      	asrs	r4, r4, #2
 8001b36:	2600      	movs	r6, #0
 8001b38:	42a6      	cmp	r6, r4
 8001b3a:	d109      	bne.n	8001b50 <__libc_init_array+0x24>
 8001b3c:	4d0b      	ldr	r5, [pc, #44]	; (8001b6c <__libc_init_array+0x40>)
 8001b3e:	4c0c      	ldr	r4, [pc, #48]	; (8001b70 <__libc_init_array+0x44>)
 8001b40:	f000 f820 	bl	8001b84 <_init>
 8001b44:	1b64      	subs	r4, r4, r5
 8001b46:	10a4      	asrs	r4, r4, #2
 8001b48:	2600      	movs	r6, #0
 8001b4a:	42a6      	cmp	r6, r4
 8001b4c:	d105      	bne.n	8001b5a <__libc_init_array+0x2e>
 8001b4e:	bd70      	pop	{r4, r5, r6, pc}
 8001b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b54:	4798      	blx	r3
 8001b56:	3601      	adds	r6, #1
 8001b58:	e7ee      	b.n	8001b38 <__libc_init_array+0xc>
 8001b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b5e:	4798      	blx	r3
 8001b60:	3601      	adds	r6, #1
 8001b62:	e7f2      	b.n	8001b4a <__libc_init_array+0x1e>
 8001b64:	08001c38 	.word	0x08001c38
 8001b68:	08001c38 	.word	0x08001c38
 8001b6c:	08001c38 	.word	0x08001c38
 8001b70:	08001c3c 	.word	0x08001c3c

08001b74 <memset>:
 8001b74:	4402      	add	r2, r0
 8001b76:	4603      	mov	r3, r0
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d100      	bne.n	8001b7e <memset+0xa>
 8001b7c:	4770      	bx	lr
 8001b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b82:	e7f9      	b.n	8001b78 <memset+0x4>

08001b84 <_init>:
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b86:	bf00      	nop
 8001b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8a:	bc08      	pop	{r3}
 8001b8c:	469e      	mov	lr, r3
 8001b8e:	4770      	bx	lr

08001b90 <_fini>:
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b92:	bf00      	nop
 8001b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b96:	bc08      	pop	{r3}
 8001b98:	469e      	mov	lr, r3
 8001b9a:	4770      	bx	lr
